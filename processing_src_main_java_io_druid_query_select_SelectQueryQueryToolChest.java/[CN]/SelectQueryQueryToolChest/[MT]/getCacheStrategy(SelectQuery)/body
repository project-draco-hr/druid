{
  return new CacheStrategy<Result<SelectResultValue>,Object,SelectQuery>(){
    @Override public byte[] computeCacheKey(    SelectQuery query){
      final DimFilter dimFilter=query.getDimensionsFilter();
      final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();
      final byte[] granularityBytes=query.getGranularity().cacheKey();
      final Set<String> dimensions=Sets.newTreeSet();
      if (query.getDimensions() != null) {
        dimensions.addAll(query.getDimensions());
      }
      final byte[][] dimensionsBytes=new byte[dimensions.size()][];
      int dimensionsBytesSize=0;
      int index=0;
      for (      String dimension : dimensions) {
        dimensionsBytes[index]=dimension.getBytes();
        dimensionsBytesSize+=dimensionsBytes[index].length;
        ++index;
      }
      final Set<String> metrics=Sets.newTreeSet();
      if (query.getMetrics() != null) {
        metrics.addAll(query.getMetrics());
      }
      final byte[][] metricBytes=new byte[metrics.size()][];
      int metricBytesSize=0;
      index=0;
      for (      String metric : metrics) {
        metricBytes[index]=metric.getBytes();
        metricBytesSize+=metricBytes[index].length;
        ++index;
      }
      final ByteBuffer queryCacheKey=ByteBuffer.allocate(1 + granularityBytes.length + filterBytes.length+ query.getPagingSpec().getCacheKey().length+ dimensionsBytesSize+ metricBytesSize).put(SELECT_QUERY).put(granularityBytes).put(filterBytes).put(query.getPagingSpec().getCacheKey());
      for (      byte[] dimensionsByte : dimensionsBytes) {
        queryCacheKey.put(dimensionsByte);
      }
      for (      byte[] metricByte : metricBytes) {
        queryCacheKey.put(metricByte);
      }
      return queryCacheKey.array();
    }
    @Override public TypeReference<Object> getCacheObjectClazz(){
      return OBJECT_TYPE_REFERENCE;
    }
    @Override public Function<Result<SelectResultValue>,Object> prepareForCache(){
      return new Function<Result<SelectResultValue>,Object>(){
        @Override public Object apply(        final Result<SelectResultValue> input){
          return Arrays.asList(input.getTimestamp().getMillis(),input.getValue().getPagingIdentifiers(),input.getValue().getEvents());
        }
      }
;
    }
    @Override public Function<Object,Result<SelectResultValue>> pullFromCache(){
      return new Function<Object,Result<SelectResultValue>>(){
        private final QueryGranularity granularity=query.getGranularity();
        @Override public Result<SelectResultValue> apply(        Object input){
          List<Object> results=(List<Object>)input;
          Iterator<Object> resultIter=results.iterator();
          DateTime timestamp=granularity.toDateTime(((Number)resultIter.next()).longValue());
          return new Result<SelectResultValue>(timestamp,new SelectResultValue((Map<String,Integer>)jsonMapper.convertValue(resultIter.next(),new TypeReference<Map<String,Integer>>(){
          }
),(List<EventHolder>)jsonMapper.convertValue(resultIter.next(),new TypeReference<List<EventHolder>>(){
          }
)));
        }
      }
;
    }
    @Override public Sequence<Result<SelectResultValue>> mergeSequences(    Sequence<Sequence<Result<SelectResultValue>>> seqOfSequences){
      return new MergeSequence<Result<SelectResultValue>>(getOrdering(),seqOfSequences);
    }
  }
;
}

{
  if (segments == null || segments.isEmpty()) {
    if (ingestionSpec.isIgnoreWhenNoSegments()) {
      logger.warn("No segments found for ingestionSpec [%s]",ingestionSpec);
      return job;
    }
 else {
      throw new ISE("No segments found for ingestion spec [%s]",ingestionSpec);
    }
  }
  logger.info("Found total [%d] segments for [%s]  in interval [%s]",segments.size(),ingestionSpec.getDataSource(),ingestionSpec.getIntervals());
  DatasourceIngestionSpec updatedIngestionSpec=ingestionSpec;
  if (updatedIngestionSpec.getDimensions() == null) {
    List<String> dims;
    if (config.getParser().getParseSpec().getDimensionsSpec().hasCustomDimensions()) {
      dims=config.getParser().getParseSpec().getDimensionsSpec().getDimensionNames();
    }
 else {
      Set<String> dimSet=Sets.newHashSet(Iterables.concat(Iterables.transform(segments,new Function<WindowedDataSegment,Iterable<String>>(){
        @Override public Iterable<String> apply(        WindowedDataSegment dataSegment){
          return dataSegment.getSegment().getDimensions();
        }
      }
)));
      dims=Lists.newArrayList(Sets.difference(dimSet,config.getParser().getParseSpec().getDimensionsSpec().getDimensionExclusions()));
    }
    updatedIngestionSpec=updatedIngestionSpec.withDimensions(dims);
  }
  if (updatedIngestionSpec.getMetrics() == null) {
    Set<String> metrics=Sets.newHashSet();
    final AggregatorFactory[] cols=config.getSchema().getDataSchema().getAggregators();
    if (cols != null) {
      for (      AggregatorFactory col : cols) {
        metrics.add(col.getName());
      }
    }
    updatedIngestionSpec=updatedIngestionSpec.withMetrics(Lists.newArrayList(metrics));
  }
  updatedIngestionSpec=updatedIngestionSpec.withQueryGranularity(config.getGranularitySpec().getQueryGranularity());
  job.getConfiguration().set(DatasourceInputFormat.CONF_DRUID_SCHEMA,mapper.writeValueAsString(updatedIngestionSpec));
  job.getConfiguration().set(DatasourceInputFormat.CONF_INPUT_SEGMENTS,mapper.writeValueAsString(segments));
  job.getConfiguration().set(DatasourceInputFormat.CONF_MAX_SPLIT_SIZE,String.valueOf(maxSplitSize));
  MultipleInputs.addInputPath(job,new Path("/dummy/tobe/ignored"),DatasourceInputFormat.class);
  return job;
}

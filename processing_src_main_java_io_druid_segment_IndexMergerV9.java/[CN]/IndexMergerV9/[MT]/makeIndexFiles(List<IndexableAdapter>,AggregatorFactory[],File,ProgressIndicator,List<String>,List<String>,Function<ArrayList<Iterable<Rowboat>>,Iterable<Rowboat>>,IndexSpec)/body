{
  progress.start();
  progress.progress();
  List<Metadata> metadataList=Lists.transform(adapters,new Function<IndexableAdapter,Metadata>(){
    @Override public Metadata apply(    IndexableAdapter input){
      return input.getMetadata();
    }
  }
);
  Metadata segmentMetadata=null;
  if (metricAggs != null) {
    AggregatorFactory[] combiningMetricAggs=new AggregatorFactory[metricAggs.length];
    for (int i=0; i < metricAggs.length; i++) {
      combiningMetricAggs[i]=metricAggs[i].getCombiningFactory();
    }
    segmentMetadata=Metadata.merge(metadataList,combiningMetricAggs);
  }
 else {
    segmentMetadata=Metadata.merge(metadataList,null);
  }
  Closer closer=Closer.create();
  final IOPeon ioPeon=new TmpFileIOPeon(false);
  closer.register(new Closeable(){
    @Override public void close() throws IOException {
      ioPeon.cleanup();
    }
  }
);
  final FileSmoosher v9Smoosher=new FileSmoosher(outDir);
  final File v9TmpDir=new File(outDir,"v9-tmp");
  v9TmpDir.mkdirs();
  closer.register(new Closeable(){
    @Override public void close() throws IOException {
      FileUtils.deleteDirectory(v9TmpDir);
    }
  }
);
  log.info("Start making v9 index files, outDir:%s",outDir);
  try {
    long startTime=System.currentTimeMillis();
    ByteStreams.write(Ints.toByteArray(IndexIO.V9_VERSION),Files.newOutputStreamSupplier(new File(outDir,"version.bin")));
    log.info("Completed version.bin in %,d millis.",System.currentTimeMillis() - startTime);
    progress.progress();
    final Map<String,ValueType> metricsValueTypes=Maps.newTreeMap(Ordering.<String>natural().nullsFirst());
    final Map<String,String> metricTypeNames=Maps.newTreeMap(Ordering.<String>natural().nullsFirst());
    final List<ColumnCapabilitiesImpl> dimCapabilities=Lists.newArrayListWithCapacity(mergedDimensions.size());
    mergeCapabilities(adapters,mergedDimensions,metricsValueTypes,metricTypeNames,dimCapabilities);
    final DimensionHandler[] handlers=makeDimensionHandlers(mergedDimensions,dimCapabilities);
    final List<DimensionMerger> mergers=new ArrayList<>();
    for (int i=0; i < mergedDimensions.size(); i++) {
      mergers.add(handlers[i].makeMerger(indexSpec,v9TmpDir,ioPeon,dimCapabilities.get(i),progress));
    }
    progress.progress();
    startTime=System.currentTimeMillis();
    final ArrayList<Map<String,IntBuffer>> dimConversions=Lists.newArrayListWithCapacity(adapters.size());
    final ArrayList<Boolean> dimensionSkipFlag=Lists.newArrayListWithCapacity(mergedDimensions.size());
    final ArrayList<Boolean> convertMissingDimsFlags=Lists.newArrayListWithCapacity(mergedDimensions.size());
    writeDimValueAndSetupDimConversion(adapters,progress,mergedDimensions,mergers);
    log.info("Completed dim conversions in %,d millis.",System.currentTimeMillis() - startTime);
    progress.progress();
    final Iterable<Rowboat> theRows=makeRowIterable(adapters,mergedDimensions,mergedMetrics,rowMergerFn,dimCapabilities,handlers,mergers);
    final LongColumnSerializer timeWriter=setupTimeWriter(ioPeon,indexSpec);
    final ArrayList<GenericColumnSerializer> metWriters=setupMetricsWriters(ioPeon,mergedMetrics,metricsValueTypes,metricTypeNames,indexSpec);
    final List<IntBuffer> rowNumConversions=Lists.newArrayListWithCapacity(adapters.size());
    mergeIndexesAndWriteColumns(adapters,progress,theRows,timeWriter,metWriters,rowNumConversions,mergers);
    final String section="build inverted index and columns";
    progress.startSection(section);
    makeTimeColumn(v9Smoosher,progress,timeWriter);
    makeMetricsColumns(v9Smoosher,progress,mergedMetrics,metricsValueTypes,metricTypeNames,metWriters);
    for (int i=0; i < mergedDimensions.size(); i++) {
      DimensionMergerV9 merger=(DimensionMergerV9)mergers.get(i);
      merger.writeIndexes(rowNumConversions,closer);
      if (merger.canSkip()) {
        continue;
      }
      ColumnDescriptor columnDesc=merger.makeColumnDescriptor();
      makeColumn(v9Smoosher,mergedDimensions.get(i),columnDesc);
    }
    progress.stopSection(section);
    progress.progress();
    makeIndexBinary(v9Smoosher,adapters,outDir,mergedDimensions,mergedMetrics,progress,indexSpec,mergers);
    makeMetadataBinary(v9Smoosher,progress,segmentMetadata);
    v9Smoosher.close();
    progress.stop();
    return outDir;
  }
 catch (  Throwable t) {
    throw closer.rethrow(t);
  }
 finally {
    closer.close();
  }
}

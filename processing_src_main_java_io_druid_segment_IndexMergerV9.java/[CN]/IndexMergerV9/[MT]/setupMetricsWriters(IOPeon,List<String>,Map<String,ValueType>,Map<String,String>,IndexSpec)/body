{
  ArrayList<GenericColumnSerializer> metWriters=Lists.newArrayListWithCapacity(mergedMetrics.size());
  final CompressedObjectStrategy.CompressionStrategy metCompression=indexSpec.getMetricCompression();
  final CompressionFactory.LongEncodingStrategy longEncoding=indexSpec.getLongEncoding();
  for (  String metric : mergedMetrics) {
    ValueType type=metricsValueTypes.get(metric);
    GenericColumnSerializer writer;
switch (type) {
case LONG:
      writer=LongColumnSerializer.create(ioPeon,metric,metCompression,longEncoding);
    break;
case FLOAT:
  writer=FloatColumnSerializer.create(ioPeon,metric,metCompression);
break;
case COMPLEX:
final String typeName=metricTypeNames.get(metric);
ComplexMetricSerde serde=ComplexMetrics.getSerdeForType(typeName);
if (serde == null) {
throw new ISE("Unknown type[%s]",typeName);
}
writer=ComplexColumnSerializer.create(ioPeon,metric,serde);
break;
default :
throw new ISE("Unknown type[%s]",type);
}
writer.open();
metWriters.add(writer);
}
return metWriters;
}

{
  final String section="make index.drd";
  progress.startSection(section);
  long startTime=System.currentTimeMillis();
  final Set<String> finalDimensions=Sets.newLinkedHashSet();
  final Set<String> finalColumns=Sets.newLinkedHashSet();
  finalColumns.addAll(mergedMetrics);
  for (int i=0; i < mergedDimensions.size(); ++i) {
    if (dimensionSkipFlag.get(i)) {
      continue;
    }
    finalColumns.add(mergedDimensions.get(i));
    finalDimensions.add(mergedDimensions.get(i));
  }
  GenericIndexed<String> cols=GenericIndexed.fromIterable(finalColumns,GenericIndexed.STRING_STRATEGY);
  GenericIndexed<String> dims=GenericIndexed.fromIterable(finalDimensions,GenericIndexed.STRING_STRATEGY);
  final String bitmapSerdeFactoryType=mapper.writeValueAsString(indexSpec.getBitmapSerdeFactory());
  final long numBytes=cols.getSerializedSize() + dims.getSerializedSize() + 16+ serializerUtils.getSerializedStringByteSize(bitmapSerdeFactoryType);
  final SmooshedWriter writer=v9Smoosher.addWithSmooshedWriter("index.drd",numBytes);
  cols.writeToChannel(writer);
  dims.writeToChannel(writer);
  DateTime minTime=new DateTime(JodaUtils.MAX_INSTANT);
  DateTime maxTime=new DateTime(JodaUtils.MIN_INSTANT);
  for (  IndexableAdapter index : adapters) {
    minTime=JodaUtils.minDateTime(minTime,index.getDataInterval().getStart());
    maxTime=JodaUtils.maxDateTime(maxTime,index.getDataInterval().getEnd());
  }
  final Interval dataInterval=new Interval(minTime,maxTime);
  serializerUtils.writeLong(writer,dataInterval.getStartMillis());
  serializerUtils.writeLong(writer,dataInterval.getEndMillis());
  serializerUtils.writeString(writer,bitmapSerdeFactoryType);
  writer.close();
  IndexIO.checkFileSize(new File(outDir,"index.drd"));
  log.info("Completed index.drd in %,d millis.",System.currentTimeMillis() - startTime);
  progress.stopSection(section);
}

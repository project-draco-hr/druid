{
  return dbi.withHandle(new HandleCallback<List<Task>>(){
    @Override public List<Task> withHandle(    Handle handle) throws Exception {
      final List<Map<String,Object>> dbTasks=handle.createQuery(String.format("SELECT id, payload, status_payload FROM %s WHERE active = 1",dbConnectorConfig.getTaskTable())).list();
      final ImmutableList.Builder<Task> tasks=ImmutableList.builder();
      for (      final Map<String,Object> row : dbTasks) {
        final String id=row.get("id").toString();
        try {
          final Task task=jsonMapper.readValue(row.get("payload").toString(),Task.class);
          final TaskStatus status=jsonMapper.readValue(row.get("status_payload").toString(),TaskStatus.class);
          if (status.isRunnable()) {
            tasks.add(task);
          }
        }
 catch (        Exception e) {
          log.makeAlert(e,"Failed to parse task payload").addData("task",id).emit();
        }
      }
      return tasks.build();
    }
  }
);
}

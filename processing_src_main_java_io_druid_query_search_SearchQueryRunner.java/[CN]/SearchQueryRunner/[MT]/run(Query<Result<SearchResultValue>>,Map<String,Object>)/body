{
  if (!(input instanceof SearchQuery)) {
    throw new ISE("Got a [%s] which isn't a %s",input.getClass(),SearchQuery.class);
  }
  final SearchQuery query=(SearchQuery)input;
  final Filter filter=Filters.convertDimensionFilters(query.getDimensionsFilter());
  final List<DimensionSpec> dimensions=query.getDimensions();
  final SearchQuerySpec searchQuerySpec=query.getQuery();
  final int limit=query.getLimit();
  final boolean descending=query.isDescending();
  final QueryableIndex index=segment.asQueryableIndex();
  if (index != null) {
    final TreeSet<SearchHit> retVal=Sets.newTreeSet(query.getSort().getComparator());
    Iterable<DimensionSpec> dimsToSearch;
    if (dimensions == null || dimensions.isEmpty()) {
      dimsToSearch=Iterables.transform(index.getAvailableDimensions(),Druids.DIMENSION_IDENTITY);
    }
 else {
      dimsToSearch=dimensions;
    }
    final BitmapFactory bitmapFactory=index.getBitmapFactoryForDimensions();
    final ImmutableBitmap baseFilter;
    if (filter == null) {
      baseFilter=bitmapFactory.complement(bitmapFactory.makeEmptyImmutableBitmap(),index.getNumRows());
    }
 else {
      final ColumnSelectorBitmapIndexSelector selector=new ColumnSelectorBitmapIndexSelector(bitmapFactory,index);
      baseFilter=filter.getBitmapIndex(selector);
    }
    for (    DimensionSpec dimension : dimsToSearch) {
      final Column column=index.getColumn(dimension.getDimension());
      if (column == null) {
        continue;
      }
      final BitmapIndex bitmapIndex=column.getBitmapIndex();
      ExtractionFn extractionFn=dimension.getExtractionFn();
      if (extractionFn == null) {
        extractionFn=IdentityExtractionFn.getInstance();
      }
      if (bitmapIndex != null) {
        for (int i=0; i < bitmapIndex.getCardinality(); ++i) {
          String dimVal=Strings.nullToEmpty(extractionFn.apply(bitmapIndex.getValue(i)));
          if (searchQuerySpec.accept(dimVal) && bitmapFactory.intersection(Arrays.asList(baseFilter,bitmapIndex.getBitmap(i))).size() > 0) {
            retVal.add(new SearchHit(dimension.getOutputName(),dimVal));
            if (retVal.size() >= limit) {
              return makeReturnResult(limit,retVal);
            }
          }
        }
      }
    }
    return makeReturnResult(limit,retVal);
  }
  final StorageAdapter adapter=segment.asStorageAdapter();
  if (adapter == null) {
    log.makeAlert("WTF!? Unable to process search query on segment.").addData("segment",segment.getIdentifier()).addData("query",query).emit();
    throw new ISE("Null storage adapter found. Probably trying to issue a query against a segment being memory unmapped.");
  }
  final Iterable<DimensionSpec> dimsToSearch;
  if (dimensions == null || dimensions.isEmpty()) {
    dimsToSearch=Iterables.transform(adapter.getAvailableDimensions(),Druids.DIMENSION_IDENTITY);
  }
 else {
    dimsToSearch=dimensions;
  }
  final Sequence<Cursor> cursors=adapter.makeCursors(filter,segment.getDataInterval(),QueryGranularity.ALL,descending);
  final TreeSet<SearchHit> retVal=cursors.accumulate(Sets.newTreeSet(query.getSort().getComparator()),new Accumulator<TreeSet<SearchHit>,Cursor>(){
    @Override public TreeSet<SearchHit> accumulate(    TreeSet<SearchHit> set,    Cursor cursor){
      if (set.size() >= limit) {
        return set;
      }
      Map<String,DimensionSelector> dimSelectors=Maps.newHashMap();
      for (      DimensionSpec dim : dimsToSearch) {
        dimSelectors.put(dim.getOutputName(),cursor.makeDimensionSelector(dim));
      }
      while (!cursor.isDone()) {
        for (        Map.Entry<String,DimensionSelector> entry : dimSelectors.entrySet()) {
          final DimensionSelector selector=entry.getValue();
          if (selector != null) {
            final IndexedInts vals=selector.getRow();
            for (int i=0; i < vals.size(); ++i) {
              final String dimVal=selector.lookupName(vals.get(i));
              if (searchQuerySpec.accept(dimVal)) {
                set.add(new SearchHit(entry.getKey(),dimVal));
                if (set.size() >= limit) {
                  return set;
                }
              }
            }
          }
        }
        cursor.advance();
      }
      return set;
    }
  }
);
  return makeReturnResult(limit,retVal);
}

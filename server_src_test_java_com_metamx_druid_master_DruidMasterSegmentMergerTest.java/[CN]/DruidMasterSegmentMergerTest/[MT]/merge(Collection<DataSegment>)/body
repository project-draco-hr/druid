{
  final List<List<DataSegment>> retVal=Lists.newArrayList();
  final IndexingServiceClient indexingServiceClient=new IndexingServiceClient(null,null,null){
    @Override public void mergeSegments(    List<DataSegment> segmentsToMerge){
      retVal.add(segmentsToMerge);
    }
  }
;
  final AtomicReference<MergerWhitelist> whitelistRef=new AtomicReference<MergerWhitelist>(null);
  final DruidMasterSegmentMerger merger=new DruidMasterSegmentMerger(indexingServiceClient,whitelistRef);
  final DynamicConfigs dynamicConfigs=new DynamicConfigs(null,mergeBytesLimit,mergeSegmentsLimit,null);
  final DruidMasterRuntimeParams params=DruidMasterRuntimeParams.newBuilder().withAvailableSegments(ImmutableSet.copyOf(segments)).withDynamicConfigs(new DynamicConfigs(){
    @Override public long getMergeBytesLimit(){
      return mergeBytesLimit;
    }
    @Override public int getMergeSegmentsLimit(){
      return mergeSegmentsLimit;
    }
  }
).build();
  merger.run(params);
  return retVal;
}

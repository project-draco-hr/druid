{
  URLClassLoader loader=loadersMap.get(coordinate);
  if (loader == null) {
    final CollectRequest collectRequest=new CollectRequest();
    DefaultArtifact versionedArtifact;
    try {
      versionedArtifact=new DefaultArtifact(coordinate);
    }
 catch (    IllegalArgumentException e) {
      if (defaultVersion != null) {
        versionedArtifact=new DefaultArtifact(coordinate + ":" + defaultVersion);
      }
 else {
        throw e;
      }
    }
    collectRequest.setRoot(new Dependency(versionedArtifact,JavaScopes.RUNTIME));
    DependencyRequest dependencyRequest=new DependencyRequest(collectRequest,DependencyFilterUtils.andFilter(DependencyFilterUtils.classpathFilter(JavaScopes.RUNTIME),new DependencyFilter(){
      @Override public boolean accept(      DependencyNode node,      List<DependencyNode> parents){
        if (accept(node.getArtifact())) {
          return false;
        }
        for (        DependencyNode parent : parents) {
          if (accept(parent.getArtifact())) {
            return false;
          }
        }
        return true;
      }
      private boolean accept(      final Artifact artifact){
        return exclusions.contains(artifact.getGroupId());
      }
    }
));
    try {
      final List<Artifact> artifacts=aether.resolveArtifacts(dependencyRequest);
      List<URL> urls=Lists.newArrayListWithExpectedSize(artifacts.size());
      for (      Artifact artifact : artifacts) {
        if (!exclusions.contains(artifact.getGroupId())) {
          urls.add(artifact.getFile().toURI().toURL());
        }
 else {
          log.debug("Skipped Artifact[%s]",artifact);
        }
      }
      for (      URL url : urls) {
        log.info("Added URL[%s]",url);
      }
      loader=new URLClassLoader(urls.toArray(new URL[urls.size()]),Initialization.class.getClassLoader());
      loadersMap.put(coordinate,loader);
    }
 catch (    Exception e) {
      log.error(e,"Unable to resolve artifacts for [%s].",dependencyRequest);
      throw Throwables.propagate(e);
    }
  }
  return loader;
}

{
  final Task task=new NoopTask(null,0,0,null,null,null);
  taskActionTestKit.getTaskLockbox().add(task);
  final SegmentIdentifier id1=allocate(task,PARTY_TIME,QueryGranularity.NONE,Granularity.HOUR,"s1",null);
  final SegmentIdentifier id2=allocate(task,PARTY_TIME,QueryGranularity.NONE,Granularity.HOUR,"s1",id1.getIdentifierAsString());
  final SegmentIdentifier id3=allocate(task,PARTY_TIME,QueryGranularity.NONE,Granularity.HOUR,"s1",id2.getIdentifierAsString());
  final TaskLock partyLock=Iterables.getOnlyElement(FluentIterable.from(taskActionTestKit.getTaskLockbox().findLocksForTask(task)).filter(new Predicate<TaskLock>(){
    @Override public boolean apply(    TaskLock input){
      return input.getInterval().contains(PARTY_TIME);
    }
  }
));
  assertSameIdentifier(id1,new SegmentIdentifier(DATA_SOURCE,Granularity.HOUR.bucket(PARTY_TIME),partyLock.getVersion(),new NumberedShardSpec(0,0)));
  assertSameIdentifier(id2,new SegmentIdentifier(DATA_SOURCE,Granularity.HOUR.bucket(PARTY_TIME),partyLock.getVersion(),new NumberedShardSpec(1,0)));
  assertSameIdentifier(id3,new SegmentIdentifier(DATA_SOURCE,Granularity.HOUR.bucket(PARTY_TIME),partyLock.getVersion(),new NumberedShardSpec(2,0)));
}

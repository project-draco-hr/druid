{
  final Sequence<T> returningSeq=baseRunner.run(query,context);
  return new YieldingSequenceBase<T>(){
    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){
      Yielder<OutType> yielder=returningSeq.toYielder(initValue,accumulator);
      final List<SegmentDescriptor> missingSegments=getMissingSegments(context);
      if (missingSegments.isEmpty()) {
        return yielder;
      }
      for (int i=0; i < config.numTries(); i++) {
        context.put(MISSING_SEGMENTS_KEY,Lists.newArrayList());
        final Query<T> retryQuery=query.withQuerySegmentSpec(new MultipleSpecificSegmentSpec(missingSegments));
        yielder=baseRunner.run(retryQuery,context).toYielder(initValue,accumulator);
        if (getMissingSegments(context).isEmpty()) {
          break;
        }
      }
      final List<SegmentDescriptor> finalMissingSegs=getMissingSegments(context);
      if (!config.returnPartialResults() && !finalMissingSegs.isEmpty()) {
        throw new SegmentMissingException("No results found for segments[%s]",finalMissingSegs);
      }
      return yielder;
    }
  }
;
}

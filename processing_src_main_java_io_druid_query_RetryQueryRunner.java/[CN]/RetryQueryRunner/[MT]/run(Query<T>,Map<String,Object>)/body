{
  final List<Sequence<T>> listOfSequences=Lists.newArrayList();
  listOfSequences.add(baseRunner.run(query,context));
  return new YieldingSequenceBase<T>(){
    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){
      final List<SegmentDescriptor> missingSegments=getMissingSegments(context);
      if (!missingSegments.isEmpty()) {
        for (int i=0; i < config.getNumTries(); i++) {
          log.info("[%,d] missing segments found. Retry attempt [%,d]",missingSegments.size(),i);
          context.put(MISSING_SEGMENTS_KEY,Lists.newArrayList());
          final Query<T> retryQuery=query.withQuerySegmentSpec(new MultipleSpecificSegmentSpec(missingSegments));
          Sequence<T> retrySequence=baseRunner.run(retryQuery,context);
          listOfSequences.add(retrySequence);
          if (getMissingSegments(context).isEmpty()) {
            break;
          }
        }
        final List<SegmentDescriptor> finalMissingSegs=getMissingSegments(context);
        if (!config.isReturnPartialResults() && !finalMissingSegs.isEmpty()) {
          throw new SegmentMissingException("No results found for segments[%s]",finalMissingSegs);
        }
      }
      return toolChest.mergeSequencesUnordered(Sequences.simple(listOfSequences)).toYielder(initValue,accumulator);
    }
  }
;
}

{
  PagingSpec pagingSpec=new PagingSpec(null,3);
  SelectQuery query=new SelectQuery(new TableDataSource(QueryRunnerTestHelper.dataSource),SelectQueryRunnerTest.I_0112_0114,false,null,QueryRunnerTestHelper.dayGran,DefaultDimensionSpec.toSpec(QueryRunnerTestHelper.dimensions),Arrays.<String>asList(),pagingSpec,null);
  for (  int[] expected : new int[][]{{2,2,3,3},{5,5,3,3},{8,8,3,3},{11,11,3,3},{12,12,1,1}}) {
    List<Result<SelectResultValue>> results=Sequences.toList(runner.run(query,ImmutableMap.of()),Lists.<Result<SelectResultValue>>newArrayList());
    Assert.assertEquals(2,results.size());
    SelectResultValue value0=results.get(0).getValue();
    SelectResultValue value1=results.get(1).getValue();
    Map<String,Integer> pagingIdentifiers0=value0.getPagingIdentifiers();
    Map<String,Integer> pagingIdentifiers1=value1.getPagingIdentifiers();
    Assert.assertEquals(1,pagingIdentifiers0.size());
    Assert.assertEquals(1,pagingIdentifiers1.size());
    if (expected[0] != 0) {
      Assert.assertEquals(expected[0],pagingIdentifiers0.get(segment0.getIdentifier()).intValue());
    }
    if (expected[1] != 0) {
      Assert.assertEquals(expected[1],pagingIdentifiers1.get(segment1.getIdentifier()).intValue());
    }
    Assert.assertEquals(expected[2],value0.getEvents().size());
    Assert.assertEquals(expected[3],value1.getEvents().size());
    query=query.withPagingSpec(toNextPager(3,pagingIdentifiers0,pagingIdentifiers1));
  }
}

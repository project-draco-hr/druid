{
  PagingSpec pagingSpec=new PagingSpec(null,3);
  SelectQuery query=new SelectQuery(new TableDataSource(QueryRunnerTestHelper.dataSource),SelectQueryRunnerTest.I_0112_0114,false,null,QueryRunnerTestHelper.allGran,DefaultDimensionSpec.toSpec(QueryRunnerTestHelper.dimensions),Arrays.<String>asList(),pagingSpec,null);
  for (  int[] expected : new int[][]{{2,0,3},{5,0,3},{8,0,3},{11,0,3},{12,1,3},{0,4,3},{0,7,3},{0,10,3},{0,12,2},{0,13,0}}) {
    List<Result<SelectResultValue>> results=Sequences.toList(runner.run(query,ImmutableMap.of()),Lists.<Result<SelectResultValue>>newArrayList());
    Assert.assertEquals(1,results.size());
    SelectResultValue value=results.get(0).getValue();
    Map<String,Integer> pagingIdentifiers=value.getPagingIdentifiers();
    if (expected[0] != 0) {
      Assert.assertEquals(expected[0],pagingIdentifiers.get(segment0.getIdentifier()).intValue());
    }
    if (expected[1] != 0) {
      Assert.assertEquals(expected[1],pagingIdentifiers.get(segment1.getIdentifier()).intValue());
    }
    Assert.assertEquals(expected[2],value.getEvents().size());
    query=query.withPagingSpec(toNextPager(3,pagingIdentifiers));
  }
}

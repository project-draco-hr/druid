{
  final int priority=Integer.parseInt(query.getContextValue("priority","0"));
  if (Iterables.isEmpty(queryables)) {
    log.warn("No queryables found.");
    return outType;
  }
  List<Future<Boolean>> futures=Lists.newArrayList(Iterables.transform(queryables,new Function<QueryRunner<T>,Future<Boolean>>(){
    @Override public Future<Boolean> apply(    final QueryRunner<T> input){
      return exec.submit(new PrioritizedCallable<Boolean>(priority){
        @Override public Boolean call() throws Exception {
          try {
            input.run(query).accumulate(outType,outTypeTAccumulator);
            return true;
          }
 catch (          Exception e) {
            log.error(e,"Exception with one of the sequences!");
            throw Throwables.propagate(e);
          }
        }
      }
);
    }
  }
));
  for (  Future<Boolean> future : futures) {
    try {
      future.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
  }
  return outType;
}

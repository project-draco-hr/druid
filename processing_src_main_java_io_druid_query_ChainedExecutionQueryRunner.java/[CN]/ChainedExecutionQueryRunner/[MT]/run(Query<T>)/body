{
  final int priority=query.getContextPriority(0);
  return new BaseSequence<T,Iterator<T>>(new BaseSequence.IteratorMaker<T,Iterator<T>>(){
    @Override public Iterator<T> make(){
      ListenableFuture<List<Iterable<T>>> futures=Futures.allAsList(Lists.newArrayList(Iterables.transform(queryables,new Function<QueryRunner<T>,ListenableFuture<Iterable<T>>>(){
        @Override public ListenableFuture<Iterable<T>> apply(        final QueryRunner<T> input){
          return exec.submit(new AbstractPrioritizedCallable<Iterable<T>>(priority){
            @Override public Iterable<T> call() throws Exception {
              try {
                if (input == null) {
                  throw new ISE("Input is null?! How is this possible?!");
                }
                Sequence<T> result=input.run(query);
                if (result == null) {
                  throw new ISE("Got a null result! Segments are missing!");
                }
                List<T> retVal=Sequences.toList(result,Lists.<T>newArrayList());
                if (retVal == null) {
                  throw new ISE("Got a null list of results! WTF?!");
                }
                return retVal;
              }
 catch (              Exception e) {
                log.error(e,"Exception with one of the sequences!");
                throw Throwables.propagate(e);
              }
            }
          }
);
        }
      }
)));
      queryWatcher.registerQuery(query,futures);
      try {
        return new MergeIterable<>(ordering.nullsFirst(),futures.get()).iterator();
      }
 catch (      InterruptedException e) {
        log.warn(e,"Query interrupted, cancelling pending results, query id [%s]",query.getId());
        futures.cancel(true);
        throw new QueryInterruptedException(e);
      }
catch (      ExecutionException e) {
        throw Throwables.propagate(e.getCause());
      }
    }
    @Override public void cleanup(    Iterator<T> tIterator){
    }
  }
);
}

{
  Random rand=new Random(0);
  HyperUniquesAggregatorFactory factory=new HyperUniquesAggregatorFactory("foo","bar");
  Comparator comparator=factory.getComparator();
  for (int i=1; i < 1000; ++i) {
    HyperLogLogCollector collector1=HyperLogLogCollector.makeLatestCollector();
    int j=rand.nextInt(50);
    for (int l=0; l < j; ++l) {
      collector1.add(fn.hashLong(rand.nextLong()).asBytes());
    }
    HyperLogLogCollector collector2=HyperLogLogCollector.makeLatestCollector();
    int k=j + 1 + rand.nextInt(5);
    for (int l=0; l < k; ++l) {
      collector2.add(fn.hashLong(rand.nextLong()).asBytes());
    }
    Assert.assertEquals(Double.compare(collector1.estimateCardinality(),collector2.estimateCardinality()),comparator.compare(collector1,collector2));
  }
  for (int i=1; i < 100; ++i) {
    HyperLogLogCollector collector1=HyperLogLogCollector.makeLatestCollector();
    int j=rand.nextInt(500);
    for (int l=0; l < j; ++l) {
      collector1.add(fn.hashLong(rand.nextLong()).asBytes());
    }
    HyperLogLogCollector collector2=HyperLogLogCollector.makeLatestCollector();
    int k=j + 2 + rand.nextInt(5);
    for (int l=0; l < k; ++l) {
      collector2.add(fn.hashLong(rand.nextLong()).asBytes());
    }
    Assert.assertEquals(Double.compare(collector1.estimateCardinality(),collector2.estimateCardinality()),comparator.compare(collector1,collector2));
  }
  for (int i=1; i < 10; ++i) {
    HyperLogLogCollector collector1=HyperLogLogCollector.makeLatestCollector();
    int j=rand.nextInt(100000);
    for (int l=0; l < j; ++l) {
      collector1.add(fn.hashLong(rand.nextLong()).asBytes());
    }
    HyperLogLogCollector collector2=HyperLogLogCollector.makeLatestCollector();
    int k=j + 20000 + rand.nextInt(100000);
    for (int l=0; l < k; ++l) {
      collector2.add(fn.hashLong(rand.nextLong()).asBytes());
    }
    Assert.assertEquals(Double.compare(collector1.estimateCardinality(),collector2.estimateCardinality()),comparator.compare(collector1,collector2));
  }
}

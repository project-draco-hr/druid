{
  final ListeningExecutorService queryExecutor=MoreExecutors.listeningDecorator(exec);
  if (config.get().isSingleThreaded()) {
    return new ConcatQueryRunner<>(Sequences.map(Sequences.simple(queryRunners),new Function<QueryRunner<Row>,QueryRunner<Row>>(){
      @Override public QueryRunner<Row> apply(      final QueryRunner<Row> input){
        return new QueryRunner<Row>(){
          @Override public Sequence<Row> run(          final Query<Row> query,          final Map<String,Object> responseContext){
            final GroupByQuery queryParam=(GroupByQuery)query;
            final Pair<IncrementalIndex,Accumulator<IncrementalIndex,Row>> indexAccumulatorPair=GroupByQueryHelper.createIndexAccumulatorPair(queryParam,config.get(),computationBufferPool);
            final Pair<Queue,Accumulator<Queue,Row>> bySegmentAccumulatorPair=GroupByQueryHelper.createBySegmentAccumulatorPair();
            final int priority=BaseQuery.getContextPriority(query,0);
            final boolean bySegment=BaseQuery.getContextBySegment(query,false);
            final ListenableFuture<Void> future=queryExecutor.submit(new AbstractPrioritizedCallable<Void>(priority){
              @Override public Void call() throws Exception {
                if (bySegment) {
                  input.run(queryParam,responseContext).accumulate(bySegmentAccumulatorPair.lhs,bySegmentAccumulatorPair.rhs);
                }
 else {
                  input.run(query,responseContext).accumulate(indexAccumulatorPair.lhs,indexAccumulatorPair.rhs);
                }
                return null;
              }
            }
);
            try {
              queryWatcher.registerQuery(query,future);
              final Number timeout=query.getContextValue(QueryContextKeys.TIMEOUT,(Number)null);
              if (timeout == null) {
                future.get();
              }
 else {
                future.get(timeout.longValue(),TimeUnit.MILLISECONDS);
              }
            }
 catch (            InterruptedException e) {
              log.warn(e,"Query interrupted, cancelling pending results, query id [%s]",query.getId());
              future.cancel(true);
              throw new QueryInterruptedException(e);
            }
catch (            CancellationException e) {
              throw new QueryInterruptedException(e);
            }
catch (            TimeoutException e) {
              log.info("Query timeout, cancelling pending results for query id [%s]",query.getId());
              future.cancel(true);
              throw new QueryInterruptedException(e);
            }
catch (            ExecutionException e) {
              throw Throwables.propagate(e.getCause());
            }
            if (bySegment) {
              return Sequences.simple(bySegmentAccumulatorPair.lhs);
            }
            return Sequences.simple(indexAccumulatorPair.lhs.iterableWithPostAggregations(null,query.isDescending()));
          }
        }
;
      }
    }
));
  }
 else {
    return new GroupByParallelQueryRunner(queryExecutor,config,queryWatcher,computationBufferPool,queryRunners);
  }
}

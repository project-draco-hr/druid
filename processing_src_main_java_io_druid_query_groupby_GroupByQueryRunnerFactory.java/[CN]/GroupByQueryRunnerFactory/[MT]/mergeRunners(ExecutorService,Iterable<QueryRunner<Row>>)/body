{
  final ListeningExecutorService queryExecutor=MoreExecutors.listeningDecorator(exec);
  if (config.get().isSingleThreaded()) {
    return new ConcatQueryRunner<Row>(Sequences.map(Sequences.simple(queryRunners),new Function<QueryRunner<Row>,QueryRunner<Row>>(){
      @Override public QueryRunner<Row> apply(      final QueryRunner<Row> input){
        return new QueryRunner<Row>(){
          @Override public Sequence<Row> run(          final Query<Row> query){
            ListenableFuture<Sequence<Row>> future=queryExecutor.submit(new Callable<Sequence<Row>>(){
              @Override public Sequence<Row> call() throws Exception {
                return new ExecutorExecutingSequence<Row>(input.run(query),queryExecutor);
              }
            }
);
            try {
              queryWatcher.registerQuery(query,future);
              final Number timeout=query.getContextValue("timeout",(Number)null);
              return timeout == null ? future.get() : future.get(timeout.longValue(),TimeUnit.MILLISECONDS);
            }
 catch (            InterruptedException e) {
              log.warn(e,"Query interrupted, cancelling pending results, query id [%s]",query.getId());
              future.cancel(true);
              throw new QueryInterruptedException("Query interrupted");
            }
catch (            CancellationException e) {
              throw new QueryInterruptedException("Query cancelled");
            }
catch (            TimeoutException e) {
              log.info("Query timeout, cancelling pending results for query id [%s]",query.getId());
              future.cancel(true);
              throw new QueryInterruptedException("Query timeout");
            }
catch (            ExecutionException e) {
              throw Throwables.propagate(e.getCause());
            }
          }
        }
;
      }
    }
));
  }
 else {
    return new GroupByParallelQueryRunner(queryExecutor,new RowOrdering(),config,queryWatcher,queryRunners);
  }
}

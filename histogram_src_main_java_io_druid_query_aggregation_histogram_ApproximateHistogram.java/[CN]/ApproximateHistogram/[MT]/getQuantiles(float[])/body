{
  for (  float p : probabilities) {
    Preconditions.checkArgument(0 < p & p < 1,"quantile probabilities must be strictly between 0 and 1");
  }
  float[] quantiles=new float[probabilities.length];
  Arrays.fill(quantiles,Float.NaN);
  if (this.count() == 0) {
    return quantiles;
  }
  final long[] bins=this.bins();
  for (int j=0; j < probabilities.length; ++j) {
    final double s=probabilities[j] * this.count();
    int i=0;
    int sum=0;
    int k=1;
    long count=0;
    while (k <= this.binCount()) {
      count=bins[k - 1];
      if (sum + count > s) {
        i=k - 1;
        break;
      }
 else {
        sum+=count;
      }
      ++k;
    }
    if (i == 0) {
      quantiles[j]=this.min();
    }
 else {
      final double d=s - sum;
      final double c=-2 * d;
      final long a=bins[i] - bins[i - 1];
      final long b=2 * bins[i - 1];
      double z=0;
      if (a == 0) {
        z=-c / b;
      }
 else {
        z=(-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);
      }
      final double uj=this.positions[i - 1] + (this.positions[i] - this.positions[i - 1]) * z;
      quantiles[j]=(float)uj;
    }
  }
  return quantiles;
}

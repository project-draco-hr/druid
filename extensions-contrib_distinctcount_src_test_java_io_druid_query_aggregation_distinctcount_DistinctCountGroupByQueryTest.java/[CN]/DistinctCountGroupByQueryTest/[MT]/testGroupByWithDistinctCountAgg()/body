{
  final ObjectMapper mapper=new DefaultObjectMapper();
  final StupidPool<ByteBuffer> pool=new StupidPool<ByteBuffer>(new Supplier<ByteBuffer>(){
    @Override public ByteBuffer get(){
      return ByteBuffer.allocate(1024 * 1024);
    }
  }
);
  final GroupByQueryConfig config=new GroupByQueryConfig();
  config.setMaxIntermediateRows(10000);
  final Supplier<GroupByQueryConfig> configSupplier=Suppliers.ofInstance(config);
  final GroupByQueryEngine engine=new GroupByQueryEngine(configSupplier,pool);
  final GroupByQueryRunnerFactory factory=new GroupByQueryRunnerFactory(engine,QueryRunnerTestHelper.NOOP_QUERYWATCHER,configSupplier,new GroupByQueryQueryToolChest(configSupplier,mapper,engine,pool,QueryRunnerTestHelper.NoopIntervalChunkingQueryRunnerDecorator()),pool);
  IncrementalIndex index=new OnheapIncrementalIndex(0,QueryGranularities.SECOND,new AggregatorFactory[]{new CountAggregatorFactory("cnt")},1000);
  String visitor_id="visitor_id";
  String client_type="client_type";
  long timestamp=System.currentTimeMillis();
  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.<String,Object>of(visitor_id,"0",client_type,"iphone")));
  index.add(new MapBasedInputRow(timestamp + 1,Lists.newArrayList(visitor_id,client_type),ImmutableMap.<String,Object>of(visitor_id,"1",client_type,"iphone")));
  index.add(new MapBasedInputRow(timestamp + 2,Lists.newArrayList(visitor_id,client_type),ImmutableMap.<String,Object>of(visitor_id,"2",client_type,"android")));
  GroupByQuery query=new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.allGran).setDimensions(Arrays.<DimensionSpec>asList(new DefaultDimensionSpec(client_type,client_type))).setInterval(QueryRunnerTestHelper.fullOnInterval).setLimitSpec(new DefaultLimitSpec(Lists.newArrayList(new OrderByColumnSpec(client_type,OrderByColumnSpec.Direction.DESCENDING)),10)).setAggregatorSpecs(Lists.newArrayList(QueryRunnerTestHelper.rowsCount,new DistinctCountAggregatorFactory("UV",visitor_id,null))).build();
  final Segment incrementalIndexSegment=new IncrementalIndexSegment(index,null);
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,factory.createRunner(incrementalIndexSegment),query);
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("1970-01-01T00:00:00.000Z",client_type,"iphone","UV",2L,"rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("1970-01-01T00:00:00.000Z",client_type,"android","UV",1L,"rows",1L));
  TestHelper.assertExpectedObjects(expectedResults,results,"distinct-count");
}

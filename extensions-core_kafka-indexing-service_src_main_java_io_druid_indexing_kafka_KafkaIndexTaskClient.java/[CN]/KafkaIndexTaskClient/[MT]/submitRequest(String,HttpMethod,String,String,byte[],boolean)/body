{
  final RetryPolicy retryPolicy=retryPolicyFactory.makeRetryPolicy();
  while (true) {
    FullResponseHolder response=null;
    Request request=null;
    Optional<TaskStatus> status=taskInfoProvider.getTaskStatus(id);
    if (!status.isPresent() || !status.get().isRunnable()) {
      throw new TaskNotRunnableException(String.format("Aborting request because task [%s] is not runnable",id));
    }
    try {
      TaskLocation location=taskInfoProvider.getTaskLocation(id);
      if (location.equals(TaskLocation.unknown())) {
        log.info("No TaskLocation available for task [%s], this task may not have been assigned to a worker yet",id);
        throw new NoTaskLocationException(String.format("No TaskLocation available for task [%s]",id));
      }
      checkConnection(location.getHost(),location.getPort());
      try {
        URI serviceUri=new URI("http",null,location.getHost(),location.getPort(),String.format("%s/%s/%s",BASE_PATH,id,pathSuffix),query,null);
        request=new Request(method,serviceUri.toURL());
        request.addHeader(ChatHandlerResource.TASK_ID_HEADER,id);
        if (content.length > 0) {
          request.setContent(MediaType.APPLICATION_JSON,content);
        }
        response=httpClient.go(request,new FullResponseHandler(Charsets.UTF_8)).get();
      }
 catch (      Exception e) {
        Throwables.propagateIfInstanceOf(e.getCause(),IOException.class);
        Throwables.propagateIfInstanceOf(e.getCause(),ChannelException.class);
        throw Throwables.propagate(e);
      }
      int responseCode=response.getStatus().getCode();
      if (responseCode / 100 == 2) {
        return response;
      }
 else       if (responseCode == 400) {
        throw new IAE("Received 400 Bad Request with body: %s",response.getContent());
      }
 else {
        throw new IOException(String.format("Received status [%d]",responseCode));
      }
    }
 catch (    IOException|ChannelException e) {
      final Duration delay;
      if (response != null && response.getStatus().equals(HttpResponseStatus.NOT_FOUND)) {
        String headerId=response.getResponse().headers().get(ChatHandlerResource.TASK_ID_HEADER);
        if (headerId != null && !headerId.equals(id)) {
          log.warn("Expected worker to have taskId [%s] but has taskId [%s], will retry in [%d]s",id,headerId,TASK_MISMATCH_RETRY_DELAY_SECONDS);
          delay=Duration.standardSeconds(TASK_MISMATCH_RETRY_DELAY_SECONDS);
        }
 else {
          delay=retryPolicy.getAndIncrementRetryDelay();
        }
      }
 else {
        delay=retryPolicy.getAndIncrementRetryDelay();
      }
      if (!retry || delay == null) {
        Throwables.propagate(e);
      }
 else {
        try {
          final long sleepTime=delay.getMillis();
          log.debug("Bad response HTTP [%d] from %s; will try again in [%s] (body: [%s])",(response != null ? response.getStatus().getCode() : 0),(request != null ? request.getUrl() : "-"),new Duration(sleepTime).toString(),(response != null ? response.getContent() : "[empty]"));
          Thread.sleep(sleepTime);
        }
 catch (        InterruptedException e2) {
          Throwables.propagate(e2);
        }
      }
    }
  }
}

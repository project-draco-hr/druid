{
  final ByteOrder order=ByteOrder.nativeOrder();
  CompressedFloatsSupplierSerializer serializer=new CompressedFloatsSupplierSerializer(999,new GenericIndexedWriter<ResourceHolder<FloatBuffer>>(new IOPeonForTesting(),"test",CompressedFloatBufferObjectStrategy.getBufferForOrder(order)));
  serializer.open();
  final int numElements=10000;
  for (int i=0; i < numElements; ++i) {
    serializer.add((float)i);
  }
  final ByteArrayOutputStream baos=new ByteArrayOutputStream();
  serializer.closeAndConsolidate(new OutputSupplier<OutputStream>(){
    @Override public OutputStream getOutput() throws IOException {
      return baos;
    }
  }
);
  IndexedFloats floats=CompressedFloatsIndexedSupplier.fromByteBuffer(ByteBuffer.wrap(baos.toByteArray()),order).get();
  Assert.assertEquals(numElements,floats.size());
  for (int i=0; i < numElements; ++i) {
    Assert.assertEquals((float)i,floats.get(i),0.0f);
  }
  floats.close();
}

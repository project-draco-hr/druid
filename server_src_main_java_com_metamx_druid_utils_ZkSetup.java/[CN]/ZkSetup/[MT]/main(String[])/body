{
  if (args.length != 5) {
    System.out.println("Usage: <java invocation> zkConnect baseZkPath dbConnectionUrl dbUsername:password tableName");
    System.out.println("This utility is deprecated, see DruidSetup instead.");
    System.exit(1);
  }
  String path=args[1];
  final ZkClient zkClient=new ZkClient(new ZkConnection(args[0]),Integer.MAX_VALUE,new StringZkSerializer());
  zkClient.createPersistent(path,true);
  for (  String subPath : Initialization.SUB_PATHS) {
    final String thePath=String.format("%s/%s",path,subPath);
    if (zkClient.exists(thePath)) {
      System.out.printf("Path[%s] exists already%n",thePath);
    }
 else {
      System.out.printf("Creating ZK path[%s]%n",thePath);
      zkClient.createPersistent(thePath);
    }
  }
  final DbConnectorConfig config=new DbConnectorConfig(){
    private final String username;
    private final String password;
{
      String[] splitArgs=args[3].split(":");
      username=splitArgs[0];
      if (splitArgs.length > 1) {
        password=splitArgs[1];
      }
 else {
        password="";
      }
    }
    @Override public String getDatabaseConnectURI(){
      return args[2];
    }
    @Override public String getDatabaseUser(){
      return username;
    }
    @Override public String getDatabasePassword(){
      return password;
    }
    @Override public String getSegmentTable(){
      return args[4];
    }
  }
;
  DbConnector dbConnector=new DbConnector(config);
  DbConnector.createSegmentTable(dbConnector.getDBI(),config);
}

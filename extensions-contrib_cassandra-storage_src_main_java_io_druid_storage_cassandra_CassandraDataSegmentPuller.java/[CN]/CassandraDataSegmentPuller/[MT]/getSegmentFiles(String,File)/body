{
  log.info("Pulling index from C* at path[%s] to outDir[%s]",key,outDir);
  if (!outDir.exists()) {
    outDir.mkdirs();
  }
  if (!outDir.isDirectory()) {
    throw new ISE("outDir[%s] must be a directory.",outDir);
  }
  long startTime=System.currentTimeMillis();
  final File tmpFile=new File(outDir,"index.zip");
  log.info("Pulling to temporary local cache [%s]",tmpFile.getAbsolutePath());
  final com.metamx.common.FileUtils.FileCopyResult localResult;
  try {
    localResult=RetryUtils.retry(new Callable<com.metamx.common.FileUtils.FileCopyResult>(){
      @Override public com.metamx.common.FileUtils.FileCopyResult call() throws Exception {
        try (OutputStream os=new FileOutputStream(tmpFile)){
          final ObjectMetadata meta=ChunkedStorage.newReader(indexStorage,key,os).withBatchSize(BATCH_SIZE).withConcurrencyLevel(CONCURRENCY).call();
        }
         return new com.metamx.common.FileUtils.FileCopyResult(tmpFile);
      }
    }
,Predicates.<Throwable>alwaysTrue(),10);
  }
 catch (  Exception e) {
    throw new SegmentLoadingException(e,"Unable to copy key [%s] to file [%s]",key,tmpFile.getAbsolutePath());
  }
  try {
    final com.metamx.common.FileUtils.FileCopyResult result=CompressionUtils.unzip(tmpFile,outDir);
    log.info("Pull of file[%s] completed in %,d millis (%s bytes)",key,System.currentTimeMillis() - startTime,result.size());
    return result;
  }
 catch (  Exception e) {
    try {
      FileUtils.deleteDirectory(outDir);
    }
 catch (    IOException e1) {
      log.error(e1,"Error clearing segment directory [%s]",outDir.getAbsolutePath());
      e.addSuppressed(e1);
    }
    throw new SegmentLoadingException(e,e.getMessage());
  }
 finally {
    if (!tmpFile.delete()) {
      log.warn("Could not delete cache file at [%s]",tmpFile.getAbsolutePath());
    }
  }
}

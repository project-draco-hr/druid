{
  TimeseriesQuery query=Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(QueryRunnerTestHelper.marketDimension,"upfront").intervals(QueryRunnerTestHelper.fullOnInterval).aggregators(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.qualityUniques)).descending(descending).build();
  Assert.assertEquals(Druids.newSelectorDimFilterBuilder().dimension(QueryRunnerTestHelper.marketDimension).value("upfront").build(),query.getDimensionsFilter());
  final DateTime expectedLast=descending ? QueryRunnerTestHelper.earliest : QueryRunnerTestHelper.last;
  Iterable<Result<TimeseriesResultValue>> results=Sequences.toList(runner.run(query,CONTEXT),Lists.<Result<TimeseriesResultValue>>newArrayList());
  for (  Result<TimeseriesResultValue> result : results) {
    DateTime current=result.getTimestamp();
    Assert.assertFalse(String.format("Timestamp[%s] > expectedLast[%s]",current,expectedLast),descending ? current.isBefore(expectedLast) : current.isAfter(expectedLast));
    final TimeseriesResultValue value=result.getValue();
    Assert.assertEquals(result.toString(),QueryRunnerTestHelper.skippedDay.equals(result.getTimestamp()) ? 0L : 2L,value.getLongMetric("rows").longValue());
    Assert.assertEquals(result.toString(),QueryRunnerTestHelper.skippedDay.equals(result.getTimestamp()) ? 0.0d : 2.0d,value.getDoubleMetric("uniques"),0.01);
  }
}

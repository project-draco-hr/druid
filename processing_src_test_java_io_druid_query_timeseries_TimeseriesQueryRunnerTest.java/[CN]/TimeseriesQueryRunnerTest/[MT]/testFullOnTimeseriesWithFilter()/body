{
  QueryGranularity gran=QueryGranularity.DAY;
  TimeseriesQuery query=Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(QueryRunnerTestHelper.providerDimension,"upfront").intervals(QueryRunnerTestHelper.fullOnInterval).aggregators(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.qualityUniques)).build();
  Assert.assertEquals(Druids.newSelectorDimFilterBuilder().dimension(QueryRunnerTestHelper.providerDimension).value("upfront").build(),query.getDimensionsFilter());
  DateTime expectedEarliest=new DateTime("2011-01-12");
  DateTime expectedLast=new DateTime("2011-04-15");
  Iterable<Result<TimeseriesResultValue>> results=Sequences.toList(runner.run(query),Lists.<Result<TimeseriesResultValue>>newArrayList());
  for (  Result<TimeseriesResultValue> result : results) {
    Assert.assertEquals(result.toString(),expectedEarliest,result.getTimestamp());
    Assert.assertFalse(String.format("Timestamp[%s] > expectedLast[%s]",result.getTimestamp(),expectedLast),result.getTimestamp().isAfter(expectedLast));
    final TimeseriesResultValue value=result.getValue();
    Assert.assertEquals(result.toString(),QueryRunnerTestHelper.skippedDay.equals(result.getTimestamp()) ? 0L : 2L,value.getLongMetric("rows").longValue());
    Assert.assertEquals(result.toString(),QueryRunnerTestHelper.skippedDay.equals(result.getTimestamp()) ? 0.0d : 2.0d,value.getDoubleMetric("uniques"),0.01);
    expectedEarliest=gran.toDateTime(gran.next(expectedEarliest.getMillis()));
  }
}

{
  TimeseriesQuery query1=Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).filters(QueryRunnerTestHelper.providerDimension,"spot","upfront","total_market").granularity(new PeriodGranularity(new Period("P7D"),null,DateTimeZone.forID("America/Los_Angeles"))).intervals(Arrays.asList(new Interval("2011-01-12T00:00:00.000-08:00/2011-01-20T00:00:00.000-08:00"))).aggregators(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).build();
  List<Result<TimeseriesResultValue>> expectedResults1=Arrays.asList(new Result<TimeseriesResultValue>(new DateTime("2011-01-06T00:00:00.000-08:00",DateTimeZone.forID("America/Los_Angeles")),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",13L,"idx",6071L))),new Result<TimeseriesResultValue>(new DateTime("2011-01-13T00:00:00.000-08:00",DateTimeZone.forID("America/Los_Angeles")),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",91L,"idx",33382L))));
  HashMap<String,List> metadata=new HashMap<String,List>();
  Iterable<Result<TimeseriesResultValue>> results1=Sequences.toList(runner.run(query1,metadata),Lists.<Result<TimeseriesResultValue>>newArrayList());
  TestHelper.assertExpectedResults(expectedResults1,results1);
}

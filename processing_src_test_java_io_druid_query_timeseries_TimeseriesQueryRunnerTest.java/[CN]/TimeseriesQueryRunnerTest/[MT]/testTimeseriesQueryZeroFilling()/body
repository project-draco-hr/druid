{
  TimeseriesQuery query1=Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).filters(QueryRunnerTestHelper.marketDimension,"spot","upfront","total_market").granularity(QueryGranularity.HOUR).intervals(Arrays.asList(new Interval("2011-04-14T00:00:00.000Z/2011-05-01T00:00:00.000Z"))).aggregators(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).descending(descending).build();
  List<Result<TimeseriesResultValue>> lotsOfZeroes=Lists.newArrayList();
  for (  final Long millis : QueryGranularity.HOUR.iterable(new DateTime("2011-04-14T01").getMillis(),new DateTime("2011-04-15").getMillis())) {
    lotsOfZeroes.add(new Result<>(new DateTime(millis),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",0L,"idx",0L))));
  }
  List<Result<TimeseriesResultValue>> expectedResults1=Lists.newArrayList(Iterables.concat(Arrays.asList(new Result<>(new DateTime("2011-04-14T00"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",13L,"idx",4907L)))),lotsOfZeroes,Arrays.asList(new Result<>(new DateTime("2011-04-15T00"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",13L,"idx",4717L))))));
  Iterable<Result<TimeseriesResultValue>> results1=Sequences.toList(runner.run(query1,CONTEXT),Lists.<Result<TimeseriesResultValue>>newArrayList());
  assertExpectedResults(expectedResults1,results1);
}

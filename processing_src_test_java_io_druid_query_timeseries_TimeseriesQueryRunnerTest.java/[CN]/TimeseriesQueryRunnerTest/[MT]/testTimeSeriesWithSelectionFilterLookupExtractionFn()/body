{
  Map<String,String> extractionMap=new HashMap<>();
  extractionMap.put("spot","upfront");
  MapLookupExtractor mapLookupExtractor=new MapLookupExtractor(extractionMap,false);
  LookupExtractionFn lookupExtractionFn=new LookupExtractionFn(mapLookupExtractor,true,null,true,true);
  TimeseriesQuery query=Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.dayGran).filters(new SelectorDimFilter(QueryRunnerTestHelper.marketDimension,"upfront",lookupExtractionFn)).intervals(QueryRunnerTestHelper.firstToThird).aggregators(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexLongSum,QueryRunnerTestHelper.qualityUniques)).postAggregators(Arrays.<PostAggregator>asList(QueryRunnerTestHelper.addRowsIndexConstant)).build();
  List<Result<TimeseriesResultValue>> expectedResults=Arrays.asList(new Result<>(new DateTime("2011-04-01"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",11L,"index",3783L,"addRowsIndexConstant",3795.0,"uniques",QueryRunnerTestHelper.UNIQUES_9))),new Result<>(new DateTime("2011-04-02"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",11L,"index",3313L,"addRowsIndexConstant",3325.0,"uniques",QueryRunnerTestHelper.UNIQUES_9))));
  Iterable<Result<TimeseriesResultValue>> results=Sequences.toList(runner.run(query,CONTEXT),Lists.<Result<TimeseriesResultValue>>newArrayList());
  TestHelper.assertExpectedResults(expectedResults,results);
  TimeseriesQueryQueryToolChest toolChest=new TimeseriesQueryQueryToolChest(QueryRunnerTestHelper.NoopIntervalChunkingQueryRunnerDecorator());
  QueryRunner<Result<TimeseriesResultValue>> optimizedRunner=toolChest.postMergeQueryDecoration(toolChest.mergeResults(toolChest.preMergeQueryDecoration(runner)));
  Iterable<Result<TimeseriesResultValue>> results2=Sequences.toList(optimizedRunner.run(query,CONTEXT),Lists.<Result<TimeseriesResultValue>>newArrayList());
  TestHelper.assertExpectedResults(expectedResults,results2);
}

{
  TimeseriesQuery query=Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).filters(QueryRunnerTestHelper.placementishDimension,"a").intervals(QueryRunnerTestHelper.firstToThird).aggregators(ImmutableList.of(QueryRunnerTestHelper.indexDoubleSum,QueryRunnerTestHelper.jsIndexSumIfPlacementishA,QueryRunnerTestHelper.jsPlacementishCount)).build();
  Iterable<Result<TimeseriesResultValue>> expectedResults=ImmutableList.of(new Result<>(new DateTime(QueryRunnerTestHelper.firstToThird.getIntervals().get(0).getStart()),new TimeseriesResultValue(ImmutableMap.<String,Object>of("index",283.31103515625d,"nindex",283.31103515625d,"pishcount",4d))));
  HashMap<String,Object> context=new HashMap<String,Object>();
  Iterable<Result<TimeseriesResultValue>> actualResults=Sequences.toList(runner.run(query,context),Lists.<Result<TimeseriesResultValue>>newArrayList());
  TestHelper.assertExpectedResults(expectedResults,actualResults);
}

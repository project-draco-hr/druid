{
  try (final AppenderatorTester tester=new AppenderatorTester(2)){
    final Appenderator appenderator=tester.getAppenderator();
    boolean thrown;
    final ConcurrentMap<String,String> commitMetadata=new ConcurrentHashMap<>();
    final Supplier<Committer> committerSupplier=committerSupplierFromConcurrentMap(commitMetadata);
    Assert.assertEquals(null,appenderator.startJob());
    Assert.assertEquals(AppenderatorTester.DATASOURCE,appenderator.getDataSource());
    commitMetadata.put("x","1");
    Assert.assertEquals(1,appenderator.add(IDENTIFIERS.get(0),IR("2000","foo",1),committerSupplier));
    commitMetadata.put("x","2");
    Assert.assertEquals(2,appenderator.add(IDENTIFIERS.get(0),IR("2000","bar",2),committerSupplier));
    commitMetadata.put("x","3");
    Assert.assertEquals(1,appenderator.add(IDENTIFIERS.get(1),IR("2000","qux",4),committerSupplier));
    Assert.assertEquals(IDENTIFIERS.subList(0,2),sorted(appenderator.getSegments()));
    Assert.assertEquals(2,appenderator.getRowCount(IDENTIFIERS.get(0)));
    Assert.assertEquals(1,appenderator.getRowCount(IDENTIFIERS.get(1)));
    thrown=false;
    try {
      appenderator.getRowCount(IDENTIFIERS.get(2));
    }
 catch (    IllegalStateException e) {
      thrown=true;
    }
    Assert.assertTrue(thrown);
    final SegmentsAndMetadata segmentsAndMetadata=appenderator.push(appenderator.getSegments(),committerSupplier.get()).get();
    Assert.assertEquals(ImmutableMap.of("x","3"),(Map<String,String>)segmentsAndMetadata.getCommitMetadata());
    Assert.assertEquals(IDENTIFIERS.subList(0,2),sorted(Lists.transform(segmentsAndMetadata.getSegments(),new Function<DataSegment,SegmentIdentifier>(){
      @Override public SegmentIdentifier apply(      DataSegment input){
        return SegmentIdentifier.fromDataSegment(input);
      }
    }
)));
    Assert.assertEquals(sorted(tester.getPushedSegments()),sorted(segmentsAndMetadata.getSegments()));
    appenderator.clear();
    Assert.assertTrue(appenderator.getSegments().isEmpty());
  }
 }

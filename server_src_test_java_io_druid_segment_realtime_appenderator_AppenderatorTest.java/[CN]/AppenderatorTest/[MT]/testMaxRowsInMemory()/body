{
  try (final AppenderatorTester tester=new AppenderatorTester(3)){
    final Appenderator appenderator=tester.getAppenderator();
    final AtomicInteger eventCount=new AtomicInteger(0);
    final Supplier<Committer> committerSupplier=new Supplier<Committer>(){
      @Override public Committer get(){
        final Object metadata=ImmutableMap.of("eventCount",eventCount.get());
        return new Committer(){
          @Override public Object getMetadata(){
            return metadata;
          }
          @Override public void run(){
          }
        }
;
      }
    }
;
    Assert.assertEquals(0,((AppenderatorImpl)appenderator).getRowsInMemory());
    appenderator.startJob();
    Assert.assertEquals(0,((AppenderatorImpl)appenderator).getRowsInMemory());
    appenderator.add(IDENTIFIERS.get(0),IR("2000","foo",1),committerSupplier);
    Assert.assertEquals(1,((AppenderatorImpl)appenderator).getRowsInMemory());
    appenderator.add(IDENTIFIERS.get(1),IR("2000","bar",1),committerSupplier);
    Assert.assertEquals(2,((AppenderatorImpl)appenderator).getRowsInMemory());
    appenderator.add(IDENTIFIERS.get(1),IR("2000","bar",1),committerSupplier);
    Assert.assertEquals(2,((AppenderatorImpl)appenderator).getRowsInMemory());
    appenderator.add(IDENTIFIERS.get(0),IR("2000","baz",1),committerSupplier);
    Assert.assertEquals(0,((AppenderatorImpl)appenderator).getRowsInMemory());
    appenderator.add(IDENTIFIERS.get(1),IR("2000","qux",1),committerSupplier);
    Assert.assertEquals(1,((AppenderatorImpl)appenderator).getRowsInMemory());
    appenderator.add(IDENTIFIERS.get(0),IR("2000","bob",1),committerSupplier);
    Assert.assertEquals(2,((AppenderatorImpl)appenderator).getRowsInMemory());
    appenderator.close();
    Assert.assertEquals(0,((AppenderatorImpl)appenderator).getRowsInMemory());
  }
 }

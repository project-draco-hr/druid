{
  List<Row> expectedResults_both_partitions=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-26","alias","business","rows",2L,"idx",260L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-26","alias","health","rows",2L,"idx",236L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-26","alias","mezzanine","rows",4L,"idx",4556L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-26","alias","news","rows",2L,"idx",284L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-26","alias","technology","rows",2L,"idx",202L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-27","alias","automotive","rows",2L,"idx",288L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-27","alias","entertainment","rows",2L,"idx",326L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","automotive","rows",2L,"idx",312L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","business","rows",2L,"idx",248L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","entertainment","rows",2L,"idx",326L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","health","rows",2L,"idx",262L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","mezzanine","rows",6L,"idx",5126L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","news","rows",2L,"idx",254L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","premium","rows",6L,"idx",5276L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","technology","rows",2L,"idx",206L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","travel","rows",2L,"idx",260L));
  List<Row> expectedResults_single_partition_26_28=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-26","alias","business","rows",1L,"idx",130L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-26","alias","health","rows",1L,"idx",118L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-26","alias","mezzanine","rows",2L,"idx",2278L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-26","alias","news","rows",1L,"idx",142L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-26","alias","technology","rows",1L,"idx",101L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-27","alias","automotive","rows",1L,"idx",144L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-27","alias","entertainment","rows",1L,"idx",163L));
  List<Row> expectedResults_single_partition_28_29=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","automotive","rows",1L,"idx",156L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","business","rows",1L,"idx",124L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","entertainment","rows",1L,"idx",163L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","health","rows",1L,"idx",131L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","mezzanine","rows",3L,"idx",2563L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","news","rows",1L,"idx",127L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","premium","rows",3L,"idx",2638L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","technology","rows",1L,"idx",103L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-03-28","alias","travel","rows",1L,"idx",130L));
  chiefStartedLatch.await();
  final Interval interval_26_28=new Interval("2011-03-26T00:00:00.000Z/2011-03-28T00:00:00.000Z");
  final Interval interval_28_29=new Interval("2011-03-28T00:00:00.000Z/2011-03-29T00:00:00.000Z");
  final SegmentDescriptor descriptor_26_28_0=new SegmentDescriptor(interval_26_28,"ver0",0);
  final SegmentDescriptor descriptor_28_29_0=new SegmentDescriptor(interval_28_29,"ver1",0);
  final SegmentDescriptor descriptor_26_28_1=new SegmentDescriptor(interval_26_28,"ver0",1);
  final SegmentDescriptor descriptor_28_29_1=new SegmentDescriptor(interval_28_29,"ver1",1);
  GroupByQuery query=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(new MultipleSpecificSegmentSpec(ImmutableList.<SegmentDescriptor>of(descriptor_26_28_0,descriptor_28_29_0,descriptor_26_28_1,descriptor_28_29_1))).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("quality","alias"))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).setGranularity(QueryRunnerTestHelper.dayGran).build();
  final Map<Interval,QueryRunner> runnerMap=ImmutableMap.<Interval,QueryRunner>of(interval_26_28,QueryRunnerTestHelper.makeQueryRunner(factory,"druid.sample.tsv.top",null),interval_28_29,QueryRunnerTestHelper.makeQueryRunner(factory,"druid.sample.tsv.bottom",null));
  plumber.setRunners(runnerMap);
  plumber2.setRunners(runnerMap);
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,query.getQuerySegmentSpec().lookup(query,realtimeManager3),query);
  TestHelper.assertExpectedObjects(expectedResults_both_partitions,results,"");
  results=GroupByQueryRunnerTestHelper.runQuery(factory,realtimeManager3.getQueryRunnerForSegments(query,ImmutableList.<SegmentDescriptor>of(descriptor_26_28_0)),query);
  TestHelper.assertExpectedObjects(expectedResults_single_partition_26_28,results,"");
  results=GroupByQueryRunnerTestHelper.runQuery(factory,realtimeManager3.getQueryRunnerForSegments(query,ImmutableList.<SegmentDescriptor>of(descriptor_28_29_0)),query);
  TestHelper.assertExpectedObjects(expectedResults_single_partition_28_29,results,"");
  results=GroupByQueryRunnerTestHelper.runQuery(factory,realtimeManager3.getQueryRunnerForSegments(query,ImmutableList.<SegmentDescriptor>of(descriptor_26_28_1)),query);
  TestHelper.assertExpectedObjects(expectedResults_single_partition_26_28,results,"");
  results=GroupByQueryRunnerTestHelper.runQuery(factory,realtimeManager3.getQueryRunnerForSegments(query,ImmutableList.<SegmentDescriptor>of(descriptor_28_29_1)),query);
  TestHelper.assertExpectedObjects(expectedResults_single_partition_28_29,results,"");
}

{
  final List<TestInputRowHolder> rows=Arrays.asList(makeRow(new DateTime("9000-01-01").getMillis()),makeRow(new ParseException("parse error")),null,makeRow(new DateTime().getMillis()));
  ObjectMapper jsonMapper=new DefaultObjectMapper();
  schema=new DataSchema("test",null,new AggregatorFactory[]{new CountAggregatorFactory("rows")},new UniformGranularitySpec(Granularity.HOUR,QueryGranularity.NONE,null),jsonMapper);
  schema2=new DataSchema("testV2",null,new AggregatorFactory[]{new CountAggregatorFactory("rows")},new UniformGranularitySpec(Granularity.HOUR,QueryGranularity.NONE,null),jsonMapper);
  RealtimeIOConfig ioConfig=new RealtimeIOConfig(new FirehoseFactory(){
    @Override public Firehose connect(    InputRowParser parser) throws IOException {
      return new TestFirehose(rows.iterator());
    }
  }
,new PlumberSchool(){
    @Override public Plumber findPlumber(    DataSchema schema,    RealtimeTuningConfig config,    FireDepartmentMetrics metrics){
      return plumber;
    }
  }
,null);
  RealtimeIOConfig ioConfig2=new RealtimeIOConfig(null,new PlumberSchool(){
    @Override public Plumber findPlumber(    DataSchema schema,    RealtimeTuningConfig config,    FireDepartmentMetrics metrics){
      return plumber2;
    }
  }
,new FirehoseFactoryV2(){
    @Override public FirehoseV2 connect(    InputRowParser parser,    Object arg1) throws IOException, ParseException {
      return new TestFirehoseV2(rows.iterator());
    }
  }
);
  RealtimeTuningConfig tuningConfig=new RealtimeTuningConfig(1,new Period("P1Y"),null,null,null,null,null,null,null);
  plumber=new TestPlumber(new Sink(new Interval("0/P5000Y"),schema,tuningConfig,new DateTime().toString()));
  realtimeManager=new RealtimeManager(Arrays.<FireDepartment>asList(new FireDepartment(schema,ioConfig,tuningConfig)),null);
  plumber2=new TestPlumber(new Sink(new Interval("0/P5000Y"),schema2,tuningConfig,new DateTime().toString()));
  realtimeManager2=new RealtimeManager(Arrays.<FireDepartment>asList(new FireDepartment(schema2,ioConfig2,tuningConfig)),null);
}

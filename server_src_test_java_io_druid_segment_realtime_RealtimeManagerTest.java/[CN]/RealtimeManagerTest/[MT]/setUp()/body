{
  final List<InputRow> rows=Arrays.asList(makeRow(new DateTime("9000-01-01").getMillis()),makeRow(new DateTime().getMillis()));
  schema=new DataSchema("test",null,new AggregatorFactory[]{new CountAggregatorFactory("rows")},new UniformGranularitySpec(Granularity.HOUR,QueryGranularity.NONE,null,Granularity.HOUR));
  RealtimeIOConfig ioConfig=new RealtimeIOConfig(new FirehoseFactory(){
    @Override public Firehose connect(    InputRowParser parser) throws IOException {
      return new TestFirehose(rows.iterator());
    }
    @Override public ByteBufferInputRowParser getParser(){
      throw new UnsupportedOperationException();
    }
  }
,new PlumberSchool(){
    @Override public Plumber findPlumber(    DataSchema schema,    RealtimeDriverConfig config,    FireDepartmentMetrics metrics){
      return plumber;
    }
    @Override public Granularity getSegmentGranularity(){
      throw new UnsupportedOperationException();
    }
  }
);
  RealtimeDriverConfig driverConfig=new RealtimeDriverConfig(1,new Period("P1Y"),null,null,null,null,null,null);
  plumber=new TestPlumber(new Sink(new Interval("0/P5000Y"),schema,driverConfig,new DateTime().toString()));
  realtimeManager=new RealtimeManager(Arrays.<FireDepartment>asList(new FireDepartment(schema,ioConfig,driverConfig,null,null,null,null)),null);
}

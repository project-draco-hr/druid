{
  final long start=System.currentTimeMillis();
  final AsyncContext asyncContext=req.startAsync(req,res);
  asyncContext.start(new Runnable(){
    @Override public void run(){
      final HttpServletRequest request=(HttpServletRequest)asyncContext.getRequest();
      final boolean isSmile=QueryResource.APPLICATION_SMILE.equals(request.getContentType());
      final ObjectMapper objectMapper=isSmile ? smileMapper : jsonMapper;
      Query inputQuery=null;
      try {
        inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);
        if (inputQuery.getId() == null) {
          inputQuery=inputQuery.withId(UUID.randomUUID().toString());
        }
        final Query query=inputQuery;
        if (log.isDebugEnabled()) {
          log.debug("Got query [%s]",inputQuery);
        }
        final HttpResponseHandler<OutputStream,OutputStream> responseHandler=new PassthroughHttpResponseHandler(asyncContext,objectMapper){
          @Override public ClientResponse<OutputStream> done(          ClientResponse<OutputStream> clientResponse){
            final long requestTime=System.currentTimeMillis() - start;
            log.debug("Request time: %d",requestTime);
            emitter.emit(new ServiceMetricEvent.Builder().setUser2(DataSourceUtil.getMetricName(query.getDataSource())).setUser3(String.valueOf(query.getContextPriority(0))).setUser4(query.getType()).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(request.getRemoteAddr()).setUser8(query.getId()).setUser9(query.getDuration().toPeriod().toStandardMinutes().toString()).build("request/time",requestTime));
            try {
              requestLogger.log(new RequestLogLine(new DateTime(),request.getRemoteAddr(),query,new QueryStats(ImmutableMap.<String,Object>of("request/time",requestTime,"success",true))));
            }
 catch (            Exception e) {
              throw Throwables.propagate(e);
            }
            return super.done(clientResponse);
          }
        }
;
        routingDruidClient.postQuery(makeUrl(hostFinder.getHost(inputQuery),request),inputQuery,responseHandler);
      }
 catch (      Exception e) {
        handleException(objectMapper,asyncContext,e);
        try {
          requestLogger.log(new RequestLogLine(new DateTime(),request.getRemoteAddr(),inputQuery,new QueryStats(ImmutableMap.<String,Object>of("success",false,"exception",e.toString()))));
        }
 catch (        Exception logError) {
          log.error(logError,"Unable to log query [%s]!",inputQuery);
        }
        log.makeAlert(e,"Exception handling request").addData("query",inputQuery).addData("peer",request.getRemoteAddr()).emit();
      }
    }
  }
);
}

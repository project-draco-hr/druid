{
  final long start=System.currentTimeMillis();
  Query query=null;
  String queryId;
  final boolean isSmile="application/smile".equals(req.getContentType());
  ObjectMapper objectMapper=isSmile ? smileMapper : jsonMapper;
  OutputStream out=null;
  try {
    final AsyncContext ctx=req.startAsync(req,resp);
    if (req.getAttribute(DISPATCHED) != null) {
      return;
    }
    req.setAttribute(DISPATCHED,true);
    resp.setStatus(200);
    resp.setContentType("application/x-javascript");
    query=objectMapper.readValue(req.getInputStream(),Query.class);
    queryId=query.getId();
    if (queryId == null) {
      queryId=idProvider.next(query);
      query=query.withId(queryId);
    }
    requestLogger.log(new RequestLogLine(new DateTime(),req.getRemoteAddr(),query));
    out=resp.getOutputStream();
    final OutputStream outputStream=out;
    final String host=hostFinder.getHost(query);
    final Query theQuery=query;
    final String theQueryId=queryId;
    final HttpResponseHandler<OutputStream,OutputStream> responseHandler=new HttpResponseHandler<OutputStream,OutputStream>(){
      @Override public ClientResponse<OutputStream> handleResponse(      HttpResponse response){
        byte[] bytes=getContentBytes(response.getContent());
        if (bytes.length > 0) {
          try {
            outputStream.write(bytes);
          }
 catch (          Exception e) {
            throw Throwables.propagate(e);
          }
        }
        return ClientResponse.finished(outputStream);
      }
      @Override public ClientResponse<OutputStream> handleChunk(      ClientResponse<OutputStream> clientResponse,      HttpChunk chunk){
        byte[] bytes=getContentBytes(chunk.getContent());
        if (bytes.length > 0) {
          try {
            clientResponse.getObj().write(bytes);
          }
 catch (          Exception e) {
            throw Throwables.propagate(e);
          }
        }
        return clientResponse;
      }
      @Override public ClientResponse<OutputStream> done(      ClientResponse<OutputStream> clientResponse){
        final long requestTime=System.currentTimeMillis() - start;
        log.info("Request time: %d",requestTime);
        emitter.emit(new ServiceMetricEvent.Builder().setUser2(theQuery.getDataSource().getName()).setUser4(theQuery.getType()).setUser5(theQuery.getIntervals().get(0).toString()).setUser6(String.valueOf(theQuery.hasFilters())).setUser7(req.getRemoteAddr()).setUser8(theQueryId).setUser9(theQuery.getDuration().toPeriod().toStandardMinutes().toString()).build("request/time",requestTime));
        final OutputStream obj=clientResponse.getObj();
        try {
          resp.flushBuffer();
          outputStream.close();
        }
 catch (        Exception e) {
          throw Throwables.propagate(e);
        }
 finally {
          ctx.dispatch();
        }
        return ClientResponse.finished(obj);
      }
      private byte[] getContentBytes(      ChannelBuffer content){
        byte[] contentBytes=new byte[content.readableBytes()];
        content.readBytes(contentBytes);
        return contentBytes;
      }
    }
;
    ctx.start(new Runnable(){
      @Override public void run(){
        routingDruidClient.run(host,theQuery,responseHandler);
      }
    }
);
  }
 catch (  Exception e) {
    if (!resp.isCommitted()) {
      resp.setStatus(500);
      resp.resetBuffer();
      if (out == null) {
        out=resp.getOutputStream();
      }
      out.write((e.getMessage() == null) ? "Exception null".getBytes(UTF8) : e.getMessage().getBytes(UTF8));
      out.write("\n".getBytes(UTF8));
    }
    resp.flushBuffer();
    log.makeAlert(e,"Exception handling request").addData("query",query).addData("peer",req.getRemoteAddr()).emit();
  }
}

{
  final boolean isSmile=QueryResource.APPLICATION_SMILE.equals(request.getContentType());
  final ObjectMapper objectMapper=isSmile ? smileMapper : jsonMapper;
  String host=hostFinder.getDefaultHost();
  Query inputQuery=null;
  boolean hasContent=request.getContentLength() > 0 || request.getContentType() != null;
  boolean isQuery=request.getMethod().equals(HttpMethod.POST.asString());
  long startTime=System.currentTimeMillis();
  if (isQuery) {
    try {
      inputQuery=objectMapper.readValue(request.getInputStream(),Query.class);
      if (inputQuery != null) {
        host=hostFinder.getHost(inputQuery);
      }
    }
 catch (    IOException e) {
      log.warn(e,"Exception parsing query");
      final String errorMessage=e.getMessage() == null ? "no error message" : e.getMessage();
      requestLogger.log(new RequestLogLine(new DateTime(),request.getRemoteAddr(),null,new QueryStats(ImmutableMap.<String,Object>of("success",false,"exception",errorMessage))));
      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
      response.setContentType(QueryResource.APPLICATION_JSON);
      objectMapper.writeValue(response.getOutputStream(),ImmutableMap.of("error",errorMessage));
      return;
    }
catch (    Exception e) {
      handleException(response,objectMapper,e);
      return;
    }
  }
  URI rewrittenURI=rewriteURI(host,request);
  if (rewrittenURI == null) {
    onRewriteFailed(request,response);
    return;
  }
  final Request proxyRequest=getHttpClient().newRequest(rewrittenURI).method(request.getMethod()).version(HttpVersion.fromString(request.getProtocol()));
  for (Enumeration<String> headerNames=request.getHeaderNames(); headerNames.hasMoreElements(); ) {
    String headerName=headerNames.nextElement();
    if (HttpHeader.TRANSFER_ENCODING.is(headerName)) {
      hasContent=true;
    }
    for (Enumeration<String> headerValues=request.getHeaders(headerName); headerValues.hasMoreElements(); ) {
      String headerValue=headerValues.nextElement();
      if (headerValue != null) {
        proxyRequest.header(headerName,headerValue);
      }
    }
  }
  addViaHeader(proxyRequest);
  addXForwardedHeaders(proxyRequest,request);
  final AsyncContext asyncContext=request.startAsync();
  asyncContext.setTimeout(0);
  proxyRequest.timeout(getTimeout(),TimeUnit.MILLISECONDS);
  if (hasContent) {
    if (inputQuery != null) {
      proxyRequest.content(new BytesContentProvider(jsonMapper.writeValueAsBytes(inputQuery)));
    }
 else {
      proxyRequest.content(proxyRequestContent(proxyRequest,request));
    }
  }
  customizeProxyRequest(proxyRequest,request);
  if (isQuery) {
    proxyRequest.send(newMetricsEmittingProxyResponseListener(request,response,inputQuery,startTime));
  }
 else {
    proxyRequest.send(newProxyResponseListener(request,response));
  }
}

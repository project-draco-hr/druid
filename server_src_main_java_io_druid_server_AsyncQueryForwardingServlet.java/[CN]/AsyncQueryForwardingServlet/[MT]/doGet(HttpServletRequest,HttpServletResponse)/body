{
  OutputStream out=null;
  AsyncContext ctx=null;
  try {
    ctx=req.startAsync(req,resp);
    final AsyncContext asyncContext=ctx;
    if (req.getAttribute(DISPATCHED) != null) {
      return;
    }
    out=resp.getOutputStream();
    final OutputStream outputStream=out;
    final String host=hostFinder.getDefaultHost();
    final HttpResponseHandler<OutputStream,OutputStream> responseHandler=new HttpResponseHandler<OutputStream,OutputStream>(){
      @Override public ClientResponse<OutputStream> handleResponse(      HttpResponse response){
        resp.setStatus(response.getStatus().getCode());
        resp.setContentType("application/json");
        byte[] bytes=getContentBytes(response.getContent());
        if (bytes.length > 0) {
          try {
            outputStream.write(bytes);
          }
 catch (          Exception e) {
            asyncContext.complete();
            throw Throwables.propagate(e);
          }
        }
        return ClientResponse.finished(outputStream);
      }
      @Override public ClientResponse<OutputStream> handleChunk(      ClientResponse<OutputStream> clientResponse,      HttpChunk chunk){
        byte[] bytes=getContentBytes(chunk.getContent());
        if (bytes.length > 0) {
          try {
            clientResponse.getObj().write(bytes);
          }
 catch (          Exception e) {
            asyncContext.complete();
            throw Throwables.propagate(e);
          }
        }
        return clientResponse;
      }
      @Override public ClientResponse<OutputStream> done(      ClientResponse<OutputStream> clientResponse){
        final OutputStream obj=clientResponse.getObj();
        try {
          resp.flushBuffer();
          outputStream.close();
        }
 catch (        Exception e) {
          throw Throwables.propagate(e);
        }
 finally {
          asyncContext.complete();
        }
        return ClientResponse.finished(obj);
      }
    }
;
    asyncContext.start(new Runnable(){
      @Override public void run(){
        routingDruidClient.get(makeUrl(host,req),responseHandler);
      }
    }
);
    asyncContext.dispatch();
    req.setAttribute(DISPATCHED,true);
  }
 catch (  Exception e) {
    if (!resp.isCommitted()) {
      resp.setStatus(500);
      resp.resetBuffer();
      if (out == null) {
        out=resp.getOutputStream();
      }
      if (ctx != null) {
        ctx.complete();
      }
      out.write((e.getMessage() == null) ? "Exception null".getBytes(UTF8) : e.getMessage().getBytes(UTF8));
      out.write("\n".getBytes(UTF8));
    }
    resp.flushBuffer();
  }
}

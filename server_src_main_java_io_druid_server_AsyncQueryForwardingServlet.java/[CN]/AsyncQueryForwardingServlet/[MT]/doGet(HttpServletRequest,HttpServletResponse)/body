{
  OutputStream out=null;
  AsyncContext ctx=null;
  try {
    ctx=req.startAsync(req,resp);
    final AsyncContext asyncContext=ctx;
    if (req.getAttribute(DISPATCHED) != null) {
      return;
    }
    out=resp.getOutputStream();
    final OutputStream outputStream=out;
    final String host=hostFinder.getDefaultHost();
    final HttpResponseHandler<OutputStream,OutputStream> responseHandler=new HttpResponseHandler<OutputStream,OutputStream>(){
      @Override public ClientResponse<OutputStream> handleResponse(      HttpResponse response){
        resp.setStatus(response.getStatus().getCode());
        resp.setContentType("application/json");
        try {
          ChannelBuffer buf=response.getContent();
          buf.readBytes(outputStream,buf.readableBytes());
        }
 catch (        Exception e) {
          asyncContext.complete();
          throw Throwables.propagate(e);
        }
        return ClientResponse.finished(outputStream);
      }
      @Override public ClientResponse<OutputStream> handleChunk(      ClientResponse<OutputStream> clientResponse,      HttpChunk chunk){
        try {
          ChannelBuffer buf=chunk.getContent();
          buf.readBytes(outputStream,buf.readableBytes());
        }
 catch (        Exception e) {
          asyncContext.complete();
          throw Throwables.propagate(e);
        }
        return clientResponse;
      }
      @Override public ClientResponse<OutputStream> done(      ClientResponse<OutputStream> clientResponse){
        final OutputStream obj=clientResponse.getObj();
        try {
          resp.flushBuffer();
          outputStream.close();
        }
 catch (        Exception e) {
          throw Throwables.propagate(e);
        }
 finally {
          asyncContext.complete();
        }
        return ClientResponse.finished(obj);
      }
      @Override public void exceptionCaught(      ClientResponse<OutputStream> clientResponse,      Throwable e){
        handleException(resp,asyncContext,e);
      }
    }
;
    asyncContext.start(new Runnable(){
      @Override public void run(){
        routingDruidClient.get(makeUrl(host,req),responseHandler);
      }
    }
);
    asyncContext.dispatch();
    req.setAttribute(DISPATCHED,true);
  }
 catch (  Exception e) {
    handleException(resp,ctx,e);
  }
}

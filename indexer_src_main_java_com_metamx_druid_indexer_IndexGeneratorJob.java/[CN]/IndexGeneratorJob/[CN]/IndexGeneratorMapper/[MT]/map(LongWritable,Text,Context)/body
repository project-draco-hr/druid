{
  try {
    final Map<String,Object> values=parser.parse(value.toString());
    final String tsStr=(String)values.get(config.getTimestampColumnName());
    final DateTime timestamp;
    try {
      timestamp=timestampConverter.apply(tsStr);
    }
 catch (    IllegalArgumentException e) {
      if (config.isIgnoreInvalidRows()) {
        context.getCounter(HadoopDruidIndexerConfig.IndexJobCounters.INVALID_ROW_COUNTER).increment(1);
        return;
      }
 else {
        throw e;
      }
    }
    Optional<Bucket> bucket=config.getBucket(Maps.transformEntries(values,new Maps.EntryTransformer<String,Object,String>(){
      @Override public String transformEntry(      @Nullable String key,      @Nullable Object value){
        if (key.equalsIgnoreCase(config.getTimestampColumnName())) {
          return timestamp.toString();
        }
        return value.toString();
      }
    }
));
    if (bucket.isPresent()) {
      context.write(new SortableBytes(bucket.get().toGroupKey(),Longs.toByteArray(timestamp.getMillis())).toBytesWritable(),value);
    }
  }
 catch (  RuntimeException e) {
    throw new RE(e,"Failure on row[%s]",value);
  }
}

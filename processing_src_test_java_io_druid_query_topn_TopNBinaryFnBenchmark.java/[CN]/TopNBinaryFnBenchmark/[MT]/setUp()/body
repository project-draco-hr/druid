{
  final ConstantPostAggregator constant=new ConstantPostAggregator("const",1L,null);
  final FieldAccessPostAggregator rowsPostAgg=new FieldAccessPostAggregator("rows","rows");
  final FieldAccessPostAggregator indexPostAgg=new FieldAccessPostAggregator("index","index");
  final List<AggregatorFactory> aggregatorFactories=new ArrayList<>();
  aggregatorFactories.add(new CountAggregatorFactory("rows"));
  aggregatorFactories.add(new LongSumAggregatorFactory("index","index"));
  for (int i=1; i < aggCount; i++) {
    aggregatorFactories.add(new CountAggregatorFactory("rows" + i));
  }
  final List<PostAggregator> postAggregators=new ArrayList<>();
  for (int i=0; i < postAggCount; i++) {
    postAggregators.add(new ArithmeticPostAggregator("addrowsindexconstant" + i,"+",Lists.newArrayList(constant,rowsPostAgg,indexPostAgg)));
  }
  final DateTime currTime=new DateTime();
  List<Map<String,Object>> list=new ArrayList<>();
  for (int i=0; i < threshold; i++) {
    Map<String,Object> res=new HashMap<>();
    res.put("testdim","" + i);
    res.put("rows",1L);
    for (int j=0; j < aggCount; j++) {
      res.put("rows" + j,1L);
    }
    res.put("index",1L);
    list.add(res);
  }
  result1=new Result<>(currTime,new TopNResultValue(list));
  List<Map<String,Object>> list2=new ArrayList<>();
  for (int i=0; i < threshold; i++) {
    Map<String,Object> res=new HashMap<>();
    res.put("testdim","" + i);
    res.put("rows",2L);
    for (int j=0; j < aggCount; j++) {
      res.put("rows" + j,2L);
    }
    res.put("index",2L);
    list2.add(res);
  }
  result2=new Result<>(currTime,new TopNResultValue(list2));
  fn=new TopNBinaryFn(TopNResultMerger.identity,QueryGranularity.ALL,new DefaultDimensionSpec("testdim",null),new NumericTopNMetricSpec("index"),100,aggregatorFactories,postAggregators);
}

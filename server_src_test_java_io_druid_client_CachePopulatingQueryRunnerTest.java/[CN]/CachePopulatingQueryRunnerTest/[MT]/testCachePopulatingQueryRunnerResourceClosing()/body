{
  Iterable<Result<TopNResultValue>> expectedRes=makeTopNResults(new DateTime("2011-01-05"),"a",50,4994,"b",50,4993,"c",50,4992,new DateTime("2011-01-06"),"a",50,4991,"b",50,4990,"c",50,4989,new DateTime("2011-01-07"),"a",50,4991,"b",50,4990,"c",50,4989,new DateTime("2011-01-08"),"a",50,4988,"b",50,4987,"c",50,4986,new DateTime("2011-01-09"),"a",50,4985,"b",50,4984,"c",50,4983);
  final TopNQueryBuilder builder=new TopNQueryBuilder().dataSource("ds").dimension("top_dim").metric("imps").threshold(3).intervals("2011-01-05/2011-01-10").aggregators(AGGS).granularity(AllGranularity.ALL);
  final AssertingClosable closable=new AssertingClosable();
  final Sequence resultSeq=new ResourceClosingSequence(Sequences.simple(expectedRes),closable){
    @Override public Yielder toYielder(    Object initValue,    YieldingAccumulator accumulator){
      Assert.assertFalse(closable.isClosed());
      return super.toYielder(initValue,accumulator);
    }
  }
;
  Cache cache=EasyMock.createMock(Cache.class);
  EasyMock.expect(cache.isLocal()).andReturn(false);
  CachePopulatingQueryRunner runner=new CachePopulatingQueryRunner("segment",new SegmentDescriptor(new Interval("2011/2012"),"version",0),new DefaultObjectMapper(),cache,new TopNQueryQueryToolChest(new TopNQueryConfig()),new QueryRunner(){
    @Override public Sequence run(    Query query){
      return resultSeq;
    }
  }
,new CacheConfig());
  Sequence res=runner.run(builder.build());
  Assert.assertFalse("sequence must not be closed",closable.isClosed());
  ArrayList results=Sequences.toList(res,new ArrayList());
  Assert.assertTrue(closable.isClosed());
  Assert.assertEquals(expectedRes,results);
}

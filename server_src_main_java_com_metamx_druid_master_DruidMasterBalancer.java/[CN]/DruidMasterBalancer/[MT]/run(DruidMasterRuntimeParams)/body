{
  MasterStats stats=new MasterStats();
  for (  Map.Entry<String,MinMaxPriorityQueue<ServerHolder>> entry : params.getDruidCluster().getCluster().entrySet()) {
    String tier=entry.getKey();
    if (currentlyMovingSegments.get(tier) == null) {
      currentlyMovingSegments.put(tier,new ConcurrentHashMap<String,BalancerSegmentHolder2>());
    }
    if (!currentlyMovingSegments.get(tier).isEmpty()) {
      reduceLifetimes(tier);
      log.info("[%s]: Still waiting on %,d segments to be moved",tier,currentlyMovingSegments.size());
      continue;
    }
    TreeSet<ServerHolder> serversByPercentUsed=Sets.newTreeSet(percentUsedComparator);
    serversByPercentUsed.addAll(entry.getValue());
    List<ServerHolder> serverHolderList=new ArrayList<ServerHolder>(entry.getValue());
    analyzer.init(serverHolderList);
    log.info("Initial Total Cost: [%s]",analyzer.getInitialTotalCost());
    moveSegments(analyzer.findSegmentsToMove(),params);
    stats.addToTieredStat("costChange",tier,(long)analyzer.getTotalCostChange());
    log.info("Cost Change: [%s]",analyzer.getTotalCostChange());
    if (serversByPercentUsed.size() <= 1) {
      log.info("[%s]: No unique values found for highest and lowest percent used servers: nothing to balance",tier);
      continue;
    }
    ServerHolder highestPercentUsedServer=serversByPercentUsed.first();
    ServerHolder lowestPercentUsedServer=serversByPercentUsed.last();
    stats.addToTieredStat("movedCount",tier,currentlyMovingSegments.get(tier).size());
  }
  return params.buildFromExisting().withMasterStats(stats).build();
}

{
  Map<String,Integer> movedCounts=Maps.newHashMap();
  for (  Map.Entry<String,MinMaxPriorityQueue<ServerHolder>> entry : params.getDruidCluster().getCluster().entrySet()) {
    String tier=entry.getKey();
    if (currentlyMovingSegments.get(tier) == null) {
      currentlyMovingSegments.put(tier,new ConcurrentHashMap<String,BalancerSegmentHolder>());
    }
    if (!currentlyMovingSegments.get(tier).isEmpty()) {
      reduceLifetimes(tier);
      log.info("[%s]: Still waiting on %,d segments to be moved",tier,currentlyMovingSegments.size());
      continue;
    }
    TreeSet<ServerHolder> serversByPercentUsed=Sets.newTreeSet(percentUsedComparator);
    serversByPercentUsed.addAll(entry.getValue());
    if (serversByPercentUsed.size() <= 1) {
      log.info("[%s]: No unique values found for highest and lowest percent used servers: nothing to balance",tier);
      return params;
    }
    ServerHolder highestPercentUsedServer=serversByPercentUsed.first();
    ServerHolder lowestPercentUsedServer=serversByPercentUsed.last();
    analyzer.init(highestPercentUsedServer,lowestPercentUsedServer);
    log.info("[%s]: Percent difference in percent size used between highest/lowest servers: %s%%",tier,analyzer.getPercentDiff());
    log.info("[%s]: Highest percent used [%s]: size used[%s], percent used[%s%%]",tier,highestPercentUsedServer.getServer().getName(),highestPercentUsedServer.getSizeUsed(),highestPercentUsedServer.getPercentUsed());
    log.info("[%s]: Lowest percent used [%s]: size used[%s], percent used[%s%%]",tier,lowestPercentUsedServer.getServer().getName(),lowestPercentUsedServer.getSizeUsed(),lowestPercentUsedServer.getPercentUsed());
    moveSegments(lowestPercentUsedServer.getServer(),analyzer.findSegmentsToMove(highestPercentUsedServer.getServer()),params);
  }
  List<String> moveMsgs=Lists.newArrayList();
  for (  Map.Entry<String,ConcurrentHashMap<String,BalancerSegmentHolder>> entry : currentlyMovingSegments.entrySet()) {
    movedCounts.put(entry.getKey(),entry.getValue().size());
    moveMsgs.add(String.format("[%s] : Moved %,d segment(s)",entry.getKey(),entry.getValue().size()));
  }
  return params.buildFromExisting().withMessages(moveMsgs).withMovedCount(movedCounts).build();
}

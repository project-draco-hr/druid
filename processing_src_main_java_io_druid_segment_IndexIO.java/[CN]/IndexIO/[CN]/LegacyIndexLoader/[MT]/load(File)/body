{
  MMappedIndex index=legacyHandler.mapDir(inDir);
  Map<String,Column> columns=Maps.newHashMap();
  for (  String dimension : index.getAvailableDimensions()) {
    ColumnBuilder builder=new ColumnBuilder().setType(ValueType.STRING).setHasMultipleValues(true).setDictionaryEncodedColumn(new DictionaryEncodedColumnSupplier(index.getDimValueLookup(dimension),null,Suppliers.<IndexedMultivalue<IndexedInts>>ofInstance(index.getDimColumn(dimension)),columnConfig.columnCacheSizeBytes())).setBitmapIndex(new BitmapIndexColumnPartSupplier(new ConciseBitmapFactory(),index.getBitmapIndexes().get(dimension),index.getDimValueLookup(dimension)));
    if (index.getSpatialIndexes().get(dimension) != null) {
      builder.setSpatialIndex(new SpatialIndexColumnPartSupplier(index.getSpatialIndexes().get(dimension)));
    }
    columns.put(dimension,builder.build());
  }
  for (  String metric : index.getAvailableMetrics()) {
    final MetricHolder metricHolder=index.getMetricHolder(metric);
    if (metricHolder.getType() == MetricHolder.MetricType.FLOAT) {
      columns.put(metric,new ColumnBuilder().setType(ValueType.FLOAT).setGenericColumn(new FloatGenericColumnSupplier(metricHolder.floatType,BYTE_ORDER)).build());
    }
 else     if (metricHolder.getType() == MetricHolder.MetricType.COMPLEX) {
      columns.put(metric,new ColumnBuilder().setType(ValueType.COMPLEX).setComplexColumn(new ComplexColumnPartSupplier(metricHolder.getTypeName(),(GenericIndexed)metricHolder.complexType)).build());
    }
  }
  Set<String> colSet=Sets.newTreeSet();
  for (  String dimension : index.getAvailableDimensions()) {
    colSet.add(dimension);
  }
  for (  String metric : index.getAvailableMetrics()) {
    colSet.add(metric);
  }
  String[] cols=colSet.toArray(new String[colSet.size()]);
  columns.put(Column.TIME_COLUMN_NAME,new ColumnBuilder().setType(ValueType.LONG).setGenericColumn(new LongGenericColumnSupplier(index.timestamps)).build());
  return new SimpleQueryableIndex(index.getDataInterval(),new ArrayIndexed<>(cols,String.class),index.getAvailableDimensions(),new ConciseBitmapFactory(),columns,index.getFileMapper());
}

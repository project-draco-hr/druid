{
  return new ComplexMetricExtractor(){
    @Override public Class<ApproximateHistogram> extractedClass(){
      return ApproximateHistogram.class;
    }
    @Override public ApproximateHistogram extractValue(    InputRow inputRow,    String metricName){
      Object rawValue=inputRow.getRaw(metricName);
      if (rawValue instanceof ApproximateHistogram) {
        return (ApproximateHistogram)rawValue;
      }
 else {
        List<String> dimValues=inputRow.getDimension(metricName);
        if (dimValues != null && dimValues.size() > 0) {
          Iterator<String> values=dimValues.iterator();
          ApproximateHistogram h=new ApproximateHistogram();
          while (values.hasNext()) {
            float value=Float.parseFloat(values.next());
            h.offer(value);
          }
          return h;
        }
 else {
          return new ApproximateHistogram(0);
        }
      }
    }
  }
;
}

{
  ApproximateHistogram merged=new ApproximateHistogram(0);
  ApproximateHistogram mergedFast=new ApproximateHistogram(0);
  ApproximateHistogram h1=new ApproximateHistogram(5);
  ApproximateHistogram h2=new ApproximateHistogram(10);
  for (int i=0; i < 5; ++i) {
    h1.offer(VALUES[i]);
  }
  for (int i=5; i < VALUES.length; ++i) {
    h2.offer(VALUES[i]);
  }
  merged.fold(h1);
  merged.fold(h2);
  mergedFast.foldFast(h1);
  mergedFast.foldFast(h2);
  Assert.assertArrayEquals("final bin positions match expected positions",new float[]{2,9.5f,19.33f,32.67f,45f},merged.positions(),0.1f);
  Assert.assertArrayEquals("final bin positions match expected positions",new float[]{11.2f,30.25f,45f},mergedFast.positions(),0.1f);
  Assert.assertArrayEquals("final bin counts match expected counts",new long[]{1,2,3,3,1},merged.bins());
  Assert.assertArrayEquals("final bin counts match expected counts",new long[]{5,4,1},mergedFast.bins());
  Assert.assertEquals("merged max matches expected value",45f,merged.max(),0.1f);
  Assert.assertEquals("mergedfast max matches expected value",45f,mergedFast.max(),0.1f);
  Assert.assertEquals("merged min matches expected value",2f,merged.min(),0.1f);
  Assert.assertEquals("mergedfast min matches expected value",2f,mergedFast.min(),0.1f);
  ApproximateHistogram a=buildHistogram(10,new float[]{1,2,3,4,5,6});
  ApproximateHistogram aFast=buildHistogram(10,new float[]{1,2,3,4,5,6});
  ApproximateHistogram b=buildHistogram(5,new float[]{3,4,5,6});
  a.fold(b);
  aFast.foldFast(b);
  Assert.assertEquals(new ApproximateHistogram(6,new float[]{1,2,3,4,5,6,0,0,0,0},new long[]{1,1,2,2,2,2,0,0,0,0},1,6),a);
  Assert.assertEquals(new ApproximateHistogram(6,new float[]{1,2,3,4,5,6,0,0,0,0},new long[]{1,1,2,2,2,2,0,0,0,0},1,6),aFast);
  ApproximateHistogram h3=new ApproximateHistogram(10);
  ApproximateHistogram h4=new ApproximateHistogram(10);
  for (  float v : VALUES3) {
    h3.offer(v);
  }
  for (  float v : VALUES4) {
    h4.offer(v);
  }
  h3.fold(h4);
  Assert.assertArrayEquals("final bin positions match expected positions",new float[]{-50.98f,-21.77f,-9.81f,3.73f,13.72f,20.1f,29f,44.79f,53.8f,64.67f},h3.positions(),0.1f);
  Assert.assertArrayEquals("final bin counts match expected counts",new long[]{1,1,3,6,12,32,6,1,2,6},h3.bins());
}

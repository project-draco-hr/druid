{
  if (period.getMillis() == 0) {
    return baseRunner.run(query,context);
  }
  return Sequences.concat(FunctionalIterable.create(query.getIntervals()).transformCat(new Function<Interval,Iterable<Interval>>(){
    @Override public Iterable<Interval> apply(    @Nullable Interval input){
      return splitInterval(input);
    }
  }
).transform(new Function<Interval,Sequence<T>>(){
    @Override public Sequence<T> apply(    Interval singleInterval){
      return baseRunner.run(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(Arrays.asList(singleInterval))),context);
    }
  }
));
}

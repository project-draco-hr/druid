{
  final Period chunkPeriod=getChunkPeriod(query);
  if (chunkPeriod.toStandardDuration().getMillis() == 0) {
    return baseRunner.run(query,responseContext);
  }
  List<Interval> chunkIntervals=Lists.newArrayList(FunctionalIterable.create(query.getIntervals()).transformCat(new Function<Interval,Iterable<Interval>>(){
    @Override public Iterable<Interval> apply(    Interval input){
      return splitInterval(input,chunkPeriod);
    }
  }
));
  if (chunkIntervals.size() <= 1) {
    return baseRunner.run(query,responseContext);
  }
  return Sequences.concat(Lists.newArrayList(FunctionalIterable.create(chunkIntervals).transform(new Function<Interval,Sequence<T>>(){
    @Override public Sequence<T> apply(    Interval singleInterval){
      return new AsyncQueryRunner<T>(toolChest.mergeResults(new MetricsEmittingQueryRunner<T>(emitter,new Function<Query<T>,ServiceMetricEvent.Builder>(){
        @Override public ServiceMetricEvent.Builder apply(        Query<T> input){
          return toolChest.makeMetricBuilder(input);
        }
      }
,baseRunner,"query/intervalChunk/time",ImmutableMap.of("chunkInterval",singleInterval.toString())).withWaitMeasuredFromNow()),executor,queryWatcher).run(query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(Arrays.asList(singleInterval))),responseContext);
    }
  }
)));
}

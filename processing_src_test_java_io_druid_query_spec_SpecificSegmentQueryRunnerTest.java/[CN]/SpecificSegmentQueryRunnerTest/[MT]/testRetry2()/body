{
  final ObjectMapper mapper=new DefaultObjectMapper();
  SegmentDescriptor descriptor=new SegmentDescriptor(new Interval("2012-01-01T00:00:00Z/P1D"),"version",0);
  TimeseriesResultBuilder builder=new TimeseriesResultBuilder(new DateTime("2012-01-01T00:00:00Z"));
  CountAggregator rows=new CountAggregator("rows");
  rows.aggregate();
  builder.addMetric(rows);
  final Result<TimeseriesResultValue> value=builder.build();
  final SpecificSegmentQueryRunner queryRunner=new SpecificSegmentQueryRunner(new QueryRunner(){
    @Override public Sequence run(    Query query,    Map responseContext){
      return Sequences.withEffect(Sequences.simple(Arrays.asList(value)),new Runnable(){
        @Override public void run(){
          throw new SegmentMissingException("FAILSAUCE");
        }
      }
,MoreExecutors.sameThreadExecutor());
    }
  }
,new SpecificSegmentSpec(descriptor));
  final Map<String,Object> responseContext=Maps.newHashMap();
  TimeseriesQuery query=Druids.newTimeseriesQueryBuilder().dataSource("foo").granularity(QueryGranularity.ALL).intervals(ImmutableList.of(new Interval("2012-01-01T00:00:00Z/P1D"))).aggregators(ImmutableList.<AggregatorFactory>of(new CountAggregatorFactory("rows"))).build();
  Sequence results=queryRunner.run(query,responseContext);
  List<Result<TimeseriesResultValue>> res=Sequences.toList(results,Lists.<Result<TimeseriesResultValue>>newArrayList());
  Assert.assertEquals(1,res.size());
  Result<TimeseriesResultValue> theVal=res.get(0);
  Assert.assertTrue(1L == theVal.getValue().getLongMetric("rows"));
  Object missingSegments=responseContext.get(Result.MISSING_SEGMENTS_KEY);
  Assert.assertTrue(missingSegments != null);
  Assert.assertTrue(missingSegments instanceof List);
  Object segmentDesc=((List)missingSegments).get(0);
  Assert.assertTrue(segmentDesc instanceof SegmentDescriptor);
  SegmentDescriptor newDesc=mapper.readValue(mapper.writeValueAsString(segmentDesc),SegmentDescriptor.class);
  Assert.assertEquals(descriptor,newDesc);
}

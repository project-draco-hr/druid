{
  final QueryToolChest<T,Query<T>> toolChest=warehouse.getToolChest(query);
  final CacheStrategy<T,Object,Query<T>> strategy=toolChest.getCacheStrategy(query);
  final Map<DruidServer,List<SegmentDescriptor>> serverSegments=Maps.newTreeMap();
  final List<Pair<DateTime,byte[]>> cachedResults=Lists.newArrayList();
  final Map<String,CachePopulator> cachePopulatorMap=Maps.newHashMap();
  final boolean useCache=query.getContextUseCache(true) && strategy != null && cacheConfig.isUseCache();
  final boolean populateCache=query.getContextPopulateCache(true) && strategy != null && cacheConfig.isPopulateCache();
  final boolean isBySegment=query.getContextBySegment(false);
  ImmutableMap.Builder<String,Object> contextBuilder=new ImmutableMap.Builder<>();
  final int priority=query.getContextPriority(0);
  contextBuilder.put("priority",priority);
  if (populateCache) {
    contextBuilder.put(CacheConfig.POPULATE_CACHE,false);
    contextBuilder.put("bySegment",true);
  }
  contextBuilder.put("intermediate",true);
  final Query<T> rewrittenQuery=query.withOverriddenContext(contextBuilder.build());
  VersionedIntervalTimeline<String,ServerSelector> timeline=serverView.getTimeline(query.getDataSource());
  if (timeline == null) {
    return Sequences.empty();
  }
  Set<Pair<ServerSelector,SegmentDescriptor>> segments=Sets.newLinkedHashSet();
  List<TimelineObjectHolder<String,ServerSelector>> serversLookup=Lists.newLinkedList();
  for (  Interval interval : rewrittenQuery.getIntervals()) {
    serversLookup.addAll(timeline.lookup(interval));
  }
  final List<TimelineObjectHolder<String,ServerSelector>> filteredServersLookup=toolChest.filterSegments(query,serversLookup);
  for (  TimelineObjectHolder<String,ServerSelector> holder : filteredServersLookup) {
    for (    PartitionChunk<ServerSelector> chunk : holder.getObject()) {
      ServerSelector selector=chunk.getObject();
      final SegmentDescriptor descriptor=new SegmentDescriptor(holder.getInterval(),holder.getVersion(),chunk.getChunkNumber());
      segments.add(Pair.of(selector,descriptor));
    }
  }
  final byte[] queryCacheKey;
  if (strategy != null) {
    queryCacheKey=strategy.computeCacheKey(query);
  }
 else {
    queryCacheKey=null;
  }
  if (queryCacheKey != null) {
    Map<Pair<ServerSelector,SegmentDescriptor>,Cache.NamedKey> cacheKeys=Maps.newLinkedHashMap();
    for (    Pair<ServerSelector,SegmentDescriptor> segment : segments) {
      final Cache.NamedKey segmentCacheKey=CacheUtil.computeSegmentCacheKey(segment.lhs.getSegment().getIdentifier(),segment.rhs,queryCacheKey);
      cacheKeys.put(segment,segmentCacheKey);
    }
    final Map<Cache.NamedKey,byte[]> cachedValues;
    if (useCache) {
      cachedValues=cache.getBulk(cacheKeys.values());
    }
 else {
      cachedValues=ImmutableMap.of();
    }
    for (    Map.Entry<Pair<ServerSelector,SegmentDescriptor>,Cache.NamedKey> entry : cacheKeys.entrySet()) {
      Pair<ServerSelector,SegmentDescriptor> segment=entry.getKey();
      Cache.NamedKey segmentCacheKey=entry.getValue();
      final Interval segmentQueryInterval=segment.rhs.getInterval();
      final byte[] cachedValue=cachedValues.get(segmentCacheKey);
      if (cachedValue != null) {
        segments.remove(segment);
        cachedResults.add(Pair.of(segmentQueryInterval.getStart(),cachedValue));
      }
 else       if (populateCache) {
        final String segmentIdentifier=segment.lhs.getSegment().getIdentifier();
        cachePopulatorMap.put(String.format("%s_%s",segmentIdentifier,segmentQueryInterval),new CachePopulator(cache,objectMapper,segmentCacheKey));
      }
    }
  }
  for (  Pair<ServerSelector,SegmentDescriptor> segment : segments) {
    final QueryableDruidServer queryableDruidServer=segment.lhs.pick();
    if (queryableDruidServer == null) {
      log.makeAlert("No servers found for %s?! How can this be?!",segment.rhs).emit();
    }
 else {
      final DruidServer server=queryableDruidServer.getServer();
      List<SegmentDescriptor> descriptors=serverSegments.get(server);
      if (descriptors == null) {
        descriptors=Lists.newArrayList();
        serverSegments.put(server,descriptors);
      }
      descriptors.add(segment.rhs);
    }
  }
  return new LazySequence<>(new Supplier<Sequence<T>>(){
    @Override public Sequence<T> get(){
      ArrayList<Pair<DateTime,Sequence<T>>> listOfSequences=Lists.newArrayList();
      addSequencesFromServer(listOfSequences);
      addSequencesFromCache(listOfSequences);
      Collections.sort(listOfSequences,Ordering.natural().onResultOf(Pair.<DateTime,Sequence<T>>lhsFn()));
      final Sequence<Sequence<T>> seq=Sequences.simple(Iterables.transform(listOfSequences,Pair.<DateTime,Sequence<T>>rhsFn()));
      if (strategy == null) {
        return toolChest.mergeSequences(seq);
      }
 else {
        return strategy.mergeSequences(seq);
      }
    }
    private void addSequencesFromCache(    ArrayList<Pair<DateTime,Sequence<T>>> listOfSequences){
      if (strategy == null) {
        return;
      }
      final Function<Object,T> pullFromCacheFunction=strategy.pullFromCache();
      final TypeReference<Object> cacheObjectClazz=strategy.getCacheObjectClazz();
      for (      Pair<DateTime,byte[]> cachedResultPair : cachedResults) {
        final byte[] cachedResult=cachedResultPair.rhs;
        Sequence<Object> cachedSequence=new BaseSequence<>(new BaseSequence.IteratorMaker<Object,Iterator<Object>>(){
          @Override public Iterator<Object> make(){
            try {
              if (cachedResult.length == 0) {
                return Iterators.emptyIterator();
              }
              return objectMapper.readValues(objectMapper.getFactory().createParser(cachedResult),cacheObjectClazz);
            }
 catch (            IOException e) {
              throw Throwables.propagate(e);
            }
          }
          @Override public void cleanup(          Iterator<Object> iterFromMake){
          }
        }
);
        listOfSequences.add(Pair.of(cachedResultPair.lhs,Sequences.map(cachedSequence,pullFromCacheFunction)));
      }
    }
    @SuppressWarnings("unchecked") private void addSequencesFromServer(    ArrayList<Pair<DateTime,Sequence<T>>> listOfSequences){
      for (      Map.Entry<DruidServer,List<SegmentDescriptor>> entry : serverSegments.entrySet()) {
        final DruidServer server=entry.getKey();
        final List<SegmentDescriptor> descriptors=entry.getValue();
        final QueryRunner clientQueryable=serverView.getQueryRunner(server);
        if (clientQueryable == null) {
          log.makeAlert("WTF!? server[%s] doesn't have a client Queryable?",server).emit();
          continue;
        }
        final Sequence<T> resultSeqToAdd;
        final MultipleSpecificSegmentSpec segmentSpec=new MultipleSpecificSegmentSpec(descriptors);
        List<Interval> intervals=segmentSpec.getIntervals();
        if (!server.isAssignable() || !populateCache || isBySegment) {
          resultSeqToAdd=clientQueryable.run(query.withQuerySegmentSpec(segmentSpec));
        }
 else {
          resultSeqToAdd=toolChest.mergeSequences(Sequences.map(clientQueryable.run(rewrittenQuery.withQuerySegmentSpec(segmentSpec)),new Function<Object,Sequence<T>>(){
            private final Function<T,Object> cacheFn=strategy.prepareForCache();
            @Override public Sequence<T> apply(            Object input){
              Result<Object> result=(Result<Object>)input;
              final BySegmentResultValueClass<T> value=(BySegmentResultValueClass<T>)result.getValue();
              final List<Object> cacheData=Lists.newLinkedList();
              return Sequences.withEffect(Sequences.map(Sequences.map(Sequences.simple(value.getResults()),new Function<T,T>(){
                @Override public T apply(                T input){
                  cacheData.add(cacheFn.apply(input));
                  return input;
                }
              }
),toolChest.makePreComputeManipulatorFn(rewrittenQuery,MetricManipulatorFns.deserializing())),new Runnable(){
                @Override public void run(){
                  CachePopulator cachePopulator=cachePopulatorMap.get(String.format("%s_%s",value.getSegmentId(),value.getInterval()));
                  if (cachePopulator != null) {
                    cachePopulator.populate(cacheData);
                  }
                }
              }
,MoreExecutors.sameThreadExecutor());
            }
          }
));
        }
        listOfSequences.add(Pair.of(intervals.get(0).getStart(),resultSeqToAdd));
      }
    }
  }
);
}

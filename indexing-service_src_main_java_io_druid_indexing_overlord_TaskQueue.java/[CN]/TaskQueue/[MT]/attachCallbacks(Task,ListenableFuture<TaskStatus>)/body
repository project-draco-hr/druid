{
  final ServiceMetricEvent.Builder metricBuilder=new ServiceMetricEvent.Builder().setDimension("dataSource",task.getDataSource()).setDimension("taskType",task.getType());
  Futures.addCallback(statusFuture,new FutureCallback<TaskStatus>(){
    @Override public void onSuccess(    final TaskStatus status){
      log.info("Received %s status for task: %s",status.getStatusCode(),status.getId());
      handleStatus(status);
    }
    @Override public void onFailure(    final Throwable t){
      log.makeAlert(t,"Failed to run task").addData("task",task.getId()).addData("type",task.getType()).addData("dataSource",task.getDataSource()).emit();
      handleStatus(TaskStatus.failure(task.getId()));
    }
    private void handleStatus(    final TaskStatus status){
      try {
        if (!active) {
          log.info("Abandoning task due to shutdown: %s",task.getId());
          return;
        }
        notifyStatus(task,status);
        if (status.isComplete()) {
          metricBuilder.setDimension(DruidMetrics.TASK_STATUS,status.getStatusCode().toString());
          emitter.emit(metricBuilder.build("task/run/time",status.getDuration()));
          log.info("Task %s: %s (%d run duration)",status.getStatusCode(),task,status.getDuration());
        }
      }
 catch (      Exception e) {
        log.makeAlert(e,"Failed to handle task status").addData("task",task.getId()).addData("statusCode",status.getStatusCode()).emit();
      }
    }
  }
);
  return statusFuture;
}

{
  final long start=System.currentTimeMillis();
  Query query=null;
  byte[] requestQuery=null;
  String queryId;
  final boolean isSmile="application/smile".equals(req.getContentType());
  ObjectMapper objectMapper=isSmile ? smileMapper : jsonMapper;
  ObjectWriter jsonWriter=req.getParameter("pretty") == null ? objectMapper.writer() : objectMapper.writerWithDefaultPrettyPrinter();
  OutputStream out=null;
  try {
    requestQuery=ByteStreams.toByteArray(req.getInputStream());
    query=objectMapper.readValue(requestQuery,Query.class);
    queryId=query.getId();
    if (queryId == null) {
      queryId=idProvider.next(query);
      query=query.withId(queryId);
    }
    requestLogger.log(new RequestLogLine(new DateTime(),req.getRemoteAddr(),query));
    Sequence<?> results=query.run(texasRanger);
    if (results == null) {
      results=Sequences.empty();
    }
    resp.setStatus(200);
    resp.setContentType("application/x-javascript");
    out=resp.getOutputStream();
    jsonWriter.writeValue(out,results);
    long requestTime=System.currentTimeMillis() - start;
    emitter.emit(new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(query.getType()).setUser5(query.getIntervals().get(0).toString()).setUser6(String.valueOf(query.hasFilters())).setUser7(req.getRemoteAddr()).setUser9(query.getDuration().toPeriod().toStandardMinutes().toString()).setUser10(queryId).build("request/time",requestTime));
  }
 catch (  Exception e) {
    final String queryString=query == null ? (isSmile ? "smile_unknown" : new String(requestQuery,Charsets.UTF_8)) : query.toString();
    log.warn(e,"Exception occurred on request [%s]",queryString);
    if (!resp.isCommitted()) {
      resp.setStatus(500);
      resp.resetBuffer();
      if (out == null) {
        out=resp.getOutputStream();
      }
      out.write((e.getMessage() == null) ? "Exception null".getBytes(UTF8) : e.getMessage().getBytes(UTF8));
      out.write("\n".getBytes(UTF8));
    }
    resp.flushBuffer();
    emitter.emit(new AlertEvent.Builder().build("Exception handling request",ImmutableMap.<String,Object>builder().put("exception",e.toString()).put("query",queryString).put("peer",req.getRemoteAddr()).build()));
  }
 finally {
    resp.flushBuffer();
    Closeables.closeQuietly(out);
  }
}

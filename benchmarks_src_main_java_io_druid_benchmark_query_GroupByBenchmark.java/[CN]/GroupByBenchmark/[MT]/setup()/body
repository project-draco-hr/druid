{
  log.info("SETUP CALLED AT " + +System.currentTimeMillis());
  if (ComplexMetrics.getSerdeForType("hyperUnique") == null) {
    ComplexMetrics.registerSerde("hyperUnique",new HyperUniquesSerde(Hashing.murmur3_128()));
  }
  executorService=Execs.multiThreaded(numProcessingThreads,"GroupByThreadPool[%d]");
  setupQueries();
  String[] schemaQuery=schemaAndQuery.split("\\.");
  String schemaName=schemaQuery[0];
  String queryName=schemaQuery[1];
  schemaInfo=BenchmarkSchemas.SCHEMA_MAP.get(schemaName);
  query=SCHEMA_QUERY_MAP.get(schemaName).get(queryName);
  incIndexes=new ArrayList<>();
  for (int i=0; i < numSegments; i++) {
    log.info("Generating rows for segment " + i);
    BenchmarkDataGenerator gen=new BenchmarkDataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED + 1,schemaInfo.getDataInterval(),rowsPerSegment);
    IncrementalIndex incIndex=makeIncIndex();
    incIndexes.add(incIndex);
    for (int j=0; j < rowsPerSegment; j++) {
      InputRow row=gen.nextRow();
      if (j % 10000 == 0) {
        log.info(j + " rows generated.");
      }
      incIndex.add(row);
    }
    log.info(rowsPerSegment + " rows generated");
  }
  IncrementalIndex incIndex=incIndexes.get(0);
  File tmpFile=Files.createTempDir();
  log.info("Using temp dir: " + tmpFile.getAbsolutePath());
  tmpFile.deleteOnExit();
  qIndexes=new ArrayList<>();
  for (int i=0; i < numSegments; i++) {
    File indexFile=INDEX_MERGER_V9.persist(incIndex,tmpFile,new IndexSpec());
    QueryableIndex qIndex=INDEX_IO.loadIndex(indexFile);
    qIndexes.add(qIndex);
  }
  StupidPool<ByteBuffer> bufferPool=new StupidPool<>(new OffheapBufferGenerator("compute",250000000),Integer.MAX_VALUE);
  BlockingPool<ByteBuffer> mergePool=new BlockingPool<>(new OffheapBufferGenerator("merge",250000000),2);
  final GroupByQueryConfig config=new GroupByQueryConfig(){
    @Override public String getDefaultStrategy(){
      return defaultStrategy;
    }
    @Override public int getBufferGrouperInitialBuckets(){
      return initialBuckets;
    }
  }
;
  config.setSingleThreaded(false);
  config.setMaxIntermediateRows(Integer.MAX_VALUE);
  config.setMaxResults(Integer.MAX_VALUE);
  DruidProcessingConfig druidProcessingConfig=new DruidProcessingConfig(){
    @Override public int getNumThreads(){
      return numProcessingThreads;
    }
    @Override public String getFormatString(){
      return null;
    }
  }
;
  final Supplier<GroupByQueryConfig> configSupplier=Suppliers.ofInstance(config);
  final GroupByStrategySelector strategySelector=new GroupByStrategySelector(configSupplier,new GroupByStrategyV1(configSupplier,new GroupByQueryEngine(configSupplier,bufferPool),QueryBenchmarkUtil.NOOP_QUERYWATCHER,bufferPool),new GroupByStrategyV2(druidProcessingConfig,configSupplier,bufferPool,mergePool,new ObjectMapper(new SmileFactory()),QueryBenchmarkUtil.NOOP_QUERYWATCHER));
  factory=new GroupByQueryRunnerFactory(strategySelector,new GroupByQueryQueryToolChest(configSupplier,strategySelector,bufferPool,QueryBenchmarkUtil.NoopIntervalChunkingQueryRunnerDecorator()));
}

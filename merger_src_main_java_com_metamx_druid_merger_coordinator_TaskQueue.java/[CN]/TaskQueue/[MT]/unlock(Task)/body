{
  giant.lock();
  try {
    final String dataSource=task.getDataSource();
    final TaskGroup taskGroup;
    final Optional<TaskGroup> maybeTaskGroup=findTaskGroupForTask(task);
    if (maybeTaskGroup.isPresent()) {
      taskGroup=maybeTaskGroup.get();
    }
 else {
      throw new IllegalStateException(String.format("Task must be running: %s",task.getId()));
    }
    log.info("Removing task[%s] from TaskGroup[%s]",task.getId(),taskGroup.getGroupId());
    taskGroup.remove(task.getId());
    if (taskGroup.size() == 0) {
      log.info("TaskGroup complete: %s",taskGroup);
      running.get(dataSource).remove(taskGroup.getInterval());
    }
    if (running.get(dataSource).size() == 0) {
      running.remove(dataSource);
    }
    workMayBeAvailable.signalAll();
  }
  finally {
    giant.unlock();
  }
}

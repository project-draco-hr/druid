{
  giant.lock();
  try {
    final NavigableMap<Interval,TaskGroup> dsRunning=running.get(dataSource);
    if (dsRunning == null) {
      return Collections.emptyList();
    }
 else {
      final NavigableSet<Interval> dsLockbox=dsRunning.navigableKeySet();
      final Iterable<Interval> searchIntervals=Iterables.concat(Collections.singletonList(dsLockbox.floor(new Interval(interval.getStart(),new DateTime(Long.MAX_VALUE)))),dsLockbox.subSet(new Interval(interval.getStart(),new DateTime(Long.MAX_VALUE)),false,new Interval(interval.getEnd(),interval.getEnd()),false));
      return Lists.newArrayList(FunctionalIterable.create(searchIntervals).filter(new Predicate<Interval>(){
        @Override public boolean apply(        @Nullable Interval searchInterval){
          return searchInterval != null && searchInterval.overlaps(interval);
        }
      }
).transform(new Function<Interval,TaskGroup>(){
        @Override public TaskGroup apply(        Interval interval){
          return dsRunning.get(interval);
        }
      }
));
    }
  }
  finally {
    giant.unlock();
  }
}

{
  giant.lock();
  try {
    Preconditions.checkNotNull(task,"task");
    Preconditions.checkNotNull(status,"status");
    Preconditions.checkState(active,"Queue is not active!");
    Preconditions.checkArgument(task.getId().equals(status.getId()),"Mismatching task ids[%s/%s]",task.getId(),status.getId());
    final TaskGroup taskGroup;
    final Optional<TaskGroup> maybeTaskGroup=findTaskGroupForTask(task);
    if (!maybeTaskGroup.isPresent()) {
      log.info("Ignoring notification for dead task: %s",task.getId());
      return;
    }
 else {
      taskGroup=maybeTaskGroup.get();
    }
    taskStorage.setStatus(task.getId(),status);
    if (taskGroup.getCommitStyle().shouldCommit(task,status)) {
      log.info("Committing %s status for task: %s",status.getStatusCode(),task.getId());
      try {
        if (commitRunnable != null) {
          log.info("Running commitRunnable for task: %s",task.getId());
          commitRunnable.run();
        }
        for (        final Task nextTask : status.getNextTasks()) {
          if (!seenNextTasks.containsEntry(task.getId(),nextTask.getId())) {
            add(nextTask);
            tryLock(nextTask);
            seenNextTasks.put(task.getId(),nextTask.getId());
          }
 else {
            log.info("Already added followup task %s to original task: %s",nextTask.getId(),task.getId());
          }
        }
      }
 catch (      Exception e) {
        log.makeAlert(e,"Failed to commit task").addData("task",task.getId()).addData("statusCode",status.getStatusCode()).emit();
        taskStorage.setStatus(task.getId(),TaskStatus.failure(task.getId()).withDuration(status.getDuration()));
      }
    }
 else {
      log.info("Not committing %s status for task: %s",status.getStatusCode(),task);
    }
    if (status.isComplete()) {
      unlock(task);
      seenNextTasks.removeAll(task.getId());
      log.info("Task done: %s",task);
    }
  }
  finally {
    giant.unlock();
  }
}

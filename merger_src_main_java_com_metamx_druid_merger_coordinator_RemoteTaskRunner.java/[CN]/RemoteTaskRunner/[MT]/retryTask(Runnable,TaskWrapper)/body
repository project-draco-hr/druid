{
  final Task task=taskWrapper.getTask();
  final RetryPolicy retryPolicy=taskWrapper.getRetryPolicy();
  log.info("Registering retry for failed task[%s]",task.getId());
  if (retryPolicy.hasExceededRetryThreshold()) {
    log.makeAlert("Task [%s] has failed[%d] times, giving up!",task.getId(),retryPolicy.getNumRetries()).emit();
    return;
  }
  scheduledExec.schedule(new Runnable(){
    @Override public void run(){
      try {
        if (pre != null) {
          pre.run();
        }
        if (tasks.containsKey(task.getId())) {
          log.info("Retry[%d] for task[%s]",retryPolicy.getNumRetries(),task.getId());
          if (!assignTask(taskWrapper)) {
            throw new ISE("Unable to find worker to send retry request to for task[%s]",task.getId());
          }
        }
      }
 catch (      Exception e) {
        retryTask(null,taskWrapper);
      }
    }
  }
,retryPolicy.getAndIncrementRetryDelay(),TimeUnit.MILLISECONDS);
}

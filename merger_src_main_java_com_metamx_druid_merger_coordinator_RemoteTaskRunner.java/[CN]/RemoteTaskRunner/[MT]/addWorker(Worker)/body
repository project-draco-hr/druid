{
  try {
    final String workerStatusPath=JOINER.join(config.getStatusPath(),worker.getHost());
    final PathChildrenCache statusCache=new PathChildrenCache(cf,workerStatusPath,true);
    final ZkWorker zkWorker=new ZkWorker(worker,statusCache,jsonMapper);
    statusCache.getListenable().addListener(new PathChildrenCacheListener(){
      @Override public void childEvent(      CuratorFramework client,      PathChildrenCacheEvent event) throws Exception {
        log.info("Event: %s",event.getType());
        if (event.getData() != null) {
          log.info("Data: %s",event.getData().getPath());
        }
        try {
          if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED) || event.getType().equals(PathChildrenCacheEvent.Type.CHILD_UPDATED)) {
            final String taskId=ZKPaths.getNodeFromPath(event.getData().getPath());
            final TaskStatus taskStatus;
            try {
              taskStatus=jsonMapper.readValue(event.getData().getData(),TaskStatus.class);
              if (!taskStatus.getId().equals(taskId)) {
                throw new ISE("Worker[%s] status id does not match payload id: %s != %s",worker.getHost(),taskId,taskStatus.getId());
              }
            }
 catch (            Exception e) {
              log.warn(e,"Worker[%s] wrote bogus status for task: %s",worker.getHost(),taskId);
              retryTask(runningTasks.get(taskId),worker.getHost());
              throw Throwables.propagate(e);
            }
            log.info("Worker[%s] wrote %s status for task: %s",worker.getHost(),taskStatus.getStatusCode(),taskId);
synchronized (statusLock) {
              statusLock.notify();
            }
            final TaskRunnerWorkItem taskRunnerWorkItem=runningTasks.get(taskId);
            if (taskRunnerWorkItem == null) {
              log.warn("WTF?! Worker[%s] announcing a status for a task I didn't know about: %s",worker.getHost(),taskId);
            }
            if (taskStatus.isComplete()) {
              if (taskRunnerWorkItem != null) {
                final TaskCallback callback=taskRunnerWorkItem.getCallback();
                if (callback != null) {
                  callback.notify(taskStatus);
                }
              }
              zkWorker.setLastCompletedTaskTime(new DateTime());
              cleanup(worker.getHost(),taskId);
              runPendingTasks();
            }
          }
 else           if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)) {
            final String taskId=ZKPaths.getNodeFromPath(event.getData().getPath());
            if (runningTasks.containsKey(taskId)) {
              log.info("Task %s just disappeared!",taskId);
              retryTask(runningTasks.get(taskId),worker.getHost());
            }
 else {
              log.info("Lost a task I didn't know about: %s",taskId);
            }
          }
        }
 catch (        Exception e) {
          log.makeAlert(e,"Failed to handle new worker status").addData("worker",worker.getHost()).addData("znode",event.getData().getPath()).emit();
        }
      }
    }
);
    zkWorkers.put(worker.getHost(),zkWorker);
    statusCache.start();
    runPendingTasks();
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}

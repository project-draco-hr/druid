{
  try {
    currentlyProvisioning.remove(worker.getHost());
    final String workerStatusPath=JOINER.join(config.getStatusPath(),worker.getHost());
    final PathChildrenCache statusCache=new PathChildrenCache(cf,workerStatusPath,true);
    final ConcurrentSkipListSet<String> runningTasks=new ConcurrentSkipListSet<String>(Lists.transform(statusCache.getCurrentData(),new Function<ChildData,String>(){
      @Override public String apply(      @Nullable ChildData input){
        try {
          return jsonMapper.readValue(input.getData(),TaskStatus.class).getId();
        }
 catch (        Exception e) {
          throw Throwables.propagate(e);
        }
      }
    }
));
    final WorkerWrapper workerWrapper=new WorkerWrapper(worker,runningTasks,statusCache);
    statusCache.getListenable().addListener(new PathChildrenCacheListener(){
      @Override public void childEvent(      CuratorFramework client,      PathChildrenCacheEvent event) throws Exception {
synchronized (statusLock) {
          String taskId=null;
          try {
            if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)) {
              TaskStatus taskStatus=jsonMapper.readValue(event.getData().getData(),TaskStatus.class);
              taskId=taskStatus.getId();
              log.info("New status[%s] appeared!",taskId);
              runningTasks.add(taskId);
              statusLock.notify();
            }
 else             if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_UPDATED)) {
              String statusPath=event.getData().getPath();
              TaskStatus taskStatus=jsonMapper.readValue(event.getData().getData(),TaskStatus.class);
              taskId=taskStatus.getId();
              log.info("Task[%s] updated status[%s]!",taskId,taskStatus.getStatusCode());
              if (taskStatus.isComplete()) {
                workerWrapper.setLastCompletedTaskTime(new DateTime());
                TaskWrapper taskWrapper=tasks.get(taskId);
                if (taskWrapper == null) {
                  log.warn("A task completed that I didn't know about? WTF?!");
                }
 else {
                  TaskCallback callback=taskWrapper.getCallback();
                  if (callback != null) {
                    callback.notify(taskStatus);
                  }
                  tasks.remove(taskId);
                  runningTasks.remove(taskId);
                  cf.delete().guaranteed().forPath(statusPath);
                }
              }
            }
          }
 catch (          Exception e) {
            retryTask(new CleanupPaths(worker.getHost(),taskId),tasks.get(taskId));
          }
        }
      }
    }
);
    zkWorkers.put(worker.getHost(),workerWrapper);
    statusCache.start();
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}

{
  try {
    workerPathCache.getListenable().addListener(new PathChildrenCacheListener(){
      @Override public void childEvent(      CuratorFramework client,      final PathChildrenCacheEvent event) throws Exception {
        if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)) {
          final Worker worker=jsonMapper.readValue(event.getData().getData(),Worker.class);
          log.info("New worker[%s] found!",worker.getHost());
          addWorker(worker);
        }
 else         if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)) {
          final Worker worker=jsonMapper.readValue(event.getData().getData(),Worker.class);
          log.info("Worker[%s] removed!",worker.getHost());
          removeWorker(worker);
        }
      }
    }
);
    workerPathCache.start();
    Period period=new Period(config.getTerminateResourcesDuration());
    PeriodGranularity granularity=new PeriodGranularity(period,config.getTerminateResourcesOriginDateTime(),null);
    final long startTime=granularity.next(granularity.truncate(new DateTime().getMillis()));
    ScheduledExecutors.scheduleAtFixedRate(scheduledExec,new Duration(System.currentTimeMillis(),startTime),config.getTerminateResourcesDuration(),new Runnable(){
      @Override public void run(){
        if (currentlyTerminating.isEmpty()) {
          if (zkWorkers.size() <= workerSetupManager.getWorkerSetupData().getMinNumWorkers()) {
            return;
          }
          int workerCount=0;
          List<WorkerWrapper> thoseLazyWorkers=Lists.newArrayList();
          for (          WorkerWrapper workerWrapper : zkWorkers.values()) {
            workerCount++;
            if (workerCount > workerSetupManager.getWorkerSetupData().getMinNumWorkers() && workerWrapper.getRunningTasks().isEmpty() && System.currentTimeMillis() - workerWrapper.getLastCompletedTaskTime().getMillis() > config.getMaxWorkerIdleTimeMillisBeforeDeletion()) {
              thoseLazyWorkers.add(workerWrapper);
            }
          }
          AutoScalingData terminated=strategy.terminate(Lists.transform(thoseLazyWorkers,new Function<WorkerWrapper,String>(){
            @Override public String apply(            WorkerWrapper input){
              return input.getWorker().getIp();
            }
          }
));
          if (terminated != null) {
            currentlyTerminating.addAll(terminated.getNodeIds());
            lastTerminateTime=new DateTime();
          }
        }
 else {
          Duration durSinceLastTerminate=new Duration(new DateTime(),lastTerminateTime);
          if (durSinceLastTerminate.isLongerThan(config.getMaxScalingDuration())) {
            log.makeAlert("Worker node termination taking too long").addData("millisSinceLastTerminate",durSinceLastTerminate.getMillis()).addData("terminatingCount",currentlyTerminating.size()).emit();
          }
          log.info("%s still terminating. Wait for all nodes to terminate before trying again.",currentlyTerminating);
        }
      }
    }
);
    started=true;
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}

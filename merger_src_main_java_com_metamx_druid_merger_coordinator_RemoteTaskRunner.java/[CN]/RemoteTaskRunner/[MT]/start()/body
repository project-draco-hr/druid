{
  try {
    workerListener.start();
    workerListener.getListenable().addListener(new PathChildrenCacheListener(){
      @Override public void childEvent(      CuratorFramework client,      final PathChildrenCacheEvent event) throws Exception {
        if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)) {
          final Worker worker=jsonMapper.readValue(cf.getData().forPath(event.getData().getPath()),Worker.class);
          log.info("New worker[%s] found!",worker.getHost());
          addWorker(worker);
        }
 else         if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)) {
          String workerHost=event.getData().getPath().substring(event.getData().getPath().lastIndexOf("/") + 1);
          log.info("Worker[%s] removed!",workerHost);
          removeWorker(workerHost);
        }
      }
    }
);
    Period period=new Period(config.getTerminateResourcesPeriodMs());
    PeriodGranularity granularity=new PeriodGranularity(period,null,null);
    final long truncatedNow=granularity.truncate(new DateTime().getMillis());
    ScheduledExecutors.scheduleAtFixedRate(scheduledExec,new Duration(System.currentTimeMillis(),granularity.next(truncatedNow) - config.getTerminateResourcesWindowMs()),new Duration(config.getTerminateResourcesPeriodMs()),new Runnable(){
      @Override public void run(){
        strategy.terminateIfNeeded(zkWorkers);
      }
    }
);
    started=true;
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}

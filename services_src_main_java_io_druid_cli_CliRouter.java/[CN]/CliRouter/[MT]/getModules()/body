{
  return ImmutableList.of(new JettyHttpClientModule("druid.router.http",Router.class),new Module(){
    @Override public void configure(    Binder binder){
      binder.bindConstant().annotatedWith(Names.named("serviceName")).to("druid/router");
      binder.bindConstant().annotatedWith(Names.named("servicePort")).to(8888);
      JsonConfigProvider.bind(binder,"druid.router",TieredBrokerConfig.class);
      binder.bind(CoordinatorRuleManager.class);
      LifecycleModule.register(binder,CoordinatorRuleManager.class);
      binder.bind(TieredBrokerHostSelector.class).in(ManageLifecycle.class);
      binder.bind(QueryHostFinder.class).in(LazySingleton.class);
      binder.bind(new TypeLiteral<List<TieredBrokerSelectorStrategy>>(){
      }
).toProvider(TieredBrokerSelectorStrategiesProvider.class).in(LazySingleton.class);
      binder.bind(JettyServerInitializer.class).to(RouterJettyServerInitializer.class).in(LazySingleton.class);
      LifecycleModule.register(binder,Server.class);
      DiscoveryModule.register(binder,Self.class);
    }
    @Provides @ManageLifecycle public ServerDiscoverySelector getCoordinatorServerDiscoverySelector(    TieredBrokerConfig config,    ServerDiscoveryFactory factory){
      return factory.createSelector(config.getCoordinatorServiceName());
    }
  }
,new LookupModule());
}

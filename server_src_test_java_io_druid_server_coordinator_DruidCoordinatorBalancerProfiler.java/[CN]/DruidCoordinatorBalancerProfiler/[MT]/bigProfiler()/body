{
  Stopwatch watch=new Stopwatch();
  int numSegments=55000;
  int numServers=50;
  EasyMock.expect(manager.getAllRules()).andReturn(ImmutableMap.<String,List<Rule>>of("test",rules)).anyTimes();
  EasyMock.expect(manager.getRules(EasyMock.<String>anyObject())).andReturn(rules).anyTimes();
  EasyMock.expect(manager.getRulesWithDefault(EasyMock.<String>anyObject())).andReturn(rules).anyTimes();
  EasyMock.replay(manager);
  coordinator.moveSegment(EasyMock.<ImmutableDruidServer>anyObject(),EasyMock.<ImmutableDruidServer>anyObject(),EasyMock.<String>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().anyTimes();
  EasyMock.replay(coordinator);
  List<DruidServer> serverList=Lists.newArrayList();
  Map<String,LoadQueuePeon> peonMap=Maps.newHashMap();
  List<ServerHolder> serverHolderList=Lists.newArrayList();
  Map<String,DataSegment> segmentMap=Maps.newHashMap();
  for (int i=0; i < numSegments; i++) {
    segmentMap.put("segment" + i,new DataSegment("datasource" + i,new Interval(new DateTime("2012-01-01"),(new DateTime("2012-01-01")).plusHours(1)),(new DateTime("2012-03-01")).toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),0,4L));
  }
  for (int i=0; i < numServers; i++) {
    ImmutableDruidServer server=EasyMock.createMock(ImmutableDruidServer.class);
    EasyMock.expect(server.getMetadata()).andReturn(null).anyTimes();
    EasyMock.expect(server.getCurrSize()).andReturn(30L).atLeastOnce();
    EasyMock.expect(server.getMaxSize()).andReturn(100L).atLeastOnce();
    EasyMock.expect(server.getTier()).andReturn("normal").anyTimes();
    EasyMock.expect(server.getName()).andReturn(Integer.toString(i)).atLeastOnce();
    EasyMock.expect(server.getHost()).andReturn(Integer.toString(i)).anyTimes();
    if (i == 0) {
      EasyMock.expect(server.getSegments()).andReturn(segmentMap).anyTimes();
    }
 else {
      EasyMock.expect(server.getSegments()).andReturn(new HashMap<String,DataSegment>()).anyTimes();
    }
    EasyMock.expect(server.getSegment(EasyMock.<String>anyObject())).andReturn(null).anyTimes();
    EasyMock.replay(server);
    LoadQueuePeon peon=new LoadQueuePeonTester();
    peonMap.put(Integer.toString(i),peon);
    serverHolderList.add(new ServerHolder(server,peon));
  }
  DruidCoordinatorRuntimeParams params=DruidCoordinatorRuntimeParams.newBuilder().withDruidCluster(new DruidCluster(ImmutableMap.<String,MinMaxPriorityQueue<ServerHolder>>of("normal",MinMaxPriorityQueue.orderedBy(DruidCoordinatorBalancerTester.percentUsedComparator).create(serverHolderList)))).withLoadManagementPeons(peonMap).withAvailableSegments(segmentMap.values()).withDynamicConfigs(new CoordinatorDynamicConfig.Builder().withMaxSegmentsToMove(MAX_SEGMENTS_TO_MOVE).withReplicantLifetime(500).withReplicationThrottleLimit(5).build()).withBalancerReferenceTimestamp(new DateTime("2013-01-01")).withEmitter(emitter).withDatabaseRuleManager(manager).withReplicationManager(new ReplicationThrottler(2,500)).withSegmentReplicantLookup(SegmentReplicantLookup.make(new DruidCluster(ImmutableMap.<String,MinMaxPriorityQueue<ServerHolder>>of("normal",MinMaxPriorityQueue.orderedBy(DruidCoordinatorBalancerTester.percentUsedComparator).create(serverHolderList))))).build();
  DruidCoordinatorBalancerTester tester=new DruidCoordinatorBalancerTester(coordinator);
  DruidCoordinatorRuleRunner runner=new DruidCoordinatorRuleRunner(coordinator);
  watch.start();
  DruidCoordinatorRuntimeParams balanceParams=tester.run(params);
  DruidCoordinatorRuntimeParams assignParams=runner.run(params);
  System.out.println(watch.stop());
}

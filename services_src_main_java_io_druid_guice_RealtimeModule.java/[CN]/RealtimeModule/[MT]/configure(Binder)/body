{
  PolyBind.createChoice(binder,"druid.publish.type",Key.get(SegmentPublisher.class),Key.get(NoopSegmentPublisher.class));
  final MapBinder<String,SegmentPublisher> publisherBinder=PolyBind.optionBinder(binder,Key.get(SegmentPublisher.class));
  publisherBinder.addBinding("db").to(DbSegmentPublisher.class);
  binder.bind(DbSegmentPublisher.class).in(LazySingleton.class);
  JsonConfigProvider.bind(binder,"druid.realtime",RealtimeManagerConfig.class);
  binder.bind(new TypeLiteral<List<FireDepartment>>(){
  }
).toProvider(FireDepartmentsProvider.class).in(LazySingleton.class);
  binder.bind(QuerySegmentWalker.class).to(RealtimeManager.class).in(ManageLifecycle.class);
  binder.bind(NodeTypeConfig.class).toInstance(new NodeTypeConfig("realtime"));
  binder.bind(JettyServerInitializer.class).to(QueryJettyServerInitializer.class).in(LazySingleton.class);
  LifecycleModule.register(binder,Server.class);
}

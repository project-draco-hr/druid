{
  LogLevelAdjuster.register();
  Lifecycle lifecycle=new Lifecycle();
  RealtimeNode rn=RealtimeNode.builder().build();
  lifecycle.addManagedInstance(rn);
  SegmentAnnouncer dummySegmentAnnouncer=new SegmentAnnouncer(){
    @Override public void announceSegment(    DataSegment segment) throws IOException {
    }
    @Override public void unannounceSegment(    DataSegment segment) throws IOException {
    }
  }
;
  SegmentPublisher dummySegmentPublisher=new SegmentPublisher(){
    @Override public void publishSegment(    DataSegment segment) throws IOException {
    }
  }
;
  rn.setSegmentAnnouncer(dummySegmentAnnouncer);
  rn.setSegmentPublisher(dummySegmentPublisher);
  rn.setDataSegmentPusher(new DataSegmentPusher(){
    @Override public DataSegment push(    File file,    DataSegment segment) throws IOException {
      return segment;
    }
  }
);
  rn.registerJacksonSubtype(new NamedType(RandomFirehoseFactory.class,"rand"));
  try {
    lifecycle.start();
  }
 catch (  Throwable t) {
    log.info(t,"Throwable caught at startup, committing seppuku");
    t.printStackTrace();
    System.exit(2);
  }
  lifecycle.join();
}

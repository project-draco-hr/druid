{
  DateTimeZone tz=DateTimeZone.forID("America/Los_Angeles");
  GroupByQuery query=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval("2011-03-31T00:00:00-07:00/2011-04-02T00:00:00-07:00").setDimensions(Lists.newArrayList((DimensionSpec)new DefaultDimensionSpec("quality","alias"))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).setGranularity(new PeriodGranularity(new Period("P1D"),null,tz)).build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-03-31",tz),"alias","automotive","rows",1L,"idx",135L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-03-31",tz),"alias","business","rows",1L,"idx",118L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-03-31",tz),"alias","entertainment","rows",1L,"idx",158L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-03-31",tz),"alias","health","rows",1L,"idx",120L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-03-31",tz),"alias","mezzanine","rows",3L,"idx",2870L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-03-31",tz),"alias","news","rows",1L,"idx",121L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-03-31",tz),"alias","premium","rows",3L,"idx",2900L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-03-31",tz),"alias","technology","rows",1L,"idx",78L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-03-31",tz),"alias","travel","rows",1L,"idx",119L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-04-01",tz),"alias","automotive","rows",1L,"idx",147L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-04-01",tz),"alias","business","rows",1L,"idx",112L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-04-01",tz),"alias","entertainment","rows",1L,"idx",166L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-04-01",tz),"alias","health","rows",1L,"idx",113L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-04-01",tz),"alias","mezzanine","rows",3L,"idx",2447L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-04-01",tz),"alias","news","rows",1L,"idx",114L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-04-01",tz),"alias","premium","rows",3L,"idx",2505L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-04-01",tz),"alias","technology","rows",1L,"idx",97L),GroupByQueryRunnerTestHelper.createExpectedRow(new DateTime("2011-04-01",tz),"alias","travel","rows",1L,"idx",126L));
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

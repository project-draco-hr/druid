{
  GroupByQuery.Builder builder=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval("2011-04-02/2011-04-04").addDimension("billy").addDimension("quality").setAggregatorSpecs(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount)).setGranularity(new PeriodGranularity(new Period("P1M"),null,null));
  final GroupByQuery query=builder.build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","automotive","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","business","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","entertainment","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","health","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","mezzanine","rows",6L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","news","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","premium","rows",6L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","technology","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","travel","rows",2L));
  TestHelper.assertExpectedObjects(expectedResults,runner.run(query),"normal");
  final GroupByQueryEngine engine=new GroupByQueryEngine(configSupplier,new StupidPool<ByteBuffer>(new Supplier<ByteBuffer>(){
    @Override public ByteBuffer get(){
      return ByteBuffer.allocate(1024 * 1024);
    }
  }
));
  QueryRunner<Row> mergeRunner=new GroupByQueryQueryToolChest(configSupplier,new DefaultObjectMapper(),engine).mergeResults(runner);
  TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(query),"no-limit");
}

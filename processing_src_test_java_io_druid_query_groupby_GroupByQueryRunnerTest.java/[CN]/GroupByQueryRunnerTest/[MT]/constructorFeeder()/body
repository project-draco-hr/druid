{
  final ObjectMapper mapper=new DefaultObjectMapper();
  final StupidPool<ByteBuffer> pool=new StupidPool<ByteBuffer>(new Supplier<ByteBuffer>(){
    @Override public ByteBuffer get(){
      return ByteBuffer.allocate(1024 * 1024);
    }
  }
);
  final GroupByQueryConfig config=new GroupByQueryConfig();
  config.setMaxIntermediateRows(10000);
  final Supplier<GroupByQueryConfig> configSupplier=Suppliers.ofInstance(config);
  final GroupByQueryEngine engine=new GroupByQueryEngine(configSupplier,pool);
  final GroupByQueryRunnerFactory factory=new GroupByQueryRunnerFactory(engine,QueryRunnerTestHelper.NOOP_QUERYWATCHER,configSupplier,new GroupByQueryQueryToolChest(configSupplier,mapper,engine,TestQueryRunners.pool),TestQueryRunners.pool);
  GroupByQueryConfig singleThreadedConfig=new GroupByQueryConfig(){
    @Override public boolean isSingleThreaded(){
      return true;
    }
  }
;
  singleThreadedConfig.setMaxIntermediateRows(10000);
  final Supplier<GroupByQueryConfig> singleThreadedConfigSupplier=Suppliers.ofInstance(singleThreadedConfig);
  final GroupByQueryEngine singleThreadEngine=new GroupByQueryEngine(singleThreadedConfigSupplier,pool);
  final GroupByQueryRunnerFactory singleThreadFactory=new GroupByQueryRunnerFactory(singleThreadEngine,QueryRunnerTestHelper.NOOP_QUERYWATCHER,singleThreadedConfigSupplier,new GroupByQueryQueryToolChest(singleThreadedConfigSupplier,mapper,singleThreadEngine,pool),pool);
  Function<Object,Object> function=new Function<Object,Object>(){
    @Override public Object apply(    @Nullable Object input){
      return new Object[]{factory,((Object[])input)[0]};
    }
  }
;
  return Lists.newArrayList(Iterables.concat(Iterables.transform(QueryRunnerTestHelper.makeQueryRunners(factory),function),Iterables.transform(QueryRunnerTestHelper.makeQueryRunners(singleThreadFactory),function)));
}

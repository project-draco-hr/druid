{
  GroupByQuery query=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("placementish","alias"))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).setGranularity(QueryRunnerTestHelper.allGran).build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","a","rows",2L,"idx",282L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","b","rows",2L,"idx",230L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","e","rows",2L,"idx",324L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","h","rows",2L,"idx",233L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","m","rows",6L,"idx",5317L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","n","rows",2L,"idx",235L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","p","rows",6L,"idx",5405L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","preferred","rows",26L,"idx",12446L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","t","rows",4L,"idx",420L));
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

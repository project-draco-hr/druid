{
  final GroupByQuery subquery=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.fullOnInterval).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("quality","alias"))).setGranularity(QueryRunnerTestHelper.dayGran).setLimitSpec(new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec("alias",OrderByColumnSpec.Direction.ASCENDING)),null)).build();
  final GroupByQuery query=GroupByQuery.builder().setDataSource(subquery).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList()).setAggregatorSpecs(ImmutableList.<AggregatorFactory>of(new CountAggregatorFactory("count"))).setGranularity(QueryRunnerTestHelper.allGran).build();
  if (config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)) {
    expectedException.expect(ISE.class);
    expectedException.expectMessage("Unknown column in order clause");
    GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  }
 else {
    List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","count",18L));
    Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
    TestHelper.assertExpectedObjects(expectedResults,results,"");
  }
}

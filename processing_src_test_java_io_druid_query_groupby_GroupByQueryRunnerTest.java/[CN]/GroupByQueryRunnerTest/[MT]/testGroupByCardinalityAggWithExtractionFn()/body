{
  String helloJsFn="function(str) { return 'hello' }";
  ExtractionFn helloFn=new JavaScriptExtractionFn(helloJsFn,false,JavaScriptConfig.getDefault());
  GroupByQuery query=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("market","alias"))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new CardinalityAggregatorFactory("numVals",ImmutableList.<DimensionSpec>of(new ExtractionDimensionSpec(QueryRunnerTestHelper.qualityDimension,QueryRunnerTestHelper.qualityDimension,helloFn)),false))).setGranularity(QueryRunnerTestHelper.dayGran).build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","spot","rows",9L,"numVals",1.0002442201269182d),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","total_market","rows",2L,"numVals",1.0002442201269182d),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","upfront","rows",2L,"numVals",1.0002442201269182d),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","spot","rows",9L,"numVals",1.0002442201269182d),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","total_market","rows",2L,"numVals",1.0002442201269182d),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","upfront","rows",2L,"numVals",1.0002442201269182d));
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

{
  GroupByQuery.Builder builder=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval("2011-04-02/2011-04-04").setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("quality","alias"))).setAggregatorSpecs(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index",null))).addOrderByColumn("rows").addOrderByColumn("alias",OrderByColumnSpec.Direction.DESCENDING).setGranularity(new PeriodGranularity(new Period("P1M"),null,null));
  final GroupByQuery query=builder.build();
  List<Row> expectedResults=Arrays.asList(createExpectedRow("2011-04-01","alias","travel","rows",2L,"idx",243L),createExpectedRow("2011-04-01","alias","technology","rows",2L,"idx",177L),createExpectedRow("2011-04-01","alias","news","rows",2L,"idx",221L),createExpectedRow("2011-04-01","alias","health","rows",2L,"idx",216L),createExpectedRow("2011-04-01","alias","entertainment","rows",2L,"idx",319L),createExpectedRow("2011-04-01","alias","business","rows",2L,"idx",217L),createExpectedRow("2011-04-01","alias","automotive","rows",2L,"idx",269L),createExpectedRow("2011-04-01","alias","premium","rows",6L,"idx",4416L),createExpectedRow("2011-04-01","alias","mezzanine","rows",6L,"idx",4420L));
  QueryRunner<Row> mergeRunner=factory.getToolchest().mergeResults(runner);
  HashMap<String,Object> context=new HashMap<String,Object>();
  TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(query,context),"no-limit");
  TestHelper.assertExpectedObjects(Iterables.limit(expectedResults,5),mergeRunner.run(builder.limit(5).build(),context),"limited");
}

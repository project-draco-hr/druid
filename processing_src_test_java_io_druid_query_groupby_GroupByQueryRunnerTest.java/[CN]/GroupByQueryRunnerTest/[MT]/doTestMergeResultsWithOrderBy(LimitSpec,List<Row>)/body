{
  GroupByQuery.Builder builder=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval("2011-04-02/2011-04-04").setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("quality","alias"))).setAggregatorSpecs(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).setGranularity(new PeriodGranularity(new Period("P1M"),null,null)).setLimitSpec(orderBySpec);
  final GroupByQuery fullQuery=builder.build();
  QueryRunner mergedRunner=factory.getToolchest().mergeResults(new QueryRunner<Row>(){
    @Override public Sequence run(    Query<Row> query,    Map<String,List> metadata){
      final Query query1=query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(Lists.newArrayList(new Interval("2011-04-02/2011-04-03"))));
      final Query query2=query.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(Lists.newArrayList(new Interval("2011-04-03/2011-04-04"))));
      return Sequences.concat(runner.run(query1,metadata),runner.run(query2,metadata));
    }
  }
);
  HashMap<String,List> metadata=new HashMap<String,List>();
  TestHelper.assertExpectedObjects(expectedResults,mergedRunner.run(fullQuery,metadata),"merged");
}

{
  GroupByQuery query=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimFilter(new SelectorDimFilter("placementish","a",null)).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("placementish","alias"),new DefaultDimensionSpec("placementish","alias2"))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).setGranularity(QueryRunnerTestHelper.allGran).build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","a","alias2","a","rows",2L,"idx",282L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","a","alias2","preferred","rows",2L,"idx",282L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","preferred","alias2","a","rows",2L,"idx",282L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","preferred","alias2","preferred","rows",2L,"idx",282L));
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

{
  Map<String,String> extractionMap=new HashMap<>();
  extractionMap.put("automotive","automotive0");
  extractionMap.put("business","business0");
  extractionMap.put("entertainment","entertainment0");
  extractionMap.put("health","health0");
  extractionMap.put("mezzanine","mezzanineANDnews");
  extractionMap.put("news","mezzanineANDnews");
  extractionMap.put("premium","premium0");
  extractionMap.put("technology","technology0");
  extractionMap.put("travel","travel0");
  MapLookupExtractor mapLookupExtractor=new MapLookupExtractor(extractionMap);
  LookupExtractionFn lookupExtractionFn=new LookupExtractionFn(mapLookupExtractor,false,"missing",true,false);
  DimFilter filter=new ExtractionDimFilter("quality","mezzanineANDnews",lookupExtractionFn,null);
  GroupByQuery query=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("quality","alias"))).setAggregatorSpecs(Arrays.asList(new FilteredAggregatorFactory(QueryRunnerTestHelper.rowsCount,filter),(AggregatorFactory)new FilteredAggregatorFactory(new LongSumAggregatorFactory("idx","index"),filter))).setGranularity(QueryRunnerTestHelper.dayGran).build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","automotive","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","business","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","entertainment","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","health","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","mezzanine","rows",3L,"idx",2870L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","news","rows",1L,"idx",121L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","premium","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","technology","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","travel","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","automotive","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","business","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","entertainment","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","health","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","mezzanine","rows",3L,"idx",2447L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","news","rows",1L,"idx",114L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","premium","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","technology","rows",0L,"idx",0L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","travel","rows",0L,"idx",0L));
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

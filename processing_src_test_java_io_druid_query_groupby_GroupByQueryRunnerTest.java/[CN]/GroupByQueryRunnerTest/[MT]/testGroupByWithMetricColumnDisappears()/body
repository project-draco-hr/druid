{
  GroupByQuery.Builder builder=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setInterval("2011-04-02/2011-04-04").addDimension("quality").addDimension("index").setAggregatorSpecs(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount)).setGranularity(new PeriodGranularity(new Period("P1M"),null,null));
  final GroupByQuery query=builder.build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","index",null,"quality","automotive","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","index",null,"quality","business","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","index",null,"quality","entertainment","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","index",null,"quality","health","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","index",null,"quality","mezzanine","rows",6L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","index",null,"quality","news","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","index",null,"quality","premium","rows",6L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","index",null,"quality","technology","rows",2L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","index",null,"quality","travel","rows",2L));
  Map<String,Object> context=Maps.newHashMap();
  QueryRunner<Row> mergeRunner=factory.getToolchest().mergeResults(runner);
  TestHelper.assertExpectedObjects(expectedResults,mergeRunner.run(query,context),"no-limit");
}

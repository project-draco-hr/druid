{
  final GroupByQuery subquery=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("quality","alias"))).setDimFilter(new JavaScriptDimFilter("market","function(dim){ return true; }",null)).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new DoubleSumAggregatorFactory("idx_subagg","index"),new JavaScriptAggregatorFactory("js_agg",Arrays.asList("index","market"),"function(current, index, dim){return current + index + dim.length;}","function(){return 0;}","function(a,b){return a + b;}"))).setPostAggregatorSpecs(Arrays.<PostAggregator>asList(new ArithmeticPostAggregator("idx_subpostagg","+",Arrays.asList(new FieldAccessPostAggregator("the_idx_subagg","idx_subagg"),new ConstantPostAggregator("thousand",1000))))).setHavingSpec(new HavingSpec(){
    @Override public boolean eval(    Row row){
      return (row.getFloatMetric("idx_subpostagg") < 3800);
    }
    @Override public byte[] getCacheKey(){
      return new byte[0];
    }
  }
).addOrderByColumn("alias").setGranularity(QueryRunnerTestHelper.dayGran).build();
  final GroupByQuery query=GroupByQuery.builder().setDataSource(subquery).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("alias","alias"))).setAggregatorSpecs(Arrays.asList(new LongSumAggregatorFactory("rows","rows"),new LongSumAggregatorFactory("idx","idx_subpostagg"),new DoubleSumAggregatorFactory("js_outer_agg","js_agg"))).setPostAggregatorSpecs(Arrays.<PostAggregator>asList(new ArithmeticPostAggregator("idx_post","+",Arrays.asList(new FieldAccessPostAggregator("the_idx_agg","idx"),new ConstantPostAggregator("ten_thousand",10000))))).setLimitSpec(new DefaultLimitSpec(Arrays.asList(new OrderByColumnSpec("alias",OrderByColumnSpec.Direction.DESCENDING)),5)).setGranularity(QueryRunnerTestHelper.dayGran).build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","travel","rows",1L,"idx_post",11119.0,"idx",1119L,"js_outer_agg",123.92274475097656),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","technology","rows",1L,"idx_post",11078.0,"idx",1078L,"js_outer_agg",82.62254333496094),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","news","rows",1L,"idx_post",11121.0,"idx",1121L,"js_outer_agg",125.58358001708984),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","health","rows",1L,"idx_post",11120.0,"idx",1120L,"js_outer_agg",124.13470458984375),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","entertainment","rows",1L,"idx_post",11158.0,"idx",1158L,"js_outer_agg",162.74722290039062));
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

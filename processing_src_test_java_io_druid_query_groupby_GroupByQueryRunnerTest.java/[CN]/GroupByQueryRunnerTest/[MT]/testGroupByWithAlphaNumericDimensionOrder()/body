{
  Map<String,String> map=new HashMap<>();
  map.put("automotive","health105");
  map.put("business","health20");
  map.put("entertainment","travel47");
  map.put("health","health55");
  map.put("mezzanine","health09");
  map.put("news","health0000");
  map.put("premium","health999");
  map.put("technology","travel123");
  map.put("travel","travel555");
  GroupByQuery query=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new ExtractionDimensionSpec("quality","alias",new LookupExtractionFn(new MapLookupExtractor(map),false,null,false,false),null))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).setLimitSpec(new DefaultLimitSpec(Lists.<OrderByColumnSpec>newArrayList(new OrderByColumnSpec("alias",null,StringComparators.ALPHANUMERIC)),null)).setGranularity(QueryRunnerTestHelper.dayGran).build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","health0000","rows",1L,"idx",121L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","health09","rows",3L,"idx",2870L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","health20","rows",1L,"idx",118L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","health55","rows",1L,"idx",120L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","health105","rows",1L,"idx",135L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","health999","rows",3L,"idx",2900L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","travel47","rows",1L,"idx",158L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","travel123","rows",1L,"idx",78L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","travel555","rows",1L,"idx",119L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","health0000","rows",1L,"idx",114L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","health09","rows",3L,"idx",2447L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","health20","rows",1L,"idx",112L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","health55","rows",1L,"idx",113L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","health105","rows",1L,"idx",147L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","health999","rows",3L,"idx",2505L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","travel47","rows",1L,"idx",166L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","travel123","rows",1L,"idx",97L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","travel555","rows",1L,"idx",126L));
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

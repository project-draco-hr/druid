{
  final GroupByQuery subquery=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("market","market"),new DefaultDimensionSpec("quality","quality"))).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("index","index"))).setGranularity(QueryRunnerTestHelper.dayGran).build();
  final GroupByQuery query=GroupByQuery.builder().setDataSource(subquery).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("quality","quality"))).setAggregatorSpecs(Arrays.<AggregatorFactory>asList(new JavaScriptAggregatorFactory("js_agg",Arrays.asList("index","market"),"function(current, index, dim){return current + index + dim.length;}","function(){return 0;}","function(a,b){return a + b;}",JavaScriptConfig.getDefault()))).setGranularity(QueryRunnerTestHelper.dayGran).build();
  if (config.getDefaultStrategy().equals(GroupByStrategySelector.STRATEGY_V1)) {
    expectedException.expect(IAE.class);
    GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  }
 else {
    List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","automotive","js_agg",139D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","business","js_agg",122D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","entertainment","js_agg",162D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","health","js_agg",124D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","mezzanine","js_agg",2893D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","news","js_agg",125D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","premium","js_agg",2923D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","technology","js_agg",82D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","quality","travel","js_agg",123D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","quality","automotive","js_agg",151D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","quality","business","js_agg",116D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","quality","entertainment","js_agg",170D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","quality","health","js_agg",117D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","quality","mezzanine","js_agg",2470D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","quality","news","js_agg",118D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","quality","premium","js_agg",2528D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","quality","technology","js_agg",101D),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","quality","travel","js_agg",130D));
    Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
    TestHelper.assertExpectedObjects(expectedResults,results,"");
  }
}

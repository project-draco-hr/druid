{
  final GroupByQuery subquery=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("quality","alias"))).setDimFilter(new JavaScriptDimFilter("quality","function(dim){ return true; }")).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx_subagg","index"))).setPostAggregatorSpecs(Arrays.<PostAggregator>asList(new ArithmeticPostAggregator("idx_subpostagg","+",Arrays.asList(new FieldAccessPostAggregator("the_idx_subagg","idx_subagg"),new ConstantPostAggregator("thousand",1000))))).setHavingSpec(new HavingSpec(){
    @Override public boolean eval(    Row row){
      return (row.getFloatMetric("idx_subpostagg") < 3800);
    }
    @Override public byte[] getCacheKey(){
      return new byte[0];
    }
  }
).addOrderByColumn("alias").setGranularity(QueryRunnerTestHelper.dayGran).build();
  final GroupByQuery query=GroupByQuery.builder().setDataSource(subquery).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("alias","alias"))).setAggregatorSpecs(Arrays.<AggregatorFactory>asList(new LongSumAggregatorFactory("rows","rows"),new LongSumAggregatorFactory("idx","idx_subpostagg"))).setPostAggregatorSpecs(Arrays.<PostAggregator>asList(new ArithmeticPostAggregator("idx","+",Arrays.asList(new FieldAccessPostAggregator("the_idx_agg","idx"),new ConstantPostAggregator("ten_thousand",10000))))).setGranularity(QueryRunnerTestHelper.dayGran).build();
  List<Row> expectedResults=Arrays.asList(createExpectedRow("2011-04-01","alias","automotive","rows",1L,"idx",11135.0),createExpectedRow("2011-04-01","alias","business","rows",1L,"idx",11118.0),createExpectedRow("2011-04-01","alias","entertainment","rows",1L,"idx",11158.0),createExpectedRow("2011-04-01","alias","health","rows",1L,"idx",11120.0),createExpectedRow("2011-04-01","alias","news","rows",1L,"idx",11121.0),createExpectedRow("2011-04-01","alias","technology","rows",1L,"idx",11078.0),createExpectedRow("2011-04-01","alias","travel","rows",1L,"idx",11119.0),createExpectedRow("2011-04-02","alias","automotive","rows",1L,"idx",11147.0),createExpectedRow("2011-04-02","alias","business","rows",1L,"idx",11112.0),createExpectedRow("2011-04-02","alias","entertainment","rows",1L,"idx",11166.0),createExpectedRow("2011-04-02","alias","health","rows",1L,"idx",11113.0),createExpectedRow("2011-04-02","alias","mezzanine","rows",3L,"idx",13447.0),createExpectedRow("2011-04-02","alias","news","rows",1L,"idx",11114.0),createExpectedRow("2011-04-02","alias","premium","rows",3L,"idx",13505.0),createExpectedRow("2011-04-02","alias","technology","rows",1L,"idx",11097.0),createExpectedRow("2011-04-02","alias","travel","rows",1L,"idx",11126.0));
  Iterable<Row> results=runQuery(query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

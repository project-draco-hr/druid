{
  GroupByQuery subquery=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("quality","alias"))).setDimFilter(new JavaScriptDimFilter("quality","function(dim){ return true; }")).setAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).setGranularity(QueryRunnerTestHelper.dayGran).build();
  GroupByQuery query=GroupByQuery.builder().setDataSource(subquery).setQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(new Interval("2011-04-01T00:00:00.000Z/2011-04-01T23:58:00.000Z"),new Interval("2011-04-02T00:00:00.000Z/2011-04-03T00:00:00.000Z")))).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("alias","alias"))).setAggregatorSpecs(Arrays.<AggregatorFactory>asList(new LongSumAggregatorFactory("rows","rows"),new LongSumAggregatorFactory("idx","idx"))).setGranularity(QueryRunnerTestHelper.dayGran).build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","automotive","rows",1L,"idx",135L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","business","rows",1L,"idx",118L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","entertainment","rows",1L,"idx",158L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","health","rows",1L,"idx",120L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","mezzanine","rows",3L,"idx",2870L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","news","rows",1L,"idx",121L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","premium","rows",3L,"idx",2900L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","technology","rows",1L,"idx",78L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-01","alias","travel","rows",1L,"idx",119L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","automotive","rows",1L,"idx",147L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","business","rows",1L,"idx",112L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","entertainment","rows",1L,"idx",166L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","health","rows",1L,"idx",113L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","mezzanine","rows",3L,"idx",2447L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","news","rows",1L,"idx",114L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","premium","rows",3L,"idx",2505L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","technology","rows",1L,"idx",97L),GroupByQueryRunnerTestHelper.createExpectedRow("2011-04-02","alias","travel","rows",1L,"idx",126L));
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

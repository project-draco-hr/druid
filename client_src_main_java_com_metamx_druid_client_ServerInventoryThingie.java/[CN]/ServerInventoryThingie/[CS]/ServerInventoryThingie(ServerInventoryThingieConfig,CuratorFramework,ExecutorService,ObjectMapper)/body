{
  inventoryManager=new CuratorInventoryManager<DruidServer,DataSegment>(curator,config,exec,new CuratorInventoryManagerStrategy<DruidServer,DataSegment>(){
    @Override public DruidServer deserializeContainer(    byte[] bytes){
      try {
        return jsonMapper.readValue(bytes,DruidServer.class);
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
    }
    @Override public byte[] serializeContainer(    DruidServer container){
      try {
        return jsonMapper.writeValueAsBytes(container);
      }
 catch (      JsonProcessingException e) {
        throw Throwables.propagate(e);
      }
    }
    @Override public DataSegment deserializeInventory(    byte[] bytes){
      try {
        return jsonMapper.readValue(bytes,DataSegment.class);
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
    }
    @Override public byte[] serializeInventory(    DataSegment inventory){
      try {
        return jsonMapper.writeValueAsBytes(inventory);
      }
 catch (      JsonProcessingException e) {
        throw Throwables.propagate(e);
      }
    }
    @Override public void newContainer(    DruidServer newContainer){
    }
    @Override public void deadContainer(    DruidServer deadContainer){
      runServerCallbacks(deadContainer);
    }
    @Override public DruidServer updateContainer(    DruidServer oldContainer,    DruidServer newContainer){
      return newContainer.addDataSegments(oldContainer);
    }
    @Override public DruidServer addInventory(    final DruidServer container,    String inventoryKey,    final DataSegment inventory){
      runSegmentCallbacks(new Function<SegmentCallback,CallbackAction>(){
        @Override public CallbackAction apply(        SegmentCallback input){
          return input.segmentAdded(container,inventory);
        }
      }
);
      return container.addDataSegment(inventoryKey,inventory);
    }
    @Override public DruidServer removeInventory(    final DruidServer container,    String inventoryKey){
      final DataSegment segment=container.getSegment(inventoryKey);
      runSegmentCallbacks(new Function<SegmentCallback,CallbackAction>(){
        @Override public CallbackAction apply(        SegmentCallback input){
          return input.segmentRemoved(container,segment);
        }
      }
);
      removedSegments.put(inventoryKey,config.getRemovedSegmentLifetime());
      return container.removeDataSegment(inventoryKey);
    }
  }
);
}

{
  final Integer priorIndex=facts.get(key);
  Aggregator[] aggs;
  if (null != priorIndex) {
    aggs=concurrentGet(priorIndex);
  }
 else {
    aggs=new Aggregator[metrics.length];
    for (int i=0; i < metrics.length; i++) {
      final AggregatorFactory agg=metrics[i];
      aggs[i]=agg.factorize(makeColumnSelectorFactory(agg,in,deserializeComplexMetrics));
    }
    final Integer rowIndex=indexIncrement.getAndIncrement();
    concurrentSet(rowIndex,aggs);
    if (numEntries.get() >= maxRowCount && !facts.containsKey(key)) {
      throw new IndexSizeExceededException("Maximum number of rows reached");
    }
    final Integer prev=facts.putIfAbsent(key,rowIndex);
    if (null == prev) {
      numEntries.incrementAndGet();
    }
 else {
      aggs=concurrentGet(prev);
      concurrentRemove(rowIndex);
    }
  }
  in.set(row);
  for (  Aggregator agg : aggs) {
synchronized (agg) {
      agg.aggregate();
    }
  }
  in.set(null);
  return numEntries.get();
}

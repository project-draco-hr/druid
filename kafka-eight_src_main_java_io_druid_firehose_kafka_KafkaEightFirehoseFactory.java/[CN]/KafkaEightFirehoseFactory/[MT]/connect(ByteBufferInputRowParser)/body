{
  final ConsumerConnector connector=Consumer.createJavaConsumerConnector(new ConsumerConfig(consumerProps));
  final Map<String,List<KafkaStream<byte[],byte[]>>> streams=connector.createMessageStreams(ImmutableMap.of(feed,1));
  final List<KafkaStream<byte[],byte[]>> streamList=streams.get(feed);
  if (streamList == null || streamList.size() != 1) {
    return null;
  }
  final KafkaStream<byte[],byte[]> stream=streamList.get(0);
  final ConsumerIterator<byte[],byte[]> iter=stream.iterator();
  return new Firehose(){
    @Override public boolean hasMore(){
      return iter.hasNext();
    }
    @Override public InputRow nextRow() throws FormattedException {
      final byte[] message=iter.next().message();
      if (message == null) {
        return null;
      }
      try {
        return firehoseParser.parse(ByteBuffer.wrap(message));
      }
 catch (      Exception e) {
        throw new FormattedException.Builder().withErrorCode(FormattedException.ErrorCode.UNPARSABLE_ROW).withMessage(String.format("Error parsing[%s], got [%s]",ByteBuffer.wrap(message),e.toString())).build();
      }
    }
    @Override public Runnable commit(){
      return new Runnable(){
        @Override public void run(){
          log.info("committing offsets");
          connector.commitOffsets();
        }
      }
;
    }
    @Override public void close() throws IOException {
      connector.shutdown();
    }
  }
;
}

{
  JsonConfigurator configurator=injector.getBinding(JsonConfigurator.class).getProvider().get();
  JsonConfigProvider<ZkPathsConfig> zkPathsConfig=JsonConfigProvider.of(configPrefix,ZkPathsConfig.class);
  testProperties.clear();
  String base=UUID.randomUUID().toString();
  testProperties.put(String.format("%s.base",configPrefix),base);
  zkPathsConfig.inject(testProperties,configurator);
  propertyValues.clear();
  propertyValues.put(String.format("%s.base",configPrefix),base);
  propertyValues.put(String.format("%s.propertiesPath",configPrefix),ZKPaths.makePath(base,"properties"));
  propertyValues.put(String.format("%s.announcementsPath",configPrefix),ZKPaths.makePath(base,"announcements"));
  propertyValues.put(String.format("%s.servedSegmentsPath",configPrefix),ZKPaths.makePath(base,"servedSegments"));
  propertyValues.put(String.format("%s.liveSegmentsPath",configPrefix),ZKPaths.makePath(base,"segments"));
  propertyValues.put(String.format("%s.coordinatorPath",configPrefix),ZKPaths.makePath(base,"coordinator"));
  propertyValues.put(String.format("%s.loadQueuePath",configPrefix),ZKPaths.makePath(base,"loadQueue"));
  propertyValues.put(String.format("%s.connectorPath",configPrefix),ZKPaths.makePath(base,"connector"));
  ZkPathsConfig zkPathsConfigObj=zkPathsConfig.get().get();
  validateEntries(zkPathsConfigObj);
  Assert.assertEquals(propertyValues.size(),assertions);
  ObjectMapper jsonMapper=injector.getProvider(Key.get(ObjectMapper.class,Json.class)).get();
  String jsonVersion=jsonMapper.writeValueAsString(zkPathsConfigObj);
  ZkPathsConfig zkPathsConfigObjDeSer=jsonMapper.readValue(jsonVersion,ZkPathsConfig.class);
  Assert.assertEquals(zkPathsConfigObj,zkPathsConfigObjDeSer);
}

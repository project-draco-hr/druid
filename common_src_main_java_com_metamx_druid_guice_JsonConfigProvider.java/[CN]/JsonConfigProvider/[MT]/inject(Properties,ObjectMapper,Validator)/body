{
  Map<String,Object> jsonMap=Maps.newHashMap();
  for (  String prop : props.stringPropertyNames()) {
    if (prop.startsWith(propertyBase)) {
      final String propValue=props.getProperty(prop);
      try {
        jsonMap.put(prop.substring(propertyBase.length()),jsonMapper.readValue(propValue,Object.class));
      }
 catch (      IOException e) {
        throw new IAE("Unable to parse an object out of prop[%s]=[%s]",prop,propValue);
      }
    }
  }
  final T config=jsonMapper.convertValue(jsonMap,classToProvide);
  final Set<ConstraintViolation<T>> violations=validator.validate(config);
  if (!violations.isEmpty()) {
    List<String> messages=Lists.newArrayList();
    for (    ConstraintViolation<T> violation : violations) {
      messages.add(String.format("%s - %s",violation.getPropertyPath().toString(),violation.getMessage()));
    }
    throw new ISE("Configuration violations[%s]",JOINER.join(messages));
  }
  this.supplier=new Supplier<T>(){
    @Override public T get(){
      return config;
    }
  }
;
}

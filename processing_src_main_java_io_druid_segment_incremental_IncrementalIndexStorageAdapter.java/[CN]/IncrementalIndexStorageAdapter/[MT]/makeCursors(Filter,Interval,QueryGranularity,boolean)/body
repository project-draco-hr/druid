{
  if (index.isEmpty()) {
    return Sequences.empty();
  }
  Interval actualIntervalTmp=interval;
  final Interval dataInterval=new Interval(getMinTime().getMillis(),gran.next(gran.truncate(getMaxTime().getMillis())));
  if (!actualIntervalTmp.overlaps(dataInterval)) {
    return Sequences.empty();
  }
  if (actualIntervalTmp.getStart().isBefore(dataInterval.getStart())) {
    actualIntervalTmp=actualIntervalTmp.withStart(dataInterval.getStart());
  }
  if (actualIntervalTmp.getEnd().isAfter(dataInterval.getEnd())) {
    actualIntervalTmp=actualIntervalTmp.withEnd(dataInterval.getEnd());
  }
  final Interval actualInterval=actualIntervalTmp;
  Iterable<Long> iterable=gran.iterable(actualInterval.getStartMillis(),actualInterval.getEndMillis());
  if (descending) {
    iterable=Lists.reverse(ImmutableList.copyOf(iterable));
  }
  return Sequences.map(Sequences.simple(iterable),new Function<Long,Cursor>(){
    EntryHolder currEntry=new EntryHolder();
    @Override public Cursor apply(    @Nullable final Long input){
      final long timeStart=Math.max(input,actualInterval.getStartMillis());
      return new Cursor(){
        private final ValueMatcher filterMatcher=makeFilterMatcher(filter,this,currEntry);
        private Iterator<Map.Entry<IncrementalIndex.TimeAndDims,Integer>> baseIter;
        private Iterable<Map.Entry<IncrementalIndex.TimeAndDims,Integer>> cursorIterable;
        private boolean emptyRange;
        final DateTime time;
        int numAdvanced=-1;
        boolean done;
{
          cursorIterable=index.getFacts().timeRangeIterable(descending,timeStart,Math.min(actualInterval.getEndMillis(),gran.next(input)));
          emptyRange=!cursorIterable.iterator().hasNext();
          time=gran.toDateTime(input);
          reset();
        }
        @Override public DateTime getTime(){
          return time;
        }
        @Override public void advance(){
          if (!baseIter.hasNext()) {
            done=true;
            return;
          }
          while (baseIter.hasNext()) {
            if (Thread.interrupted()) {
              throw new QueryInterruptedException(new InterruptedException());
            }
            currEntry.set(baseIter.next());
            if (filterMatcher.matches()) {
              return;
            }
          }
          if (!filterMatcher.matches()) {
            done=true;
          }
        }
        @Override public void advanceTo(        int offset){
          int count=0;
          while (count < offset && !isDone()) {
            advance();
            count++;
          }
        }
        @Override public boolean isDone(){
          return done;
        }
        @Override public void reset(){
          baseIter=cursorIterable.iterator();
          if (numAdvanced == -1) {
            numAdvanced=0;
          }
 else {
            Iterators.advance(baseIter,numAdvanced);
          }
          if (Thread.interrupted()) {
            throw new QueryInterruptedException(new InterruptedException());
          }
          boolean foundMatched=false;
          while (baseIter.hasNext()) {
            currEntry.set(baseIter.next());
            if (filterMatcher.matches()) {
              foundMatched=true;
              break;
            }
            numAdvanced++;
          }
          done=!foundMatched && (emptyRange || !baseIter.hasNext());
        }
        @Override public DimensionSelector makeDimensionSelector(        DimensionSpec dimensionSpec){
          final String dimension=dimensionSpec.getDimension();
          final ExtractionFn extractionFn=dimensionSpec.getExtractionFn();
          if (dimension.equals(Column.TIME_COLUMN_NAME)) {
            DimensionSelector selector=new SingleScanTimeDimSelector(makeLongColumnSelector(dimension),extractionFn,descending);
            return dimensionSpec.decorate(selector);
          }
          final IncrementalIndex.DimensionDesc dimensionDesc=index.getDimension(dimensionSpec.getDimension());
          if (dimensionDesc == null) {
            return dimensionSpec.decorate(NULL_DIMENSION_SELECTOR);
          }
          final DimensionIndexer indexer=dimensionDesc.getIndexer();
          return dimensionSpec.decorate((DimensionSelector)indexer.makeColumnValueSelector(dimensionSpec,currEntry,dimensionDesc));
        }
        @Override public FloatColumnSelector makeFloatColumnSelector(        String columnName){
          final Integer dimIndex=index.getDimensionIndex(columnName);
          if (dimIndex != null) {
            final IncrementalIndex.DimensionDesc dimensionDesc=index.getDimension(columnName);
            final DimensionIndexer indexer=dimensionDesc.getIndexer();
            return (FloatColumnSelector)indexer.makeColumnValueSelector(new DefaultDimensionSpec(columnName,null),currEntry,dimensionDesc);
          }
          final Integer metricIndexInt=index.getMetricIndex(columnName);
          if (metricIndexInt == null) {
            return new FloatColumnSelector(){
              @Override public float get(){
                return 0.0f;
              }
            }
;
          }
          final int metricIndex=metricIndexInt;
          return new FloatColumnSelector(){
            @Override public float get(){
              return index.getMetricFloatValue(currEntry.getValue(),metricIndex);
            }
          }
;
        }
        @Override public LongColumnSelector makeLongColumnSelector(        String columnName){
          if (columnName.equals(Column.TIME_COLUMN_NAME)) {
            return new LongColumnSelector(){
              @Override public long get(){
                return currEntry.getKey().getTimestamp();
              }
            }
;
          }
          final Integer dimIndex=index.getDimensionIndex(columnName);
          if (dimIndex != null) {
            final IncrementalIndex.DimensionDesc dimensionDesc=index.getDimension(columnName);
            final DimensionIndexer indexer=dimensionDesc.getIndexer();
            return (LongColumnSelector)indexer.makeColumnValueSelector(new DefaultDimensionSpec(columnName,null),currEntry,dimensionDesc);
          }
          final Integer metricIndexInt=index.getMetricIndex(columnName);
          if (metricIndexInt == null) {
            return new LongColumnSelector(){
              @Override public long get(){
                return 0L;
              }
            }
;
          }
          final int metricIndex=metricIndexInt;
          return new LongColumnSelector(){
            @Override public long get(){
              return index.getMetricLongValue(currEntry.getValue(),metricIndex);
            }
          }
;
        }
        @Override public ObjectColumnSelector makeObjectColumnSelector(        String column){
          if (column.equals(Column.TIME_COLUMN_NAME)) {
            return new ObjectColumnSelector<Long>(){
              @Override public Class classOfObject(){
                return Long.TYPE;
              }
              @Override public Long get(){
                return currEntry.getKey().getTimestamp();
              }
            }
;
          }
          final Integer metricIndexInt=index.getMetricIndex(column);
          if (metricIndexInt != null) {
            final int metricIndex=metricIndexInt;
            final Class classOfObject=index.getMetricClass(column);
            return new ObjectColumnSelector(){
              @Override public Class classOfObject(){
                return classOfObject;
              }
              @Override public Object get(){
                return index.getMetricObjectValue(currEntry.getValue(),metricIndex);
              }
            }
;
          }
          IncrementalIndex.DimensionDesc dimensionDesc=index.getDimension(column);
          if (dimensionDesc != null) {
            final int dimensionIndex=dimensionDesc.getIndex();
            final DimensionIndexer indexer=dimensionDesc.getIndexer();
            final ColumnCapabilities capabilities=dimensionDesc.getCapabilities();
            return new ObjectColumnSelector<Object>(){
              @Override public Class classOfObject(){
                return Object.class;
              }
              @Override public Object get(){
                IncrementalIndex.TimeAndDims key=currEntry.getKey();
                if (key == null) {
                  return null;
                }
                Object[] dims=key.getDims();
                if (dimensionIndex >= dims.length) {
                  return null;
                }
                Object dimVals=indexer.convertUnsortedEncodedArrayToActualArrayOrList(dims[dimensionIndex],false);
                return dimVals;
              }
            }
;
          }
          return null;
        }
        @Override public ColumnCapabilities getColumnCapabilities(        String columnName){
          return index.getCapabilities(columnName);
        }
      }
;
    }
  }
);
}

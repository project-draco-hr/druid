{
  rtrTestUtils.makeWorker("worker0");
  rtrTestUtils.makeWorker("worker1");
  remoteTaskRunner=rtrTestUtils.makeRemoteTaskRunner(new TestRemoteTaskRunnerConfig(new Period("PT3600S")){
    public int getPendingTasksRunnerNumThreads(){
      return 2;
    }
  }
);
  int numTasks=6;
  ListenableFuture<TaskStatus>[] results=new ListenableFuture[numTasks];
  Task[] tasks=new Task[numTasks];
  for (int i=0; i < 2; i++) {
    tasks[i]=TestTasks.unending("task" + i);
    results[i]=(remoteTaskRunner.run(tasks[i]));
  }
  waitForBothWorkersToHaveUnackedTasks();
  for (int i=2; i < 5; i++) {
    tasks[i]=TestTasks.unending("task" + i);
    results[i]=(remoteTaskRunner.run(tasks[i]));
  }
  mockWorkerRunningAndCompletionSuccessfulTasks(tasks[0],tasks[1]);
  Assert.assertEquals(TaskStatus.Status.SUCCESS,results[0].get().getStatusCode());
  Assert.assertEquals(TaskStatus.Status.SUCCESS,results[1].get().getStatusCode());
  waitForBothWorkersToHaveUnackedTasks();
  if (remoteTaskRunner.getWorkersWithUnacknowledgedTask().containsValue(tasks[2].getId()) && remoteTaskRunner.getWorkersWithUnacknowledgedTask().containsValue(tasks[3].getId())) {
    remoteTaskRunner.shutdown("task4");
    mockWorkerRunningAndCompletionSuccessfulTasks(tasks[3],tasks[2]);
    Assert.assertEquals(TaskStatus.Status.SUCCESS,results[3].get().getStatusCode());
    Assert.assertEquals(TaskStatus.Status.SUCCESS,results[2].get().getStatusCode());
  }
 else   if (remoteTaskRunner.getWorkersWithUnacknowledgedTask().containsValue(tasks[3].getId()) && remoteTaskRunner.getWorkersWithUnacknowledgedTask().containsValue(tasks[4].getId())) {
    remoteTaskRunner.shutdown("task2");
    mockWorkerRunningAndCompletionSuccessfulTasks(tasks[4],tasks[3]);
    Assert.assertEquals(TaskStatus.Status.SUCCESS,results[4].get().getStatusCode());
    Assert.assertEquals(TaskStatus.Status.SUCCESS,results[3].get().getStatusCode());
  }
 else   if (remoteTaskRunner.getWorkersWithUnacknowledgedTask().containsValue(tasks[4].getId()) && remoteTaskRunner.getWorkersWithUnacknowledgedTask().containsValue(tasks[2].getId())) {
    remoteTaskRunner.shutdown("task3");
    mockWorkerRunningAndCompletionSuccessfulTasks(tasks[4],tasks[2]);
    Assert.assertEquals(TaskStatus.Status.SUCCESS,results[4].get().getStatusCode());
    Assert.assertEquals(TaskStatus.Status.SUCCESS,results[2].get().getStatusCode());
  }
 else {
    throw new ISE("two out of three tasks 2,3 and 4 must be waiting for ack.");
  }
  tasks[5]=TestTasks.unending("task5");
  results[5]=remoteTaskRunner.run(tasks[5]);
  waitForOneWorkerToHaveUnackedTasks();
  if (rtrTestUtils.taskAnnounced("worker0",tasks[5].getId())) {
    rtrTestUtils.mockWorkerRunningTask("worker0",tasks[5]);
    rtrTestUtils.mockWorkerCompleteSuccessfulTask("worker0",tasks[5]);
  }
 else {
    rtrTestUtils.mockWorkerRunningTask("worker1",tasks[5]);
    rtrTestUtils.mockWorkerCompleteSuccessfulTask("worker1",tasks[5]);
  }
  Assert.assertEquals(TaskStatus.Status.SUCCESS,results[5].get().getStatusCode());
}

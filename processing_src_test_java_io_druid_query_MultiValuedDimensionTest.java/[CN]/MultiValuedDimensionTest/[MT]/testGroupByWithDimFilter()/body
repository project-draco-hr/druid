{
  GroupByQuery query=GroupByQuery.builder().setDataSource("xx").setQuerySegmentSpec(new LegacySegmentSpec("1970/3000")).setGranularity(QueryGranularities.ALL).setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("tags","tags"))).setAggregatorSpecs(Arrays.asList(new AggregatorFactory[]{new CountAggregatorFactory("count")})).setDimFilter(new SelectorDimFilter("tags","t3",null)).build();
  Sequence<Row> result=helper.runQueryOnSegmentsObjs(ImmutableList.of(new QueryableIndexSegment("sid1",queryableIndex),new IncrementalIndexSegment(incrementalIndex,"sid2")),query);
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("1970-01-01T00:00:00.000Z","tags","t1","count",2L),GroupByQueryRunnerTestHelper.createExpectedRow("1970-01-01T00:00:00.000Z","tags","t2","count",2L),GroupByQueryRunnerTestHelper.createExpectedRow("1970-01-01T00:00:00.000Z","tags","t3","count",4L),GroupByQueryRunnerTestHelper.createExpectedRow("1970-01-01T00:00:00.000Z","tags","t4","count",2L),GroupByQueryRunnerTestHelper.createExpectedRow("1970-01-01T00:00:00.000Z","tags","t5","count",2L));
  TestHelper.assertExpectedObjects(expectedResults,Sequences.toList(result,new ArrayList<Row>()),"");
}

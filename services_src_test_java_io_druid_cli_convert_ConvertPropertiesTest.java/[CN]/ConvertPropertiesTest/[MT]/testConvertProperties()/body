{
  File inputFile=tmpFolder.newFile();
  File outputFile=tmpFolder.newFile();
  String oldVersionPropertiesString="druid.database.rules.defaultDatasource 1" + System.lineSeparator() + "druid.indexer.chathandler.publishDiscovery true"+ System.lineSeparator()+ "druid.database.segmentTable table"+ System.lineSeparator()+ "druid.pusher.local false"+ System.lineSeparator()+ "druid.paths.indexCache hdfs://path"+ System.lineSeparator()+ "notHandled";
  String newVersionPropertiesString;
  FileUtils.writeStringToFile(inputFile,oldVersionPropertiesString,StandardCharsets.UTF_8.toString());
  Cli<?> parser=Cli.builder("convertProps").withCommand(ConvertProperties.class).build();
  Object command=parser.parse("convertProps","-f",inputFile.getAbsolutePath(),"-o",outputFile.getAbsolutePath());
  Assert.assertNotNull(command);
  ConvertProperties convertProperties=(ConvertProperties)command;
  convertProperties.run();
  newVersionPropertiesString=FileUtils.readFileToString(outputFile,StandardCharsets.UTF_8.toString());
  System.out.printf(newVersionPropertiesString);
  Assert.assertTrue(newVersionPropertiesString.contains("druid.manager.rules.defaultTier=1"));
  Assert.assertTrue(newVersionPropertiesString.contains("druid.db.tables.segments=table"));
  Assert.assertTrue(newVersionPropertiesString.contains("druid.indexer.task.chathandler.type=curator"));
  Assert.assertTrue(newVersionPropertiesString.contains("druid.storage.local=false"));
  Assert.assertTrue(newVersionPropertiesString.contains("druid.segmentCache.locations=[{\"path\": \"hdfs://path\", \"maxSize\": null}]"));
  Assert.assertTrue(newVersionPropertiesString.contains("notHandled"));
}

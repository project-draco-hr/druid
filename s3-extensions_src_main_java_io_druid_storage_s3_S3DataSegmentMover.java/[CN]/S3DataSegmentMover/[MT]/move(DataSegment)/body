{
  try {
    Map<String,Object> loadSpec=segment.getLoadSpec();
    String s3Bucket=MapUtils.getString(loadSpec,"bucket");
    String s3Path=MapUtils.getString(loadSpec,"key");
    String s3DescriptorPath=s3Path.substring(0,s3Path.lastIndexOf("/")) + "/descriptor.json";
    final String s3ArchiveBucket=config.getArchiveBucket();
    if (s3ArchiveBucket.isEmpty()) {
      log.warn("S3 archive bucket not specified, refusing to move segment [s3://%s/%s]",s3Bucket,s3Path);
      return segment;
    }
    if (s3Client.isObjectInBucket(s3Bucket,s3Path)) {
      log.info("Moving index file[s3://%s/%s] to [s3://%s/%s]",s3Bucket,s3Path,s3ArchiveBucket,s3Path);
      s3Client.moveObject(s3Bucket,s3Path,s3ArchiveBucket,new S3Object(s3Path),false);
    }
    if (s3Client.isObjectInBucket(s3Bucket,s3DescriptorPath)) {
      log.info("Moving descriptor file[s3://%s/%s] to [s3://%s/%s]",s3Bucket,s3DescriptorPath,s3ArchiveBucket,s3DescriptorPath);
      s3Client.moveObject(s3Bucket,s3DescriptorPath,s3ArchiveBucket,new S3Object(s3DescriptorPath),false);
    }
    return segment.withLoadSpec(ImmutableMap.<String,Object>builder().putAll(loadSpec).put("bucket",s3ArchiveBucket).build());
  }
 catch (  ServiceException e) {
    throw new SegmentLoadingException(e,"Unable to move segment[%s]",segment.getIdentifier());
  }
}

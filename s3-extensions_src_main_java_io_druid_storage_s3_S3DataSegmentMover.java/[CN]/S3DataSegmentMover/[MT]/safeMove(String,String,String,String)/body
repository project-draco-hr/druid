{
  try {
    S3Utils.retryS3Operation(new Callable<Void>(){
      @Override public Void call() throws Exception {
        if (s3Client.isObjectInBucket(s3Bucket,s3Path)) {
          if (s3Bucket.equals(targetS3Bucket) && s3Path.equals(targetS3Path)) {
            log.info("No need to move file[s3://%s/%s] onto itself",s3Bucket,s3Path);
          }
 else {
            log.info("Moving file[s3://%s/%s] to [s3://%s/%s]",s3Bucket,s3Path,targetS3Bucket,targetS3Path);
            s3Client.moveObject(s3Bucket,s3Path,targetS3Bucket,new S3Object(targetS3Path),false);
          }
        }
 else {
          if (s3Client.isObjectInBucket(targetS3Bucket,targetS3Path)) {
            log.info("Not moving file [s3://%s/%s], already present in target location [s3://%s/%s]",s3Bucket,s3Path,targetS3Bucket,targetS3Path);
          }
 else {
            throw new SegmentLoadingException("Unable to move file [s3://%s/%s] to [s3://%s/%s], not present in either source or target location",s3Bucket,s3Path,targetS3Bucket,targetS3Path);
          }
        }
        return null;
      }
    }
);
  }
 catch (  Exception e) {
    Throwables.propagateIfInstanceOf(e,ServiceException.class);
    Throwables.propagateIfInstanceOf(e,SegmentLoadingException.class);
    throw Throwables.propagate(e);
  }
}

{
  EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(3);
  EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(5);
  EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.<List<String>>anyObject())).andReturn(Lists.<String>newArrayList());
  RemoteTaskRunner runner=EasyMock.createMock(RemoteTaskRunner.class);
  EasyMock.expect(runner.getPendingTaskPayloads()).andReturn(Lists.<Task>newArrayList());
  EasyMock.expect(runner.getWorkers()).andReturn(Arrays.<ImmutableWorkerInfo>asList());
  EasyMock.expect(runner.getConfig()).andReturn(new RemoteTaskRunnerConfig());
  EasyMock.expect(autoScaler.provision()).andReturn(new AutoScalingData(Lists.<String>newArrayList("aNode"))).times(3);
  EasyMock.replay(runner,autoScaler);
  boolean provisionedSomething=strategy.doProvision(runner);
  Assert.assertTrue(provisionedSomething);
  Assert.assertTrue(strategy.getStats().toList().size() == 3);
  for (  ScalingStats.ScalingEvent event : strategy.getStats().toList()) {
    Assert.assertTrue(event.getEvent() == ScalingStats.EVENT.PROVISION);
  }
}

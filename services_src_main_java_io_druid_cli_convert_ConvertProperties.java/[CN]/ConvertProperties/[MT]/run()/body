{
  File file=new File(filename);
  if (!file.exists()) {
    System.out.printf("File[%s] does not exist.%n",file);
  }
  File outFile=new File(outFilename);
  if (outFile.getParentFile() != null && !outFile.getParentFile().exists()) {
    outFile.getParentFile().mkdirs();
  }
  Properties fromFile=new Properties();
  try (Reader in=new InputStreamReader(new FileInputStream(file),Charsets.UTF_8)){
    fromFile.load(in);
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
  Properties updatedProps=new Properties();
  int count=0;
  for (  String property : fromFile.stringPropertyNames()) {
    boolean handled=false;
    for (    PropertyConverter converter : converters) {
      if (converter.canHandle(property)) {
        for (        Map.Entry<String,String> entry : converter.convert(fromFile).entrySet()) {
          if (entry.getValue() != null) {
            ++count;
            log.info("Converting [%s] to [%s]",property,entry.getKey());
            updatedProps.setProperty(entry.getKey(),entry.getValue());
          }
        }
        handled=true;
      }
    }
    if (!handled) {
      log.info("Not converting [%s]",property);
      updatedProps.put(property,fromFile.getProperty(property));
    }
  }
  updatedProps.setProperty("druid.monitoring.monitors","[\"io.druid.server.metrics.ServerMonitor\", \"com.metamx.metrics.SysMonitor\"]");
  BufferedWriter out=null;
  try {
    out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outFile),Charsets.UTF_8));
    for (    Map.Entry<Object,Object> prop : updatedProps.entrySet()) {
      out.write((String)prop.getKey());
      out.write("=");
      out.write((String)prop.getValue());
      out.newLine();
    }
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
 finally {
    if (out != null) {
      Closeables.closeQuietly(out);
    }
  }
  log.info("Completed!  Converted[%,d] properties.",count);
}

{
  final File tmpDir=Files.createTempDir();
  tmpDir.deleteOnExit();
  final DataSchema schema=new DataSchema("test",new InputRowParser(){
    @Override public InputRow parse(    Object input){
      return null;
    }
    @Override public ParseSpec getParseSpec(){
      return new JSONParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(null,null,null));
    }
    @Override public InputRowParser withParseSpec(    ParseSpec parseSpec){
      return null;
    }
  }
,new AggregatorFactory[]{new CountAggregatorFactory("rows")},new UniformGranularitySpec(Granularity.HOUR,QueryGranularity.NONE,null,Granularity.HOUR));
  announcer=EasyMock.createMock(DataSegmentAnnouncer.class);
  announcer.announceSegment(EasyMock.<DataSegment>anyObject());
  EasyMock.expectLastCall().anyTimes();
  segmentPublisher=EasyMock.createMock(SegmentPublisher.class);
  dataSegmentPusher=EasyMock.createMock(DataSegmentPusher.class);
  serverView=EasyMock.createMock(FilteredServerView.class);
  serverView.registerSegmentCallback(EasyMock.<Executor>anyObject(),EasyMock.<ServerView.SegmentCallback>anyObject(),EasyMock.<Predicate<DataSegment>>anyObject());
  EasyMock.expectLastCall().anyTimes();
  emitter=EasyMock.createMock(ServiceEmitter.class);
  EasyMock.replay(announcer,segmentPublisher,dataSegmentPusher,serverView,emitter);
  RealtimeTuningConfig tuningConfig=new RealtimeTuningConfig(1,null,null,null,new IntervalStartVersioningPolicy(),new NoopRejectionPolicyFactory(),null,null,null);
  RealtimePlumberSchool realtimePlumberSchool=new RealtimePlumberSchool(emitter,new DefaultQueryRunnerFactoryConglomerate(Maps.<Class<? extends Query>,QueryRunnerFactory>newHashMap()),dataSegmentPusher,announcer,segmentPublisher,serverView,MoreExecutors.sameThreadExecutor(),new Period("PT10m"),tmpDir,Granularity.HOUR,new IntervalStartVersioningPolicy(),new NoopRejectionPolicyFactory(),null,0);
  plumber=realtimePlumberSchool.findPlumber(schema,tuningConfig,new FireDepartmentMetrics());
}

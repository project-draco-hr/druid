{
  final File tmpDir=Files.createTempDir();
  tmpDir.deleteOnExit();
  final DataSchema schema=new DataSchema("test",new InputRowParser(){
    @Override public InputRow parse(    Object input) throws FormattedException {
      return null;
    }
    @Override public ParseSpec getParseSpec(){
      return new ParseSpec(new TimestampSpec("timestamp","auto"),new DimensionsSpec(null,null,null)){
      }
;
    }
    @Override public InputRowParser withParseSpec(    ParseSpec parseSpec){
      return null;
    }
  }
,new AggregatorFactory[]{new CountAggregatorFactory("rows")},new UniformGranularitySpec(Granularity.HOUR,QueryGranularity.NONE,null,Granularity.HOUR));
  RealtimePlumberSchool realtimePlumberSchool=new RealtimePlumberSchool(new Period("PT10m"),tmpDir,Granularity.HOUR);
  announcer=EasyMock.createMock(DataSegmentAnnouncer.class);
  announcer.announceSegment(EasyMock.<DataSegment>anyObject());
  EasyMock.expectLastCall().anyTimes();
  segmentPublisher=EasyMock.createMock(SegmentPublisher.class);
  dataSegmentPusher=EasyMock.createMock(DataSegmentPusher.class);
  serverView=EasyMock.createMock(ServerView.class);
  serverView.registerSegmentCallback(EasyMock.<Executor>anyObject(),EasyMock.<ServerView.SegmentCallback>anyObject());
  EasyMock.expectLastCall().anyTimes();
  emitter=EasyMock.createMock(ServiceEmitter.class);
  EasyMock.replay(announcer,segmentPublisher,dataSegmentPusher,serverView,emitter);
  realtimePlumberSchool.setConglomerate(new DefaultQueryRunnerFactoryConglomerate(Maps.<Class<? extends Query>,QueryRunnerFactory>newHashMap()));
  realtimePlumberSchool.setSegmentAnnouncer(announcer);
  realtimePlumberSchool.setSegmentPublisher(segmentPublisher);
  realtimePlumberSchool.setRejectionPolicyFactory(new NoopRejectionPolicyFactory());
  realtimePlumberSchool.setVersioningPolicy(new IntervalStartVersioningPolicy());
  realtimePlumberSchool.setDataSegmentPusher(dataSegmentPusher);
  realtimePlumberSchool.setServerView(serverView);
  realtimePlumberSchool.setEmitter(emitter);
  realtimePlumberSchool.setQueryExecutorService(MoreExecutors.sameThreadExecutor());
  RealtimeDriverConfig driverConfig=new RealtimeDriverConfig(1,new Period("P1Y"),null);
  plumber=realtimePlumberSchool.findPlumber(schema,driverConfig,new FireDepartmentMetrics());
}

{
  plumber.getSinks().put(0L,new Sink(new Interval(0,TimeUnit.HOURS.toMillis(1)),schema,tuningConfig.getShardSpec(),new DateTime("2014-12-01T12:34:56.789").toString(),tuningConfig.getMaxRowsInMemory(),tuningConfig.isReportParseExceptions()));
  Assert.assertNull(plumber.startJob());
  final InputRow row=EasyMock.createNiceMock(InputRow.class);
  EasyMock.expect(row.getTimestampFromEpoch()).andReturn(0L);
  EasyMock.expect(row.getDimensions()).andReturn(new ArrayList<String>());
  EasyMock.replay(row);
  final CountDownLatch doneSignal=new CountDownLatch(1);
  final Committer committer=new Committer(){
    @Override public Object getMetadata(){
      return commitMetadata;
    }
    @Override public void run(){
      doneSignal.countDown();
    }
  }
;
  plumber.add(row,Suppliers.ofInstance(committer));
  plumber.persist(committer);
  doneSignal.await();
  plumber.getSinks().clear();
  plumber.finishJob();
}

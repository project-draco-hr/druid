{
  final AtomicBoolean committed=new AtomicBoolean(false);
  plumber.getSinks().put(0L,new Sink(new Interval(0,TimeUnit.HOURS.toMillis(1)),schema,tuningConfig,new DateTime("2014-12-01T12:34:56.789").toString()));
  Assert.assertNull(plumber.startJob());
  final InputRow row=EasyMock.createNiceMock(InputRow.class);
  EasyMock.expect(row.getTimestampFromEpoch()).andReturn(0L);
  EasyMock.expect(row.getDimensions()).andReturn(new ArrayList<String>());
  EasyMock.replay(row);
  final Committer committer=new Committer(){
    @Override public Object getMetadata(){
      return commitMetadata;
    }
    @Override public void run(){
      committed.set(true);
    }
  }
;
  plumber.add(row,Suppliers.ofInstance(committer));
  plumber.persist(committer);
  while (!committed.get()) {
    Thread.sleep(100);
  }
  plumber.getSinks().clear();
  plumber.finishJob();
}

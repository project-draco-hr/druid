{
  QueryToolChest<T,Query<T>> toolChest=warehouse.getToolChest(query);
  boolean isBySegment=query.getContextBySegment(false);
  Pair<JavaType,JavaType> types=typesMap.get(query.getClass());
  if (types == null) {
    final TypeFactory typeFactory=objectMapper.getTypeFactory();
    JavaType baseType=typeFactory.constructType(toolChest.getResultTypeReference());
    JavaType bySegmentType=typeFactory.constructParametricType(Result.class,typeFactory.constructParametricType(BySegmentResultValueClass.class,baseType));
    types=Pair.of(baseType,bySegmentType);
    typesMap.put(query.getClass(),types);
  }
  final JavaType typeRef;
  if (isBySegment) {
    typeRef=types.rhs;
  }
 else {
    typeRef=types.lhs;
  }
  final ListenableFuture<InputStream> future;
  final String url=String.format("http://%s/druid/v2/",host);
  final String cancelUrl=String.format("http://%s/druid/v2/%s",host,query.getId());
  try {
    log.debug("Querying url[%s]",url);
    final HttpResponseHandler<InputStream,InputStream> responseHandler=new HttpResponseHandler<InputStream,InputStream>(){
      private long startTime;
      private final AtomicLong byteCount=new AtomicLong(0);
      private final BlockingQueue<InputStream> queue=new LinkedBlockingQueue<>();
      private final AtomicBoolean done=new AtomicBoolean(false);
      @Override public ClientResponse<InputStream> handleResponse(      HttpResponse response){
        log.debug("Initial response from url[%s]",url);
        startTime=System.currentTimeMillis();
        try {
          final String responseContext=response.headers().get("X-Druid-Response-Context");
          if (responseContext != null) {
            context.putAll(objectMapper.<Map<String,Object>>readValue(responseContext,new TypeReference<Map<String,Object>>(){
            }
));
          }
          queue.put(new ChannelBufferInputStream(response.getContent()));
        }
 catch (        final IOException e) {
          log.error(e,"Error parsing response context from url [%s]",url);
          return ClientResponse.<InputStream>finished(new InputStream(){
            @Override public int read() throws IOException {
              throw e;
            }
          }
);
        }
catch (        InterruptedException e) {
          log.error(e,"Queue appending interrupted");
          Thread.currentThread().interrupt();
          throw Throwables.propagate(e);
        }
        byteCount.addAndGet(response.getContent().readableBytes());
        return ClientResponse.<InputStream>finished(new SequenceInputStream(new Enumeration<InputStream>(){
          @Override public boolean hasMoreElements(){
synchronized (done) {
              return !done.get() || !queue.isEmpty();
            }
          }
          @Override public InputStream nextElement(){
            try {
              return queue.take();
            }
 catch (            InterruptedException e) {
              Thread.currentThread().interrupt();
              throw Throwables.propagate(e);
            }
          }
        }
));
      }
      @Override public ClientResponse<InputStream> handleChunk(      ClientResponse<InputStream> clientResponse,      HttpChunk chunk){
        final ChannelBuffer channelBuffer=chunk.getContent();
        final int bytes=channelBuffer.readableBytes();
        if (bytes > 0) {
          try {
            queue.put(new ChannelBufferInputStream(channelBuffer));
          }
 catch (          InterruptedException e) {
            log.error(e,"Unable to put finalizing input stream into Sequence queue for url [%s]",url);
            Thread.currentThread().interrupt();
            throw Throwables.propagate(e);
          }
          byteCount.addAndGet(bytes);
        }
        return clientResponse;
      }
      @Override public ClientResponse<InputStream> done(      ClientResponse<InputStream> clientResponse){
        long stopTime=System.currentTimeMillis();
        log.debug("Completed request to url[%s] with %,d bytes returned in %,d millis [%,f b/s].",url,byteCount.get(),stopTime - startTime,byteCount.get() / (0.0001 * (stopTime - startTime)));
synchronized (done) {
          try {
            queue.put(ByteSource.empty().openStream());
          }
 catch (          InterruptedException e) {
            log.error(e,"Unable to put finalizing input stream into Sequence queue for url [%s]",url);
            Thread.currentThread().interrupt();
            throw Throwables.propagate(e);
          }
catch (          IOException e) {
            throw Throwables.propagate(e);
          }
 finally {
            done.set(true);
          }
        }
        return ClientResponse.<InputStream>finished(clientResponse.getObj());
      }
      @Override public void exceptionCaught(      final ClientResponse<InputStream> clientResponse,      final Throwable e){
synchronized (done) {
          done.set(true);
          queue.offer(new InputStream(){
            @Override public int read() throws IOException {
              throw new IOException(e);
            }
          }
);
        }
      }
    }
;
    future=httpClient.go(new Request(HttpMethod.POST,new URL(url)).setContent(objectMapper.writeValueAsBytes(query)).setHeader(HttpHeaders.Names.CONTENT_TYPE,isSmile ? SmileMediaTypes.APPLICATION_JACKSON_SMILE : MediaType.APPLICATION_JSON),responseHandler);
    queryWatcher.registerQuery(query,future);
    openConnections.getAndIncrement();
    Futures.addCallback(future,new FutureCallback<InputStream>(){
      @Override public void onSuccess(      InputStream result){
        openConnections.getAndDecrement();
      }
      @Override public void onFailure(      Throwable t){
        openConnections.getAndDecrement();
        if (future.isCancelled()) {
          try {
            StatusResponseHolder res=httpClient.go(new Request(HttpMethod.DELETE,new URL(cancelUrl)).setContent(objectMapper.writeValueAsBytes(query)).setHeader(HttpHeaders.Names.CONTENT_TYPE,isSmile ? SmileMediaTypes.APPLICATION_JACKSON_SMILE : MediaType.APPLICATION_JSON),new StatusResponseHandler(Charsets.UTF_8)).get();
            if (res.getStatus().getCode() >= 500) {
              throw new RE("Error cancelling query[%s]: queriable node returned status[%d] [%s].",res.getStatus().getCode(),res.getStatus().getReasonPhrase());
            }
          }
 catch (          IOException|ExecutionException|InterruptedException e) {
            Throwables.propagate(e);
          }
        }
      }
    }
);
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
  Sequence<T> retVal=new BaseSequence<>(new BaseSequence.IteratorMaker<T,JsonParserIterator<T>>(){
    @Override public JsonParserIterator<T> make(){
      return new JsonParserIterator<T>(typeRef,future,url);
    }
    @Override public void cleanup(    JsonParserIterator<T> iterFromMake){
      CloseQuietly.close(iterFromMake);
    }
  }
);
  if (!isBySegment) {
    retVal=Sequences.map(retVal,toolChest.makePreComputeManipulatorFn(query,MetricManipulatorFns.deserializing()));
  }
  return retVal;
}

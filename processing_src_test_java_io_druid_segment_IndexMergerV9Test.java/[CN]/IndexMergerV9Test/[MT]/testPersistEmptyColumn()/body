{
  final IncrementalIndex toPersist1=new OnheapIncrementalIndex(0L,QueryGranularity.NONE,new AggregatorFactory[]{},10);
  final IncrementalIndex toPersist2=new OnheapIncrementalIndex(0L,QueryGranularity.NONE,new AggregatorFactory[]{},10);
  final File tmpDir1=temporaryFolder.newFolder();
  final File tmpDir2=temporaryFolder.newFolder();
  final File tmpDir3=temporaryFolder.newFolder();
  toPersist1.add(new MapBasedInputRow(1L,ImmutableList.of("dim1","dim2"),ImmutableMap.<String,Object>of("dim1",ImmutableList.of(),"dim2","foo")));
  toPersist2.add(new MapBasedInputRow(1L,ImmutableList.of("dim1","dim2"),ImmutableMap.<String,Object>of("dim1",ImmutableList.of(),"dim2","bar")));
  final QueryableIndex index1=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist1,tmpDir1,indexSpec)));
  final QueryableIndex index2=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist2,tmpDir2,indexSpec)));
  final QueryableIndex merged=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.mergeQueryableIndex(Arrays.asList(index1,index2),new AggregatorFactory[]{},tmpDir3,indexSpec)));
  Assert.assertEquals(1,index1.getColumn(Column.TIME_COLUMN_NAME).getLength());
  Assert.assertEquals(ImmutableList.of("dim2"),ImmutableList.copyOf(index1.getAvailableDimensions()));
  Assert.assertEquals(1,index2.getColumn(Column.TIME_COLUMN_NAME).getLength());
  Assert.assertEquals(ImmutableList.of("dim2"),ImmutableList.copyOf(index2.getAvailableDimensions()));
  Assert.assertEquals(2,merged.getColumn(Column.TIME_COLUMN_NAME).getLength());
  Assert.assertEquals(ImmutableList.of("dim2"),ImmutableList.copyOf(merged.getAvailableDimensions()));
  assertDimCompression(index1,indexSpec.getDimensionCompressionStrategy());
  assertDimCompression(index2,indexSpec.getDimensionCompressionStrategy());
  assertDimCompression(merged,indexSpec.getDimensionCompressionStrategy());
}

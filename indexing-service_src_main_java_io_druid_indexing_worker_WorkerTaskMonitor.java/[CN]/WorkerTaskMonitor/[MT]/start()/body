{
  try {
    final List<Pair<Task,ListenableFuture<TaskStatus>>> restored=taskRunner.restore();
    for (    Pair<Task,ListenableFuture<TaskStatus>> pair : restored) {
      submitTaskRunnable(pair.lhs,pair.rhs);
    }
    for (    TaskAnnouncement announcement : workerCuratorCoordinator.getAnnouncements()) {
      if (!isTaskRunning(announcement.getTaskStatus().getId()) && announcement.getTaskStatus().isRunnable()) {
        workerCuratorCoordinator.updateAnnouncement(TaskAnnouncement.create(announcement.getTaskStatus().getId(),announcement.getTaskResource(),TaskStatus.failure(announcement.getTaskStatus().getId())));
      }
    }
    pathChildrenCache.getListenable().addListener(new PathChildrenCacheListener(){
      @Override public void childEvent(      CuratorFramework curatorFramework,      PathChildrenCacheEvent pathChildrenCacheEvent) throws Exception {
        if (pathChildrenCacheEvent.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)) {
          final Task task=jsonMapper.readValue(cf.getData().forPath(pathChildrenCacheEvent.getData().getPath()),Task.class);
          submitTaskRunnable(task,null);
        }
      }
    }
);
    pathChildrenCache.start();
  }
 catch (  Exception e) {
    log.makeAlert(e,"Exception starting WorkerTaskMonitor").addData("exception",e.toString()).emit();
  }
}

{
  final List<ShardSpec> specs=ImmutableList.<ShardSpec>of(new HashBasedNumberedShardSpec(0,3),new HashBasedNumberedShardSpec(1,3),new HashBasedNumberedShardSpec(2,3));
  final List<PartitionChunk<String>> chunks=Lists.transform(specs,new Function<ShardSpec,PartitionChunk<String>>(){
    @Override public PartitionChunk<String> apply(    ShardSpec shardSpec){
      return shardSpec.createChunk("rofl");
    }
  }
);
  Assert.assertEquals(0,chunks.get(0).getChunkNumber());
  Assert.assertEquals(1,chunks.get(1).getChunkNumber());
  Assert.assertEquals(2,chunks.get(2).getChunkNumber());
  Assert.assertTrue(chunks.get(0).isStart());
  Assert.assertFalse(chunks.get(1).isStart());
  Assert.assertFalse(chunks.get(2).isStart());
  Assert.assertFalse(chunks.get(0).isEnd());
  Assert.assertFalse(chunks.get(1).isEnd());
  Assert.assertTrue(chunks.get(2).isEnd());
  Assert.assertTrue(chunks.get(0).abuts(chunks.get(1)));
  Assert.assertTrue(chunks.get(1).abuts(chunks.get(2)));
  Assert.assertFalse(chunks.get(0).abuts(chunks.get(0)));
  Assert.assertFalse(chunks.get(0).abuts(chunks.get(2)));
  Assert.assertFalse(chunks.get(1).abuts(chunks.get(0)));
  Assert.assertFalse(chunks.get(1).abuts(chunks.get(1)));
  Assert.assertFalse(chunks.get(2).abuts(chunks.get(0)));
  Assert.assertFalse(chunks.get(2).abuts(chunks.get(1)));
  Assert.assertFalse(chunks.get(2).abuts(chunks.get(2)));
}

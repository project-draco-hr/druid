{
  mockPeon.dropSegment(EasyMock.<DataSegment>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  EasyMock.expect(mockPeon.getSegmentsToLoad()).andReturn(Sets.<DataSegment>newHashSet()).atLeastOnce();
  EasyMock.expect(mockPeon.getLoadQueueSize()).andReturn(0L).atLeastOnce();
  EasyMock.replay(mockPeon);
  EasyMock.expect(databaseRuleManager.getRulesWithDefault(EasyMock.<String>anyObject())).andReturn(Lists.<Rule>newArrayList(new IntervalLoadRule(new Interval("2012-01-01T00:00:00.000Z/2013-01-02T00:00:00.000Z"),1,"normal"))).atLeastOnce();
  EasyMock.replay(databaseRuleManager);
  DataSegment overFlowSegment=new DataSegment("test",new Interval("2012-02-01/2012-02-02"),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1,0);
  List<DataSegment> longerAvailableSegments=Lists.newArrayList(availableSegments);
  longerAvailableSegments.add(overFlowSegment);
  DruidServer server1=new DruidServer("serverNorm1","hostNorm1",1000,"historical","normal");
  for (  DataSegment availableSegment : longerAvailableSegments) {
    server1.addDataSegment(availableSegment.getIdentifier(),availableSegment);
  }
  DruidServer server2=new DruidServer("serverNorm2","hostNorm2",1000,"historical","normal");
  for (  DataSegment availableSegment : longerAvailableSegments) {
    server2.addDataSegment(availableSegment.getIdentifier(),availableSegment);
  }
  DruidCluster druidCluster=new DruidCluster(ImmutableMap.of("normal",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(server1,mockPeon),new ServerHolder(server2,mockPeon)))));
  SegmentReplicantLookup segmentReplicantLookup=SegmentReplicantLookup.make(druidCluster);
  DruidMasterRuntimeParams params=new DruidMasterRuntimeParams.Builder().withDruidCluster(druidCluster).withMillisToWaitBeforeDeleting(0L).withAvailableSegments(longerAvailableSegments).withDatabaseRuleManager(databaseRuleManager).withSegmentReplicantLookup(segmentReplicantLookup).build();
  DruidMasterRuntimeParams afterParams=ruleRunner.run(params);
  MasterStats stats=afterParams.getMasterStats();
  Assert.assertTrue(stats.getPerTierStats().get("droppedCount").get("normal").get() == 24);
  EasyMock.verify(mockPeon);
}

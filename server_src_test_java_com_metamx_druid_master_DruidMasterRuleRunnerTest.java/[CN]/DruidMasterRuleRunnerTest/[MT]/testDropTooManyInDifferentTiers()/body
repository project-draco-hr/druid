{
  mockPeon.loadSegment(EasyMock.<DataSegment>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  mockPeon.dropSegment(EasyMock.<DataSegment>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  EasyMock.expect(mockPeon.getSegmentsToLoad()).andReturn(Sets.<DataSegment>newHashSet()).atLeastOnce();
  EasyMock.expect(mockPeon.getLoadQueueSize()).andReturn(0L).atLeastOnce();
  EasyMock.replay(mockPeon);
  EasyMock.expect(databaseRuleManager.getRulesWithDefault(EasyMock.<String>anyObject())).andReturn(Lists.<Rule>newArrayList(new IntervalLoadRule(new Interval("2012-01-01T00:00:00.000Z/2012-01-01T12:00:00.000Z"),1,"hot"),new IntervalDropRule(new Interval("2012-01-01T00:00:00.000Z/2012-01-02T00:00:00.000Z")))).atLeastOnce();
  EasyMock.replay(databaseRuleManager);
  DruidServer server1=new DruidServer("server1","host1",1000,"historical","hot");
  server1.addDataSegment(availableSegments.get(0).getIdentifier(),availableSegments.get(0));
  DruidServer server2=new DruidServer("serverNorm2","hostNorm2",1000,"historical","normal");
  for (  DataSegment segment : availableSegments) {
    server2.addDataSegment(segment.getIdentifier(),segment);
  }
  DruidCluster druidCluster=new DruidCluster(ImmutableMap.of("hot",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(server1,mockPeon))),"normal",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(server2,mockPeon)))));
  SegmentReplicantLookup segmentReplicantLookup=SegmentReplicantLookup.make(druidCluster);
  DruidMasterRuntimeParams params=new DruidMasterRuntimeParams.Builder().withDruidCluster(druidCluster).withMillisToWaitBeforeDeleting(0L).withAvailableSegments(availableSegments).withDatabaseRuleManager(databaseRuleManager).withSegmentReplicantLookup(segmentReplicantLookup).withBalancerCostAnalyzer(new BalancerCostAnalyzer(new DateTime("2013-01-01"))).build();
  DruidMasterRuntimeParams afterParams=ruleRunner.run(params);
  MasterStats stats=afterParams.getMasterStats();
  Assert.assertTrue(stats.getPerTierStats().get("droppedCount").get("normal").get() == 1);
  Assert.assertTrue(stats.getGlobalStats().get("deletedCount").get() == 12);
  EasyMock.verify(mockPeon);
}

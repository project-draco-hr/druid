{
  master=EasyMock.createMock(DruidMaster.class);
  mockPeon=EasyMock.createMock(LoadQueuePeon.class);
  emitter=EasyMock.createMock(ServiceEmitter.class);
  EmittingLogger.registerEmitter(emitter);
  DateTime start=new DateTime("2012-01-01");
  availableSegments=Lists.newArrayList();
  for (int i=0; i < 24; i++) {
    availableSegments.add(new DataSegment("test",new Interval(start,start.plusHours(1)),new DateTime().toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),1));
    start=start.plusHours(1);
  }
  ruleRunner=new DruidMasterRuleRunner(master);
  mockPeon.loadSegment(EasyMock.<DataSegment>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().anyTimes();
  mockPeon.dropSegment(EasyMock.<DataSegment>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().anyTimes();
  EasyMock.expect(mockPeon.getSegmentsToLoad()).andReturn(Sets.<DataSegment>newHashSet()).anyTimes();
  EasyMock.expect(mockPeon.getLoadQueueSize()).andReturn(0L).atLeastOnce();
  EasyMock.replay(mockPeon);
}

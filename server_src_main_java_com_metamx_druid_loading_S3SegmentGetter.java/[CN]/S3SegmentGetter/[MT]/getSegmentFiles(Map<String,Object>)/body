{
  String s3Bucket=MapUtils.getString(loadSpec,"bucket");
  String s3Path=MapUtils.getString(loadSpec,"key");
  log.info("Loading index at path[s3://%s/%s]",s3Bucket,s3Path);
  S3Object s3Obj=null;
  File tmpFile=null;
  try {
    if (!s3Client.isObjectInBucket(s3Bucket,s3Path)) {
      throw new StorageAdapterLoadingException("IndexFile[s3://%s/%s] does not exist.",s3Bucket,s3Path);
    }
    File cacheFile=new File(config.getCacheDirectory(),computeCacheFilePath(s3Bucket,s3Path));
    if (cacheFile.exists()) {
      S3Object objDetails=s3Client.getObjectDetails(new S3Bucket(s3Bucket),s3Path);
      DateTime cacheFileLastModified=new DateTime(cacheFile.lastModified());
      DateTime s3ObjLastModified=new DateTime(objDetails.getLastModifiedDate().getTime());
      if (cacheFileLastModified.isAfter(s3ObjLastModified)) {
        log.info("Found cacheFile[%s] with modified[%s], which is after s3Obj[%s].  Using.",cacheFile,cacheFileLastModified,s3ObjLastModified);
        return cacheFile.getParentFile();
      }
      FileUtils.deleteDirectory(cacheFile.getParentFile());
    }
    long currTime=System.currentTimeMillis();
    tmpFile=File.createTempFile(s3Bucket,new DateTime().toString());
    log.info("Downloading file[s3://%s/%s] to local tmpFile[%s] for cacheFile[%s]",s3Bucket,s3Path,tmpFile,cacheFile);
    s3Obj=s3Client.getObject(new S3Bucket(s3Bucket),s3Path);
    StreamUtils.copyToFileAndClose(s3Obj.getDataInputStream(),tmpFile,DEFAULT_TIMEOUT);
    final long downloadEndTime=System.currentTimeMillis();
    log.info("Download of file[%s] completed in %,d millis",cacheFile,downloadEndTime - currTime);
    if (!cacheFile.getParentFile().mkdirs()) {
      log.info("Unable to make parent file[%s]",cacheFile.getParentFile());
    }
    cacheFile.delete();
    if (s3Path.endsWith("gz")) {
      log.info("Decompressing file[%s] to [%s]",tmpFile,cacheFile);
      StreamUtils.copyToFileAndClose(new GZIPInputStream(new FileInputStream(tmpFile)),cacheFile);
      if (!tmpFile.delete()) {
        log.error("Could not delete tmpFile[%s].",tmpFile);
      }
    }
 else {
      log.info("Rename tmpFile[%s] to cacheFile[%s]",tmpFile,cacheFile);
      if (!tmpFile.renameTo(cacheFile)) {
        log.warn("Error renaming tmpFile[%s] to cacheFile[%s].  Copying instead.",tmpFile,cacheFile);
        StreamUtils.copyToFileAndClose(new FileInputStream(tmpFile),cacheFile);
        if (!tmpFile.delete()) {
          log.error("Could not delete tmpFile[%s].",tmpFile);
        }
      }
    }
    long endTime=System.currentTimeMillis();
    log.info("Local processing of file[%s] done in %,d millis",cacheFile,endTime - downloadEndTime);
    return cacheFile.getParentFile();
  }
 catch (  Exception e) {
    throw new StorageAdapterLoadingException(e,e.getMessage());
  }
 finally {
    S3Utils.closeStreamsQuietly(s3Obj);
    if (tmpFile != null && tmpFile.exists()) {
      log.warn("Deleting tmpFile[%s] in finally block.  Why?",tmpFile);
      tmpFile.delete();
    }
  }
}

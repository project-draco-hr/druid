{
  return new CacheStrategy<Result<TopNResultValue>,Object,TopNQuery>(){
    private final List<AggregatorFactory> aggs=Lists.newArrayList(query.getAggregatorSpecs());
    private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs(),query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));
    @Override public byte[] computeCacheKey(    TopNQuery query){
      final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();
      final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();
      final DimFilter dimFilter=query.getDimensionsFilter();
      final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();
      final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());
      final byte[] granularityBytes=query.getGranularity().cacheKey();
      return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();
    }
    @Override public TypeReference<Object> getCacheObjectClazz(){
      return OBJECT_TYPE_REFERENCE;
    }
    @Override public Function<Result<TopNResultValue>,Object> prepareForCache(){
      return new Function<Result<TopNResultValue>,Object>(){
        private final String[] aggFactoryNames=extractFactoryName(query.getAggregatorSpecs());
        @Override public Object apply(        final Result<TopNResultValue> input){
          List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());
          final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);
          retVal.add(input.getTimestamp().getMillis());
          for (          DimensionAndMetricValueExtractor result : results) {
            List<Object> vals=Lists.newArrayListWithCapacity(aggFactoryNames.length + 2);
            vals.add(result.getDimensionValue(query.getDimensionSpec().getOutputName()));
            for (            String aggName : aggFactoryNames) {
              vals.add(result.getMetric(aggName));
            }
            retVal.add(vals);
          }
          return retVal;
        }
      }
;
    }
    @Override public Function<Object,Result<TopNResultValue>> pullFromCache(){
      return new Function<Object,Result<TopNResultValue>>(){
        private final QueryGranularity granularity=query.getGranularity();
        @Override public Result<TopNResultValue> apply(        Object input){
          List<Object> results=(List<Object>)input;
          List<Map<String,Object>> retVal=Lists.newArrayListWithCapacity(results.size());
          Iterator<Object> inputIter=results.iterator();
          DateTime timestamp=granularity.toDateTime(((Number)inputIter.next()).longValue());
          while (inputIter.hasNext()) {
            List<Object> result=(List<Object>)inputIter.next();
            Map<String,Object> vals=Maps.newLinkedHashMap();
            Iterator<AggregatorFactory> aggIter=aggs.iterator();
            Iterator<Object> resultIter=result.iterator();
            vals.put(query.getDimensionSpec().getOutputName(),resultIter.next());
            while (aggIter.hasNext() && resultIter.hasNext()) {
              final AggregatorFactory factory=aggIter.next();
              vals.put(factory.getName(),factory.deserialize(resultIter.next()));
            }
            for (            PostAggregator postAgg : postAggs) {
              vals.put(postAgg.getName(),postAgg.compute(vals));
            }
            retVal.add(vals);
          }
          return new Result<>(timestamp,new TopNResultValue(retVal));
        }
      }
;
    }
  }
;
}

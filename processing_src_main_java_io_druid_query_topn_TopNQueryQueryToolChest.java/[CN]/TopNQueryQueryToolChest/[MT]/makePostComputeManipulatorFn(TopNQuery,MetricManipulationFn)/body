{
  final ExtractionFn extractionFn=TopNQueryEngine.canApplyExtractionInPost(query) ? query.getDimensionSpec().getExtractionFn() : null;
  return new Function<Result<TopNResultValue>,Result<TopNResultValue>>(){
    private String dimension=query.getDimensionSpec().getOutputName();
    private final AggregatorFactory[] aggregatorFactories=query.getAggregatorSpecs().toArray(new AggregatorFactory[0]);
    private final String[] aggFactoryNames=extractFactoryName(query.getAggregatorSpecs());
    private final PostAggregator[] postAggregators=query.getPostAggregatorSpecs().toArray(new PostAggregator[0]);
    @Override public Result<TopNResultValue> apply(    Result<TopNResultValue> result){
      List<Map<String,Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue(),new Function<DimensionAndMetricValueExtractor,Map<String,Object>>(){
        @Override public Map<String,Object> apply(        DimensionAndMetricValueExtractor input){
          final Map<String,Object> values=Maps.newHashMapWithExpectedSize(aggregatorFactories.length + query.getPostAggregatorSpecs().size() + 1);
          for (int i=0; i < aggFactoryNames.length; ++i) {
            final String name=aggFactoryNames[i];
            values.put(name,input.getMetric(name));
          }
          for (          PostAggregator postAgg : postAggregators) {
            Object calculatedPostAgg=input.getMetric(postAgg.getName());
            if (calculatedPostAgg != null) {
              values.put(postAgg.getName(),calculatedPostAgg);
            }
 else {
              values.put(postAgg.getName(),postAgg.compute(values));
            }
          }
          for (int i=0; i < aggFactoryNames.length; ++i) {
            final String name=aggFactoryNames[i];
            values.put(name,fn.manipulate(aggregatorFactories[i],input.getMetric(name)));
          }
          final Object dimValue=input.getDimensionValue(dimension);
          values.put(dimension,extractionFn == null ? dimValue : extractionFn.apply(dimValue));
          return values;
        }
      }
));
      return new Result<>(result.getTimestamp(),new TopNResultValue(serializedValues));
    }
  }
;
}

{
  final ThresholdAdjustingQueryRunner thresholdRunner=new ThresholdAdjustingQueryRunner(runner,config);
  return new QueryRunner<Result<TopNResultValue>>(){
    @Override public Sequence<Result<TopNResultValue>> run(    final Query<Result<TopNResultValue>> query,    final Map<String,Object> responseContext){
      final Sequence<Result<TopNResultValue>> resultSequence=thresholdRunner.run(query,responseContext);
      final TopNQuery topNQuery=(TopNQuery)query;
      if (!TopNQueryEngine.canApplyExtractionInPost(topNQuery)) {
        return resultSequence;
      }
 else {
        return Sequences.map(resultSequence,new Function<Result<TopNResultValue>,Result<TopNResultValue>>(){
          @Override public Result<TopNResultValue> apply(          Result<TopNResultValue> input){
            TopNResultValue resultValue=input.getValue();
            return new Result<TopNResultValue>(input.getTimestamp(),new TopNResultValue(Lists.transform(resultValue.getValue(),new Function<DimensionAndMetricValueExtractor,DimensionAndMetricValueExtractor>(){
              @Override public DimensionAndMetricValueExtractor apply(              DimensionAndMetricValueExtractor input){
                String dimOutputName=topNQuery.getDimensionSpec().getOutputName();
                String dimValue=input.getStringDimensionValue(dimOutputName);
                Map<String,Object> map=input.getBaseObject();
                map.put(dimOutputName,topNQuery.getDimensionSpec().getExtractionFn().apply(dimValue));
                return input;
              }
            }
)));
          }
        }
);
      }
    }
  }
;
}

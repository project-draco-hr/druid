{
  RequestBuilder requestBuilder=new RequestBuilder(httpClient,HttpMethod.POST,new URL("http://foo.com"));
  EasyMock.expect(httpClient.post(EasyMock.<URL>anyObject())).andReturn(requestBuilder).atLeastOnce();
  EasyMock.expect(httpClient.go(EasyMock.<Request>anyObject())).andReturn(SettableFuture.create()).atLeastOnce();
  EasyMock.replay(httpClient);
  final ServerSelector serverSelector=new ServerSelector(new DataSegment("test",new Interval("2013-01-01/2013-01-02"),new DateTime("2013-01-01").toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),0,0L));
  DirectDruidClient client1=new DirectDruidClient(new ReflectionQueryToolChestWarehouse(),new DefaultObjectMapper(new SmileFactory()),httpClient,"foo");
  DirectDruidClient client2=new DirectDruidClient(new ReflectionQueryToolChestWarehouse(),new DefaultObjectMapper(new SmileFactory()),httpClient,"foo2");
  QueryableDruidServer queryableDruidServer1=new QueryableDruidServer(new DruidServer("test1","localhost",0,"historical",DruidServer.DEFAULT_TIER,0),client1);
  serverSelector.addServer(queryableDruidServer1);
  QueryableDruidServer queryableDruidServer2=new QueryableDruidServer(new DruidServer("test1","localhost",0,"historical",DruidServer.DEFAULT_TIER,0),client2);
  serverSelector.addServer(queryableDruidServer2);
  TimeBoundaryQuery query=Druids.newTimeBoundaryQueryBuilder().dataSource("test").build();
  client1.run(query);
  client1.run(query);
  client1.run(query);
  Assert.assertTrue(client1.getNumOpenConnections() == 3);
  client2.run(query);
  client2.run(query);
  Assert.assertTrue(client2.getNumOpenConnections() == 2);
  Assert.assertTrue(serverSelector.pick() == queryableDruidServer2);
  EasyMock.verify(httpClient);
}

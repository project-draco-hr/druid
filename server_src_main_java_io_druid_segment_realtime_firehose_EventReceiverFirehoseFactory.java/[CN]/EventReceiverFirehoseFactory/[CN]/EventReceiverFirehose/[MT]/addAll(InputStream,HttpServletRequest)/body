{
  final String reqContentType=req.getContentType();
  final boolean isSmile=SmileMediaTypes.APPLICATION_JACKSON_SMILE.equals(reqContentType);
  final String contentType=isSmile ? SmileMediaTypes.APPLICATION_JACKSON_SMILE : MediaType.APPLICATION_JSON;
  ObjectMapper objectMapper=isSmile ? smileMapper : jsonMapper;
  Collection<Map<String,Object>> events=null;
  try {
    events=objectMapper.readValue(in,new TypeReference<Collection<Map<String,Object>>>(){
    }
);
  }
 catch (  IOException e) {
    return Response.serverError().entity(ImmutableMap.<String,Object>of("error",e.getMessage())).build();
  }
  log.debug("Adding %,d events to firehose: %s",events.size(),serviceName);
  final List<InputRow> rows=Lists.newArrayList();
  for (  final Map<String,Object> event : events) {
    rows.add(parser.parse(event));
  }
  try {
    for (    final InputRow row : rows) {
      boolean added=false;
      while (!closed && !added) {
        added=buffer.offer(row,500,TimeUnit.MILLISECONDS);
      }
      if (!added) {
        throw new IllegalStateException("Cannot add events to closed firehose!");
      }
    }
    return Response.ok(objectMapper.writeValueAsString(ImmutableMap.of("eventCount",events.size())),contentType).build();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw Throwables.propagate(e);
  }
catch (  JsonProcessingException e) {
    throw Throwables.propagate(e);
  }
}

{
  DefaultLimitSpec limitSpec=new DefaultLimitSpec(ImmutableList.of(new OrderByColumnSpec("k1",OrderByColumnSpec.Direction.ASCENDING)),2);
  Function<Sequence<Row>,Sequence<Row>> limitFn=limitSpec.build(ImmutableList.<DimensionSpec>of(new DefaultDimensionSpec("k1","k1")),ImmutableList.<AggregatorFactory>of(new LongSumAggregatorFactory("k2","k2")),ImmutableList.<PostAggregator>of(new ConstantPostAggregator("k3",1L)));
  Assert.assertEquals(ImmutableList.of(testRowsList.get(1),testRowsList.get(2)),Sequences.toList(limitFn.apply(testRowsSequence),new ArrayList<Row>()));
  limitFn=limitSpec.build(ImmutableList.<DimensionSpec>of(new DefaultDimensionSpec("k1","k1")),ImmutableList.<AggregatorFactory>of(new LongSumAggregatorFactory("k1","k1")),ImmutableList.<PostAggregator>of(new ConstantPostAggregator("k3",1L)));
  Assert.assertEquals(ImmutableList.of(testRowsList.get(0),testRowsList.get(1)),Sequences.toList(limitFn.apply(testRowsSequence),new ArrayList<Row>()));
  limitFn=limitSpec.build(ImmutableList.<DimensionSpec>of(new DefaultDimensionSpec("k1","k1")),ImmutableList.<AggregatorFactory>of(new LongSumAggregatorFactory("k2","k2")),ImmutableList.<PostAggregator>of(new ArithmeticPostAggregator("k1","+",ImmutableList.<PostAggregator>of(new ConstantPostAggregator("x",1),new ConstantPostAggregator("y",1)))));
  Assert.assertEquals(ImmutableList.of(testRowsList.get(0),testRowsList.get(1)),Sequences.toList(limitFn.apply(testRowsSequence),new ArrayList<Row>()));
}

{
  this.leaderSelector=new LeaderSelector(curator,indexerCoordinatorConfig.getLeaderLatchPath(),new LeaderSelectorListener(){
    @Override public void takeLeadership(    CuratorFramework client) throws Exception {
      giant.lock();
      try {
        log.info("By the power of Grayskull, I have the power!");
        final TaskRunner runner=runnerFactory.build();
        taskRunner=runner;
        final ResourceManagementScheduler scheduler=managementSchedulerFactory.build(runner);
        final TaskConsumer consumer=new TaskConsumer(queue,runner,mergerDBCoordinator,emitter);
        final Lifecycle leaderLifecycle=new Lifecycle();
        leaderLifecycle.addManagedInstance(queue);
        leaderLifecycle.addManagedInstance(scheduler);
        leaderLifecycle.addManagedInstance(runner);
        Initialization.makeServiceDiscoveryClient(curator,serviceDiscoveryConfig,leaderLifecycle);
        leaderLifecycle.addManagedInstance(consumer);
        leaderLifecycle.start();
        leading=true;
        try {
          while (leading) {
            mayBeStopped.await();
          }
        }
  finally {
          log.info("Bowing out!");
          leaderLifecycle.stop();
        }
      }
 catch (      Exception e) {
        log.makeAlert(e,"Failed to lead").emit();
        throw Throwables.propagate(e);
      }
 finally {
        giant.unlock();
      }
    }
    @Override public void stateChanged(    CuratorFramework client,    ConnectionState newState){
      if (newState == ConnectionState.LOST || newState == ConnectionState.SUSPENDED) {
        stopLeading();
      }
    }
  }
);
  leaderSelector.setId(indexerCoordinatorConfig.getServerName());
  leaderSelector.autoRequeue();
}

{
  try {
    File tmpFile=File.createTempFile("yay","boo");
    tmpFile.delete();
    File mergedFile=new File(tmpFile,"merged");
    mergedFile.mkdirs();
    mergedFile.deleteOnExit();
    List<File> filesToMap=makeFilesToMap(tmpFile,files);
    VersionedIntervalTimeline<Integer,File> timeline=new VersionedIntervalTimeline<Integer,File>(Ordering.natural().nullsFirst());
    ShardSpec noneShardSpec=new NoneShardSpec();
    for (int i=0; i < intervals.size(); i++) {
      timeline.add(intervals.get(i),i,noneShardSpec.createChunk(filesToMap.get(i)));
    }
    final List<IndexableAdapter> adapters=Lists.newArrayList(Iterables.concat(Iterables.transform(timeline.lookup(new Interval("1000-01-01/3000-01-01")),new Function<TimelineObjectHolder<Integer,File>,Iterable<IndexableAdapter>>(){
      @Override public Iterable<IndexableAdapter> apply(      final TimelineObjectHolder<Integer,File> timelineObjectHolder){
        return Iterables.transform(timelineObjectHolder.getObject(),new Function<PartitionChunk<File>,IndexableAdapter>(){
          @Override public IndexableAdapter apply(          PartitionChunk<File> chunk){
            try {
              return new RowboatFilteringIndexAdapter(new QueryableIndexIndexableAdapter(INDEX_IO.loadIndex(chunk.getObject())),new Predicate<Rowboat>(){
                @Override public boolean apply(                Rowboat input){
                  return timelineObjectHolder.getInterval().contains(input.getTimestamp());
                }
              }
);
            }
 catch (            IOException e) {
              throw Throwables.propagate(e);
            }
          }
        }
);
      }
    }
)));
    return INDEX_IO.loadIndex(INDEX_MERGER.append(adapters,mergedFile,indexSpec));
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
}

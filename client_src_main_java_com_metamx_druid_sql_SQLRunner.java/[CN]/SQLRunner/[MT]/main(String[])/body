{
  String hostname=args.length > 0 ? args[0] : "localhost";
  String sql=args.length > 1 ? args[1] : STATEMENT;
  ObjectWriter json=new DefaultObjectMapper().writerWithDefaultPrettyPrinter();
  CharStream stream=new ANTLRInputStream(sql);
  DruidSQLLexer lexer=new DruidSQLLexer(stream);
  TokenStream tokenStream=new CommonTokenStream(lexer);
  DruidSQLParser parser=new DruidSQLParser(tokenStream);
  parser.setErrorHandler(new BailErrorStrategy());
  DruidSQLParser.QueryContext queryContext=parser.query();
  Query query;
  if (parser.groupByDimensions.isEmpty()) {
    query=Druids.newTimeseriesQueryBuilder().dataSource(parser.getDataSource()).aggregators(new ArrayList<AggregatorFactory>(parser.aggregators.values())).postAggregators(parser.postAggregators).intervals(parser.intervals).granularity(parser.granularity).filters(parser.filter).build();
  }
 else {
    query=GroupByQuery.builder().setDataSource(parser.getDataSource()).setAggregatorSpecs(new ArrayList<AggregatorFactory>(parser.aggregators.values())).setPostAggregatorSpecs(parser.postAggregators).setInterval(parser.intervals).setGranularity(parser.granularity).setDimFilter(parser.filter).setDimensions(new ArrayList<DimensionSpec>(parser.groupByDimensions.values())).build();
  }
  String queryStr=json.writeValueAsString(query);
  System.err.println(queryStr);
  PostMethod req=new PostMethod("http://" + hostname + "/druid/v2/?pretty");
  req.setRequestEntity(new StringRequestEntity(queryStr,"application/json","utf-8"));
  new HttpClient().executeMethod(req);
  BufferedReader stdInput=new BufferedReader(new InputStreamReader(req.getResponseBodyAsStream()));
  String s;
  while ((s=stdInput.readLine()) != null)   System.out.println(s);
  stdInput.close();
}

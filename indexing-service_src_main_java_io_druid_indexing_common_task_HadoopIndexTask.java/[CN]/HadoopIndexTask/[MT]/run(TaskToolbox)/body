{
  final DefaultTeslaAether aetherClient=Initialization.getAetherClient(extensionsConfig);
  final ClassLoader hadoopLoader=Initialization.getClassLoaderForCoordinates(aetherClient,hadoopCoordinates);
  final List<URL> extensionURLs=Lists.newArrayList();
  for (  String coordinate : extensionsConfig.getCoordinates()) {
    final ClassLoader coordinateLoader=Initialization.getClassLoaderForCoordinates(aetherClient,coordinate);
    extensionURLs.addAll(Arrays.asList(((URLClassLoader)coordinateLoader).getURLs()));
  }
  final List<URL> nonHadoopURLs=Lists.newArrayList();
  nonHadoopURLs.addAll(Arrays.asList(((URLClassLoader)HadoopIndexTask.class.getClassLoader()).getURLs()));
  final List<URL> driverURLs=Lists.newArrayList();
  driverURLs.addAll(nonHadoopURLs);
  driverURLs.addAll(Arrays.asList(((URLClassLoader)hadoopLoader).getURLs()));
  final URLClassLoader loader=new URLClassLoader(driverURLs.toArray(new URL[driverURLs.size()]),null);
  Thread.currentThread().setContextClassLoader(loader);
  final List<URL> jobUrls=Lists.newArrayList();
  jobUrls.addAll(nonHadoopURLs);
  jobUrls.addAll(extensionURLs);
  System.setProperty("druid.hadoop.internal.classpath",Joiner.on(File.pathSeparator).join(jobUrls));
  final Class<?> mainClass=loader.loadClass(HadoopIndexTaskInnerProcessing.class.getName());
  final Method mainMethod=mainClass.getMethod("runTask",String[].class);
  final TaskLock myLock=Iterables.getOnlyElement(getTaskLocks(toolbox));
  log.info("Setting version to: %s",myLock.getVersion());
  String[] args=new String[]{toolbox.getObjectMapper().writeValueAsString(schema),myLock.getVersion(),toolbox.getConfig().getHadoopWorkingPath(),toolbox.getSegmentPusher().getPathForHadoop(getDataSource())};
  String segments=(String)mainMethod.invoke(null,new Object[]{args});
  if (segments != null) {
    List<DataSegment> publishedSegments=toolbox.getObjectMapper().readValue(segments,new TypeReference<List<DataSegment>>(){
    }
);
    toolbox.pushSegments(publishedSegments);
    return TaskStatus.success(getId());
  }
 else {
    return TaskStatus.failure(getId());
  }
}

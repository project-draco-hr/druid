{
  List<HavingSpec> havings=Arrays.asList(new GreaterThanHavingSpec("agg",Double.valueOf(1.3)),new OrHavingSpec(Arrays.asList(new LessThanHavingSpec("lessAgg",Long.valueOf(1L)),new NotHavingSpec(new EqualToHavingSpec("equalAgg",Double.valueOf(2))))));
  HavingSpec andHavingSpec=new AndHavingSpec(havings);
  Map<String,Object> notMap=ImmutableMap.<String,Object>of("type","not","havingSpec",ImmutableMap.of("type","equalTo","aggregation","equalAgg","value",2.0));
  Map<String,Object> lessMap=ImmutableMap.<String,Object>of("type","lessThan","aggregation","lessAgg","value",1);
  Map<String,Object> greaterMap=ImmutableMap.<String,Object>of("type","greaterThan","aggregation","agg","value",1.3);
  Map<String,Object> orMap=ImmutableMap.<String,Object>of("type","or","havingSpecs",ImmutableList.of(lessMap,notMap));
  Map<String,Object> payloadMap=ImmutableMap.<String,Object>of("type","and","havingSpecs",ImmutableList.of(greaterMap,orMap));
  ObjectMapper mapper=new DefaultObjectMapper();
  assertEquals(andHavingSpec,mapper.convertValue(payloadMap,AndHavingSpec.class));
}

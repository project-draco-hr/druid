{
  final ListenableFuture<Handle> setupFuture=setupTeardownService.submit(new Callable<Handle>(){
    @Override public Handle call(){
      final Handle handle=derbyConnectorRule.getConnector().getDBI().open();
      Assert.assertEquals(0,handle.createStatement(String.format("CREATE TABLE %s (%s TIMESTAMP, %s VARCHAR(64), %s VARCHAR(64))",tableName,tsColumn_,keyName,valName)).setQueryTimeout(1).execute());
      handle.createStatement(String.format("TRUNCATE TABLE %s",tableName)).setQueryTimeout(1).execute();
      handle.commit();
      closer.register(new Closeable(){
        @Override public void close() throws IOException {
          handle.createStatement("DROP TABLE " + tableName).setQueryTimeout(1).execute();
          final ListenableFuture future=setupTeardownService.submit(new Runnable(){
            @Override public void run(){
              handle.close();
            }
          }
);
          try (Closeable closeable=new Closeable(){
            @Override public void close() throws IOException {
              future.cancel(true);
            }
          }
){
            future.get(10,TimeUnit.SECONDS);
          }
 catch (          InterruptedException|ExecutionException|TimeoutException e) {
            throw new IOException("Error closing handle",e);
          }
        }
      }
);
      closer.register(new Closeable(){
        @Override public void close() throws IOException {
          if (extractionCacheManager == null) {
            return;
          }
          final NamespaceExtractionCacheManager.NamespaceImplData implData=extractionCacheManager.implData.get(namespace);
          if (implData != null && implData.future != null) {
            implData.future.cancel(true);
            Assert.assertTrue(implData.future.isDone());
          }
        }
      }
);
      for (      Map.Entry<String,String> entry : renames.entrySet()) {
        try {
          insertValues(handle,entry.getKey(),entry.getValue(),"2015-01-01 00:00:00");
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          throw Throwables.propagate(e);
        }
      }
      extractionCacheManager=new OnHeapNamespaceExtractionCacheManager(lifecycle,new NoopServiceEmitter(),ImmutableMap.<Class<? extends ExtractionNamespace>,ExtractionNamespaceCacheFactory<?>>of(JDBCExtractionNamespace.class,new JDBCExtractionNamespaceCacheFactory(){
        @Override public Callable<String> getCachePopulator(        final String id,        final JDBCExtractionNamespace namespace,        final String lastVersion,        final Map<String,String> cache){
          final Callable<String> cachePopulator=super.getCachePopulator(id,namespace,lastVersion,cache);
          return new Callable<String>(){
            @Override public String call() throws Exception {
              updateLock.lockInterruptibly();
              try {
                log.debug("Running cache populator");
                try {
                  return cachePopulator.call();
                }
  finally {
                  updates.incrementAndGet();
                }
              }
  finally {
                updateLock.unlock();
              }
            }
          }
;
        }
      }
));
      try {
        lifecycle.start();
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
      closer.register(new Closeable(){
        @Override public void close() throws IOException {
          final ListenableFuture future=setupTeardownService.submit(new Runnable(){
            @Override public void run(){
              lifecycle.stop();
            }
          }
);
          try (final Closeable closeable=new Closeable(){
            @Override public void close() throws IOException {
              future.cancel(true);
            }
          }
){
            future.get(30,TimeUnit.SECONDS);
          }
 catch (          InterruptedException|ExecutionException|TimeoutException e) {
            throw new IOException("Error stopping lifecycle",e);
          }
        }
      }
);
      return handle;
    }
  }
);
  try (final Closeable closeable=new Closeable(){
    @Override public void close() throws IOException {
      if (!setupFuture.isDone() && !setupFuture.cancel(true) && !setupFuture.isDone()) {
        throw new IOException("Unable to stop future");
      }
    }
  }
){
    handleRef=setupFuture.get(10,TimeUnit.SECONDS);
  }
   Assert.assertNotNull(handleRef);
}

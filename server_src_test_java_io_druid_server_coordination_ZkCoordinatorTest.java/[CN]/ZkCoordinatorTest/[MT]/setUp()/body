{
  setupServerAndCurator();
  curator.start();
  try {
    infoDir=new File(File.createTempFile("blah","blah2").getParent(),"ZkCoordinatorTest");
    infoDir.mkdirs();
    for (    File file : infoDir.listFiles()) {
      file.delete();
    }
    log.info("Creating tmp test files in [%s]",infoDir);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  serverManager=new ServerManager(new CacheTestSegmentLoader(),new NoopQueryRunnerFactoryConglomerate(),new NoopServiceEmitter(),MoreExecutors.sameThreadExecutor(),MoreExecutors.sameThreadExecutor(),new DefaultObjectMapper(),new LocalCacheProvider().get(),new CacheConfig());
  final DruidServerMetadata me=new DruidServerMetadata("dummyServer","dummyHost",0,"dummyType","normal",0);
  final ZkPathsConfig zkPaths=new ZkPathsConfig(){
    @Override public String getBase(){
      return "/druid";
    }
  }
;
  announceCount=new AtomicInteger(0);
  announcer=new DataSegmentAnnouncer(){
    private final DataSegmentAnnouncer delegate=new BatchDataSegmentAnnouncer(me,new BatchDataSegmentAnnouncerConfig(),zkPaths,new Announcer(curator,Execs.singleThreaded("blah")),jsonMapper);
    @Override public void announceSegment(    DataSegment segment) throws IOException {
      announceCount.incrementAndGet();
      delegate.announceSegment(segment);
    }
    @Override public void unannounceSegment(    DataSegment segment) throws IOException {
      announceCount.decrementAndGet();
      delegate.unannounceSegment(segment);
    }
    @Override public void announceSegments(    Iterable<DataSegment> segments) throws IOException {
      announceCount.addAndGet(Iterables.size(segments));
      delegate.announceSegments(segments);
    }
    @Override public void unannounceSegments(    Iterable<DataSegment> segments) throws IOException {
      announceCount.addAndGet(-Iterables.size(segments));
      delegate.unannounceSegments(segments);
    }
  }
;
  zkCoordinator=new ZkCoordinator(jsonMapper,new SegmentLoaderConfig(){
    @Override public File getInfoDir(){
      return infoDir;
    }
    @Override public int getNumLoadingThreads(){
      return 5;
    }
    @Override public int getAnnounceIntervalMillis(){
      return 50;
    }
  }
,zkPaths,me,announcer,curator,serverManager,ScheduledExecutors.createFactory(new Lifecycle()));
}

{
  List<DataSegment> segments=Lists.newLinkedList();
  for (int i=0; i < COUNT; ++i) {
    segments.add(makeSegment("test" + i,"1",new Interval("P1d/2011-04-01")));
    segments.add(makeSegment("test" + i,"1",new Interval("P1d/2011-04-02")));
    segments.add(makeSegment("test" + i,"2",new Interval("P1d/2011-04-02")));
    segments.add(makeSegment("test" + i,"1",new Interval("P1d/2011-04-03")));
    segments.add(makeSegment("test" + i,"1",new Interval("P1d/2011-04-04")));
    segments.add(makeSegment("test" + i,"1",new Interval("P1d/2011-04-05")));
    segments.add(makeSegment("test" + i,"2",new Interval("PT1h/2011-04-04T01")));
    segments.add(makeSegment("test" + i,"2",new Interval("PT1h/2011-04-04T02")));
    segments.add(makeSegment("test" + i,"2",new Interval("PT1h/2011-04-04T03")));
    segments.add(makeSegment("test" + i,"2",new Interval("PT1h/2011-04-04T05")));
    segments.add(makeSegment("test" + i,"2",new Interval("PT1h/2011-04-04T06")));
    segments.add(makeSegment("test_two" + i,"1",new Interval("P1d/2011-04-01")));
    segments.add(makeSegment("test_two" + i,"1",new Interval("P1d/2011-04-02")));
  }
  Collections.sort(segments);
  for (  DataSegment segment : segments) {
    writeSegmentToCache(segment);
  }
  checkCache(segments);
  Assert.assertTrue(serverManager.getDataSourceCounts().isEmpty());
  zkCoordinator.start();
  Assert.assertTrue(!serverManager.getDataSourceCounts().isEmpty());
  for (int i=0; i < COUNT; ++i) {
    Assert.assertEquals(11L,serverManager.getDataSourceCounts().get("test" + i).longValue());
    Assert.assertEquals(2L,serverManager.getDataSourceCounts().get("test_two" + i).longValue());
  }
  Assert.assertEquals(13 * COUNT,announceCount.get());
  zkCoordinator.stop();
  for (  DataSegment segment : segments) {
    deleteSegmentFromCache(segment);
  }
  Assert.assertEquals(0,infoDir.listFiles().length);
  Assert.assertTrue(infoDir.delete());
}

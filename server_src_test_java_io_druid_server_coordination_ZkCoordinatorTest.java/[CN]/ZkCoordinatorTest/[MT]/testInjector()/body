{
  Injector injector=Guice.createInjector(new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(ObjectMapper.class).toInstance(jsonMapper);
      binder.bind(SegmentLoaderConfig.class).toInstance(new SegmentLoaderConfig(){
        @Override public File getInfoDir(){
          return infoDir;
        }
        @Override public int getNumLoadingThreads(){
          return 5;
        }
        @Override public int getAnnounceIntervalMillis(){
          return 50;
        }
      }
);
      binder.bind(ZkPathsConfig.class).toInstance(new ZkPathsConfig(){
        @Override public String getBase(){
          return "/druid";
        }
      }
);
      binder.bind(DruidServerMetadata.class).toInstance(new DruidServerMetadata("dummyServer","dummyHost",0,"dummyType","normal",0));
      binder.bind(DataSegmentAnnouncer.class).toInstance(announcer);
      binder.bind(CuratorFramework.class).toInstance(curator);
      binder.bind(ServerManager.class).toInstance(serverManager);
      binder.bind(ScheduledExecutorFactory.class).toInstance(ScheduledExecutors.createFactory(new Lifecycle()));
    }
  }
);
  ZkCoordinator zkCoordinator=injector.getInstance(ZkCoordinator.class);
  List<DataSegment> segments=Lists.newLinkedList();
  for (int i=0; i < COUNT; ++i) {
    segments.add(makeSegment("test" + i,"1",new Interval("P1d/2011-04-01")));
    segments.add(makeSegment("test" + i,"1",new Interval("P1d/2011-04-02")));
    segments.add(makeSegment("test" + i,"2",new Interval("P1d/2011-04-02")));
    segments.add(makeSegment("test_two" + i,"1",new Interval("P1d/2011-04-01")));
    segments.add(makeSegment("test_two" + i,"1",new Interval("P1d/2011-04-02")));
  }
  Collections.sort(segments);
  for (  DataSegment segment : segments) {
    writeSegmentToCache(segment);
  }
  checkCache(segments);
  Assert.assertTrue(serverManager.getDataSourceCounts().isEmpty());
  zkCoordinator.start();
  Assert.assertTrue(!serverManager.getDataSourceCounts().isEmpty());
  for (int i=0; i < COUNT; ++i) {
    Assert.assertEquals(3L,serverManager.getDataSourceCounts().get("test" + i).longValue());
    Assert.assertEquals(2L,serverManager.getDataSourceCounts().get("test_two" + i).longValue());
  }
  Assert.assertEquals(5 * COUNT,announceCount.get());
  zkCoordinator.stop();
  for (  DataSegment segment : segments) {
    deleteSegmentFromCache(segment);
  }
  Assert.assertEquals(0,infoDir.listFiles().length);
  Assert.assertTrue(infoDir.delete());
}

{
  final Map<SegmentIdentifier,Sink> theSinks=Maps.newHashMap();
  for (  final SegmentIdentifier identifier : identifiers) {
    final Sink sink=sinks.get(identifier);
    if (sink == null) {
      throw new NullPointerException("No sink for identifier: " + identifier);
    }
    theSinks.put(identifier,sink);
    sink.finishWriting();
  }
  return Futures.transform(persistAll(committer),new Function<Object,SegmentsAndMetadata>(){
    @Override public SegmentsAndMetadata apply(    Object commitMetadata){
      final List<DataSegment> dataSegments=Lists.newArrayList();
      for (      Map.Entry<SegmentIdentifier,Sink> entry : theSinks.entrySet()) {
        if (droppingSinks.contains(entry.getKey())) {
          log.info("Skipping push of currently-dropping sink[%s]",entry.getKey());
          continue;
        }
        final DataSegment dataSegment=mergeAndPush(entry.getKey(),entry.getValue());
        if (dataSegment != null) {
          dataSegments.add(dataSegment);
        }
 else {
          log.warn("mergeAndPush[%s] returned null, skipping.",entry.getKey());
        }
      }
      return new SegmentsAndMetadata(dataSegments,commitMetadata);
    }
  }
,mergeExecutor);
}

{
  final Map<SegmentIdentifier,Integer> commitHydrants=Maps.newHashMap();
  final List<Pair<FireHydrant,SegmentIdentifier>> indexesToPersist=Lists.newArrayList();
  final Set<SegmentIdentifier> identifiers=sinks.keySet();
  for (  SegmentIdentifier identifier : identifiers) {
    final Sink sink=sinks.get(identifier);
    final List<FireHydrant> hydrants=Lists.newArrayList(sink);
    commitHydrants.put(identifier,hydrants.size());
    final int limit=sink.isWritable() ? hydrants.size() - 1 : hydrants.size();
    for (    FireHydrant hydrant : hydrants.subList(0,limit)) {
      if (!hydrant.hasSwapped()) {
        log.info("Hydrant[%s] hasn't persisted yet, persisting. Segment[%s]",hydrant,identifier);
        indexesToPersist.add(Pair.of(hydrant,identifier));
      }
    }
    if (sink.swappable()) {
      indexesToPersist.add(Pair.of(sink.swap(),identifier));
    }
  }
  log.info("Submitting persist runnable for dataSource[%s]",schema.getDataSource());
  final String threadName=String.format("%s-incremental-persist",schema.getDataSource());
  final Object commitMetadata=committer.getMetadata();
  final Stopwatch runExecStopwatch=Stopwatch.createStarted();
  final Stopwatch persistStopwatch=Stopwatch.createStarted();
  final ListenableFuture<Object> future=persistExecutor.submit(new ThreadRenamingCallable<Object>(threadName){
    @Override public Object doCall(){
      try {
        for (        Pair<FireHydrant,SegmentIdentifier> pair : indexesToPersist) {
          metrics.incrementRowOutputCount(persistHydrant(pair.lhs,pair.rhs));
        }
        log.info("Committing metadata[%s] for sinks[%s].",commitMetadata,Joiner.on(", ").join(Iterables.transform(commitHydrants.entrySet(),new Function<Map.Entry<SegmentIdentifier,Integer>,String>(){
          @Override public String apply(          Map.Entry<SegmentIdentifier,Integer> entry){
            return String.format("%s:%d",entry.getKey().getIdentifierAsString(),entry.getValue());
          }
        }
)));
        committer.run();
        objectMapper.writeValue(computeCommitFile(),Committed.create(commitHydrants,commitMetadata));
        return commitMetadata;
      }
 catch (      Exception e) {
        metrics.incrementFailedPersists();
        throw Throwables.propagate(e);
      }
 finally {
        metrics.incrementNumPersists();
        metrics.incrementPersistTimeMillis(persistStopwatch.elapsed(TimeUnit.MILLISECONDS));
        persistStopwatch.stop();
      }
    }
  }
);
  final long startDelay=runExecStopwatch.elapsed(TimeUnit.MILLISECONDS);
  metrics.incrementPersistBackPressureMillis(startDelay);
  if (startDelay > WARN_DELAY) {
    log.warn("Ingestion was throttled for [%,d] millis because persists were pending.",startDelay);
  }
  runExecStopwatch.stop();
  resetNextFlush();
  rowsCurrentlyInMemory.set(0);
  return future;
}

{
  if (conglomerate == null) {
    throw new IllegalStateException("Don't query me, bro.");
  }
  if (!query.getDataSource().getNames().contains(getDataSource())) {
    log.makeAlert("Received query for unknown dataSource").addData("dataSource",query.getDataSource()).emit();
    return new NoopQueryRunner<>();
  }
  final QueryRunnerFactory<T,Query<T>> factory=conglomerate.findFactory(query);
  if (factory == null) {
    throw new ISE("Unknown query type[%s].",query.getClass());
  }
  final QueryToolChest<T,Query<T>> toolchest=factory.getToolchest();
  final Function<Query<T>,ServiceMetricEvent.Builder> builderFn=new Function<Query<T>,ServiceMetricEvent.Builder>(){
    @Override public ServiceMetricEvent.Builder apply(    @Nullable Query<T> input){
      return toolchest.makeMetricBuilder(query);
    }
  }
;
  final boolean skipIncrementalSegment=query.getContextValue(CONTEXT_SKIP_INCREMENTAL_SEGMENT,false);
  return toolchest.mergeResults(factory.mergeRunners(queryExecutorService,FunctionalIterable.create(specs).transform(new Function<SegmentDescriptor,QueryRunner<T>>(){
    @Override public QueryRunner<T> apply(    final SegmentDescriptor descriptor){
      final PartitionHolder<Sink> holder=sinkTimeline.findEntry(descriptor.getInterval(),descriptor.getVersion());
      if (holder == null) {
        return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);
      }
      final PartitionChunk<Sink> chunk=holder.getChunk(descriptor.getPartitionNumber());
      if (chunk == null) {
        return new ReportTimelineMissingSegmentQueryRunner<>(descriptor);
      }
      final Sink theSink=chunk.getObject();
      return new SpecificSegmentQueryRunner<>(new MetricsEmittingQueryRunner<>(emitter,builderFn,new BySegmentQueryRunner<T>(theSink.getSegment().getIdentifier(),descriptor.getInterval().getStart(),factory.mergeRunners(MoreExecutors.sameThreadExecutor(),Iterables.transform(theSink,new Function<FireHydrant,QueryRunner<T>>(){
        @Override public QueryRunner<T> apply(        final FireHydrant hydrant){
          if (skipIncrementalSegment && !hydrant.hasSwapped()) {
            return new NoopQueryRunner<>();
          }
          final Pair<Segment,Closeable> segment=hydrant.getAndIncrementSegment();
          try {
            QueryRunner<T> baseRunner=QueryRunnerHelper.makeClosingQueryRunner(factory.createRunner(segment.lhs),segment.rhs);
            if (hydrant.hasSwapped() && cache.isLocal()) {
              return new CachingQueryRunner<>(makeHydrantCacheIdentifier(hydrant,segment.lhs),descriptor,objectMapper,cache,toolchest,baseRunner,MoreExecutors.sameThreadExecutor(),cacheConfig);
            }
 else {
              return baseRunner;
            }
          }
 catch (          RuntimeException e) {
            CloseQuietly.close(segment.rhs);
            throw e;
          }
        }
      }
)))).withWaitMeasuredFromNow(),new SpecificSegmentSpec(descriptor));
    }
  }
)));
}

{
  final Lifecycle lifecycle=getLifecycle();
  final ServiceEmitter emitter=getEmitter();
  final List<Monitor> monitors=getMonitors();
  final QueryRunnerFactoryConglomerate conglomerate=getConglomerate();
  final ExecutorService executorService=new MetricsEmittingExecutorService(ExecutorServices.create(getLifecycle(),getConfigFactory().buildWithReplacements(ExecutorServiceConfig.class,ImmutableMap.of("base_path","druid.processing"))),emitter,new ServiceMetricEvent.Builder());
  final ServerManager serverManager=new ServerManager(getSegmentLoader(),conglomerate,emitter,executorService);
  final ZkCoordinator coordinator=new ZkCoordinator(getJsonMapper(),null,getZkPaths(),getDruidServerMetadata(),getAnnouncer(),getCuratorFramework(),serverManager);
  lifecycle.addManagedInstance(coordinator);
  monitors.add(new ServerMonitor(getConfigFactory().build(DruidServerConfig.class),serverManager));
  startMonitoring(monitors);
  final ServletContextHandler root=new ServletContextHandler(getServer(),"/",ServletContextHandler.SESSIONS);
  root.addServlet(new ServletHolder(new StatusServlet()),"/status");
  root.addServlet(new ServletHolder(new QueryServlet(getJsonMapper(),getSmileMapper(),serverManager,emitter,getRequestLogger())),"/druid/v2/*");
}

{
  return new Yielder<OutType>(){
    @Override public OutType get(){
      return combiningAccumulator.getRetVal();
    }
    @Override public Yielder<OutType> next(    OutType outType){
      T nextIn=yielder.get();
      combiningAccumulator.setRetVal(outType);
      final Yielder<T> baseYielder=yielder.next(nextIn);
      if (baseYielder.isDone()) {
        final OutType outValue=combiningAccumulator.getAccumulator().accumulate(outType,baseYielder.get());
        return Yielders.done(outValue,baseYielder);
      }
      return makeYielder(baseYielder,combiningAccumulator);
    }
    @Override public boolean isDone(){
      return false;
    }
    @Override public void close() throws IOException {
      yielder.close();
    }
  }
;
}

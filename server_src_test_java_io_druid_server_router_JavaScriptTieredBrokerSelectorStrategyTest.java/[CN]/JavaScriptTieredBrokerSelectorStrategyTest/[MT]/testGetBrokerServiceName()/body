{
  final LinkedHashMap<String,String> tierBrokerMap=new LinkedHashMap<>();
  tierBrokerMap.put("fast","druid/fastBroker");
  tierBrokerMap.put("fast","druid/broker");
  tierBrokerMap.put("slow","druid/slowBroker");
  final TieredBrokerConfig tieredBrokerConfig=new TieredBrokerConfig(){
    @Override public String getDefaultBrokerServiceName(){
      return "druid/broker";
    }
    @Override public LinkedHashMap<String,String> getTierToBrokerMap(){
      return tierBrokerMap;
    }
  }
;
  final TopNQueryBuilder queryBuilder=new TopNQueryBuilder().dataSource("test").intervals("2014/2015").dimension("bigdim").metric("count").threshold(1).aggregators(ImmutableList.<AggregatorFactory>of(new CountAggregatorFactory("count")));
  Assert.assertEquals(Optional.absent(),jsStrategy.getBrokerServiceName(tieredBrokerConfig,queryBuilder.build()));
  Assert.assertEquals(Optional.absent(),jsStrategy.getBrokerServiceName(tieredBrokerConfig,Druids.newTimeBoundaryQueryBuilder().dataSource("test").bound("maxTime").build()));
  Assert.assertEquals(Optional.of("druid/slowBroker"),jsStrategy.getBrokerServiceName(tieredBrokerConfig,queryBuilder.aggregators(ImmutableList.of(new CountAggregatorFactory("count"),new LongSumAggregatorFactory("longSum","a"),new DoubleSumAggregatorFactory("doubleSum","b"))).build()));
  tierBrokerMap.clear();
  Assert.assertEquals(Optional.of("druid/broker"),jsStrategy.getBrokerServiceName(tieredBrokerConfig,queryBuilder.aggregators(ImmutableList.of(new CountAggregatorFactory("count"),new LongSumAggregatorFactory("longSum","a"),new DoubleSumAggregatorFactory("doubleSum","b"))).build()));
}

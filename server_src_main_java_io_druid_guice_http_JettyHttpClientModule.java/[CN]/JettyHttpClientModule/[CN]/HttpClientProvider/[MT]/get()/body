{
  final DruidHttpClientConfig config=getConfigProvider().get().get();
  final HttpClient httpClient;
  if (getSslContextBinding() != null) {
    final SslContextFactory sslContextFactory=new SslContextFactory();
    sslContextFactory.setSslContext(getSslContextBinding().getProvider().get());
    httpClient=new HttpClient(sslContextFactory);
  }
 else {
    httpClient=new HttpClient();
  }
  httpClient.setIdleTimeout(config.getReadTimeout().getMillis());
  httpClient.setMaxConnectionsPerDestination(config.getNumConnections());
  final QueuedThreadPool pool=new QueuedThreadPool(config.getNumMaxThreads());
  pool.setName(JettyHttpClientModule.class.getSimpleName() + "-threadPool-" + pool.hashCode());
  httpClient.setExecutor(pool);
  final Lifecycle lifecycle=getLifecycleProvider().get();
  try {
    lifecycle.addMaybeStartHandler(new Lifecycle.Handler(){
      @Override public void start() throws Exception {
      }
      @Override public void stop(){
        try {
          httpClient.stop();
        }
 catch (        Exception e) {
          throw Throwables.propagate(e);
        }
      }
    }
);
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
  return httpClient;
}

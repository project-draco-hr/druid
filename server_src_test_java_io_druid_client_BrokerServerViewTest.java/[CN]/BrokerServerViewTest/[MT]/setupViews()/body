{
  baseView=new BatchServerInventoryView(zkPathsConfig,curator,jsonMapper,Predicates.<DataSegment>alwaysTrue()){
    @Override public void registerSegmentCallback(    Executor exec,    final SegmentCallback callback){
      super.registerSegmentCallback(exec,new SegmentCallback(){
        @Override public CallbackAction segmentAdded(        DruidServerMetadata server,        DataSegment segment){
          CallbackAction res=callback.segmentAdded(server,segment);
          segmentAddedLatch.countDown();
          return res;
        }
        @Override public CallbackAction segmentRemoved(        DruidServerMetadata server,        DataSegment segment){
          CallbackAction res=callback.segmentRemoved(server,segment);
          segmentRemovedLatch.countDown();
          return res;
        }
        @Override public CallbackAction segmentViewInitialized(){
          CallbackAction res=callback.segmentViewInitialized();
          segmentViewInitLatch.countDown();
          return res;
        }
      }
);
    }
  }
;
  brokerServerView=new BrokerServerView(EasyMock.createMock(QueryToolChestWarehouse.class),EasyMock.createMock(QueryWatcher.class),getSmileMapper(),EasyMock.createMock(HttpClient.class),baseView,new HighestPriorityTierSelectorStrategy(new RandomServerSelectorStrategy()),new NoopServiceEmitter());
  baseView.start();
}

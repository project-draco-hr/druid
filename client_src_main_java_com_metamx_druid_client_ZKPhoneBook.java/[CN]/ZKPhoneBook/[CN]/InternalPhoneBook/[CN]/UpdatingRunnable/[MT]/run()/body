{
  try {
    for (    String newChild : Sets.difference(incomingChildren,currChildren)) {
      log.debug("  New child[%s], for peon[%s]",newChild,peon);
      String nodeContent;
      try {
        final String data=zkClient.readData(getPath(serviceName,newChild));
        if (data != null) {
          nodeContent=data.toString();
        }
 else {
          log.error("Ignoring path[%s] with null data",getPath(serviceName,newChild));
          continue;
        }
      }
 catch (      ZkNoNodeException e) {
        log.info("Got ZkNoNodeException[%s], node must have gone bye bye before this had a chance to run.",e.getMessage());
        continue;
      }
      T nodeProperties=jsonMapper.readValue(nodeContent,peon.getObjectClazz());
      peon.newEntry(newChild,nodeProperties);
      currChildren.add(newChild);
    }
    Set<String> setDiff=new HashSet<String>(Sets.difference(currChildren,incomingChildren));
    for (    String childRemoved : setDiff) {
      log.debug("  Lost child[%s], for peon[%s]",childRemoved,peon);
      peon.entryRemoved(childRemoved);
      currChildren.remove(childRemoved);
    }
  }
 catch (  Exception e) {
    log.warn(e,"Exception thrown, serviceName[%s].",serviceName);
    throw new RuntimeException(e);
  }
}

{
  if (this.plumber != null) {
    throw new IllegalStateException("WTF?!? run with non-null plumber??!");
  }
  for (  final TaskLock taskLock : getTaskLocks(toolbox)) {
    toolbox.getTaskActionClient().submit(new LockReleaseAction(taskLock.getInterval()));
  }
  boolean normalExit=true;
  final Period intermediatePersistPeriod=schema.getDriverConfig().getIntermediatePersistPeriod();
  final Firehose firehose=schema.getIOConfig().getFirehoseFactory().connect(schema.getDataSchema().getParser());
  final RealtimePlumberSchool plumberSchool=new RealtimePlumberSchool(schema.getDriverConfig().getWindowPeriod(),new File(toolbox.getTaskWorkDir(),"persist"),schema.getDataSchema().getGranularitySpec().getSegmentGranularity());
  final SegmentPublisher segmentPublisher=new TaskActionSegmentPublisher(this,toolbox);
  final DataSegmentAnnouncer lockingSegmentAnnouncer=new DataSegmentAnnouncer(){
    @Override public void announceSegment(    final DataSegment segment) throws IOException {
      toolbox.getTaskActionClient().submit(new LockAcquireAction(segment.getInterval()));
      toolbox.getSegmentAnnouncer().announceSegment(segment);
    }
    @Override public void unannounceSegment(    final DataSegment segment) throws IOException {
      try {
        toolbox.getSegmentAnnouncer().unannounceSegment(segment);
      }
  finally {
        toolbox.getTaskActionClient().submit(new LockReleaseAction(segment.getInterval()));
      }
    }
    @Override public void announceSegments(    Iterable<DataSegment> segments) throws IOException {
      for (      DataSegment segment : segments) {
        toolbox.getTaskActionClient().submit(new LockAcquireAction(segment.getInterval()));
      }
      toolbox.getSegmentAnnouncer().announceSegments(segments);
    }
    @Override public void unannounceSegments(    Iterable<DataSegment> segments) throws IOException {
      try {
        toolbox.getSegmentAnnouncer().unannounceSegments(segments);
      }
  finally {
        for (        DataSegment segment : segments) {
          toolbox.getTaskActionClient().submit(new LockReleaseAction(segment.getInterval()));
        }
      }
    }
  }
;
  final VersioningPolicy versioningPolicy=new VersioningPolicy(){
    @Override public String getVersion(    final Interval interval){
      try {
        final TaskLock myLock=toolbox.getTaskActionClient().submit(new LockAcquireAction(interval));
        return myLock.getVersion();
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
    }
  }
;
  plumberSchool.setDataSegmentPusher(toolbox.getSegmentPusher());
  plumberSchool.setConglomerate(toolbox.getQueryRunnerFactoryConglomerate());
  plumberSchool.setQueryExecutorService(toolbox.getQueryExecutorService());
  plumberSchool.setSegmentAnnouncer(lockingSegmentAnnouncer);
  plumberSchool.setSegmentPublisher(segmentPublisher);
  plumberSchool.setServerView(toolbox.getNewSegmentServerView());
  plumberSchool.setEmitter(toolbox.getEmitter());
  DataSchema dataSchema=schema.getDataSchema();
  RealtimeIOConfig realtimeIOConfig=schema.getIOConfig();
  RealtimeDriverConfig driverConfig=schema.getDriverConfig().withVersioningPolicy(versioningPolicy);
  final FireDepartment fireDepartment=new FireDepartment(dataSchema,realtimeIOConfig,driverConfig,null,null,null,null);
  final RealtimeMetricsMonitor metricsMonitor=new RealtimeMetricsMonitor(ImmutableList.of(fireDepartment));
  this.queryRunnerFactoryConglomerate=toolbox.getQueryRunnerFactoryConglomerate();
  this.plumber=plumberSchool.findPlumber(dataSchema,driverConfig,fireDepartment.getMetrics());
  try {
    plumber.startJob();
    toolbox.getMonitorScheduler().addMonitor(metricsMonitor);
    long nextFlush=new DateTime().plus(intermediatePersistPeriod).getMillis();
    while (firehose.hasMore()) {
      final InputRow inputRow;
      try {
        inputRow=firehose.nextRow();
        if (inputRow == null) {
          continue;
        }
        final Sink sink=plumber.getSink(inputRow.getTimestampFromEpoch());
        if (sink == null) {
          fireDepartment.getMetrics().incrementThrownAway();
          log.debug("Throwing away event[%s]",inputRow);
          if (System.currentTimeMillis() > nextFlush) {
            plumber.persist(firehose.commit());
            nextFlush=new DateTime().plus(intermediatePersistPeriod).getMillis();
          }
          continue;
        }
        if (sink.isEmpty()) {
          log.info("Task %s: New sink: %s",getId(),sink);
        }
        int currCount=sink.add(inputRow);
        fireDepartment.getMetrics().incrementProcessed();
        if (currCount >= driverConfig.getMaxRowsInMemory() || System.currentTimeMillis() > nextFlush) {
          plumber.persist(firehose.commit());
          nextFlush=new DateTime().plus(intermediatePersistPeriod).getMillis();
        }
      }
 catch (      FormattedException e) {
        log.warn(e,"unparseable line");
        fireDepartment.getMetrics().incrementUnparseable();
      }
    }
  }
 catch (  Throwable e) {
    normalExit=false;
    log.makeAlert(e,"Exception aborted realtime processing[%s]",dataSchema.getDataSource()).emit();
    throw e;
  }
 finally {
    if (normalExit) {
      try {
        plumber.persist(firehose.commit());
        plumber.finishJob();
      }
 catch (      Exception e) {
        log.makeAlert(e,"Failed to finish realtime task").emit();
      }
 finally {
        Closeables.closeQuietly(firehose);
        toolbox.getMonitorScheduler().removeMonitor(metricsMonitor);
      }
    }
  }
  return TaskStatus.success(getId());
}

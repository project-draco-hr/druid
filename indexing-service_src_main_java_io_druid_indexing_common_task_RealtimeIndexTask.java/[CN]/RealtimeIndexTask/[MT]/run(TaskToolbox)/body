{
  if (this.plumber != null) {
    throw new IllegalStateException("WTF?!? run with non-null plumber??!");
  }
  for (  final TaskLock taskLock : getTaskLocks(toolbox)) {
    toolbox.getTaskActionClient().submit(new LockReleaseAction(taskLock.getInterval()));
  }
  boolean normalExit=true;
  final SegmentPublisher segmentPublisher=new TaskActionSegmentPublisher(this,toolbox);
  final DataSegmentAnnouncer lockingSegmentAnnouncer=new DataSegmentAnnouncer(){
    @Override public void announceSegment(    final DataSegment segment) throws IOException {
      toolbox.getTaskActionClient().submit(new LockAcquireAction(segment.getInterval()));
      toolbox.getSegmentAnnouncer().announceSegment(segment);
    }
    @Override public void unannounceSegment(    final DataSegment segment) throws IOException {
      try {
        toolbox.getSegmentAnnouncer().unannounceSegment(segment);
      }
  finally {
        toolbox.getTaskActionClient().submit(new LockReleaseAction(segment.getInterval()));
      }
    }
    @Override public void announceSegments(    Iterable<DataSegment> segments) throws IOException {
      for (      DataSegment segment : segments) {
        toolbox.getTaskActionClient().submit(new LockAcquireAction(segment.getInterval()));
      }
      toolbox.getSegmentAnnouncer().announceSegments(segments);
    }
    @Override public void unannounceSegments(    Iterable<DataSegment> segments) throws IOException {
      try {
        toolbox.getSegmentAnnouncer().unannounceSegments(segments);
      }
  finally {
        for (        DataSegment segment : segments) {
          toolbox.getTaskActionClient().submit(new LockReleaseAction(segment.getInterval()));
        }
      }
    }
  }
;
  final VersioningPolicy versioningPolicy=new VersioningPolicy(){
    @Override public String getVersion(    final Interval interval){
      try {
        final TaskLock myLock=toolbox.getTaskActionClient().submit(new LockAcquireAction(interval));
        return myLock.getVersion();
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
    }
  }
;
  DataSchema dataSchema=spec.getDataSchema();
  RealtimeIOConfig realtimeIOConfig=spec.getIOConfig();
  RealtimeTuningConfig tuningConfig=spec.getTuningConfig().withBasePersistDirectory(new File(toolbox.getTaskWorkDir(),"persist")).withVersioningPolicy(versioningPolicy);
  final FireDepartment fireDepartment=new FireDepartment(dataSchema,realtimeIOConfig,tuningConfig);
  final RealtimeMetricsMonitor metricsMonitor=new RealtimeMetricsMonitor(ImmutableList.of(fireDepartment));
  this.queryRunnerFactoryConglomerate=toolbox.getQueryRunnerFactoryConglomerate();
  final PlumberSchool plumberSchool=new RealtimePlumberSchool(toolbox.getEmitter(),toolbox.getQueryRunnerFactoryConglomerate(),toolbox.getSegmentPusher(),lockingSegmentAnnouncer,segmentPublisher,toolbox.getNewSegmentServerView(),toolbox.getQueryExecutorService(),toolbox.getIndexMerger(),toolbox.getIndexIO());
  this.plumber=plumberSchool.findPlumber(dataSchema,tuningConfig,fireDepartment.getMetrics());
  Firehose firehose=null;
  Supplier<Committer> committerSupplier=null;
  try {
    plumber.startJob();
    toolbox.getMonitorScheduler().addMonitor(metricsMonitor);
    firehose=spec.getIOConfig().getFirehoseFactory().connect(spec.getDataSchema().getParser());
    committerSupplier=Committers.supplierFromFirehose(firehose);
    while (firehose.hasMore()) {
      final InputRow inputRow;
      try {
        inputRow=firehose.nextRow();
        if (inputRow == null) {
          log.debug("thrown away null input row, considering unparseable");
          fireDepartment.getMetrics().incrementUnparseable();
          continue;
        }
      }
 catch (      ParseException e) {
        log.debug(e,"thrown away line due to exception, considering unparseable");
        fireDepartment.getMetrics().incrementUnparseable();
        continue;
      }
      int numRows=plumber.add(inputRow,committerSupplier);
      if (numRows == -1) {
        fireDepartment.getMetrics().incrementThrownAway();
        log.debug("Throwing away event[%s]",inputRow);
        continue;
      }
      fireDepartment.getMetrics().incrementProcessed();
    }
  }
 catch (  Throwable e) {
    normalExit=false;
    log.makeAlert(e,"Exception aborted realtime processing[%s]",dataSchema.getDataSource()).emit();
    throw e;
  }
 finally {
    if (normalExit) {
      try {
        plumber.persist(committerSupplier.get());
        plumber.finishJob();
      }
 catch (      Exception e) {
        log.makeAlert(e,"Failed to finish realtime task").emit();
        throw e;
      }
 finally {
        CloseQuietly.close(firehose);
        toolbox.getMonitorScheduler().removeMonitor(metricsMonitor);
      }
    }
  }
  return TaskStatus.success(getId());
}

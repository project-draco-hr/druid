{
  runThread=Thread.currentThread();
  if (this.plumber != null) {
    throw new IllegalStateException("WTF?!? run with non-null plumber??!");
  }
  boolean normalExit=true;
  final SegmentPublisher segmentPublisher=new TaskActionSegmentPublisher(this,toolbox);
  final DataSegmentAnnouncer lockingSegmentAnnouncer=new DataSegmentAnnouncer(){
    @Override public void announceSegment(    final DataSegment segment) throws IOException {
      toolbox.getTaskActionClient().submit(new LockAcquireAction(segment.getInterval()));
      toolbox.getSegmentAnnouncer().announceSegment(segment);
    }
    @Override public void unannounceSegment(    final DataSegment segment) throws IOException {
      try {
        toolbox.getSegmentAnnouncer().unannounceSegment(segment);
      }
  finally {
        toolbox.getTaskActionClient().submit(new LockReleaseAction(segment.getInterval()));
      }
    }
    @Override public void announceSegments(    Iterable<DataSegment> segments) throws IOException {
      for (      DataSegment segment : segments) {
        toolbox.getTaskActionClient().submit(new LockAcquireAction(segment.getInterval()));
      }
      toolbox.getSegmentAnnouncer().announceSegments(segments);
    }
    @Override public void unannounceSegments(    Iterable<DataSegment> segments) throws IOException {
      try {
        toolbox.getSegmentAnnouncer().unannounceSegments(segments);
      }
  finally {
        for (        DataSegment segment : segments) {
          toolbox.getTaskActionClient().submit(new LockReleaseAction(segment.getInterval()));
        }
      }
    }
  }
;
  final VersioningPolicy versioningPolicy=new VersioningPolicy(){
    @Override public String getVersion(    final Interval interval){
      try {
        final TaskLock myLock=toolbox.getTaskActionClient().submit(new LockAcquireAction(interval));
        return myLock.getVersion();
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
    }
  }
;
  DataSchema dataSchema=spec.getDataSchema();
  RealtimeIOConfig realtimeIOConfig=spec.getIOConfig();
  RealtimeTuningConfig tuningConfig=spec.getTuningConfig().withBasePersistDirectory(new File(toolbox.getTaskWorkDir(),"persist")).withVersioningPolicy(versioningPolicy);
  final FireDepartment fireDepartment=new FireDepartment(dataSchema,realtimeIOConfig,tuningConfig);
  final RealtimeMetricsMonitor metricsMonitor=new RealtimeMetricsMonitor(ImmutableList.of(fireDepartment),ImmutableMap.of(DruidMetrics.TASK_ID,new String[]{getId()}));
  this.queryRunnerFactoryConglomerate=toolbox.getQueryRunnerFactoryConglomerate();
  final PlumberSchool plumberSchool=new RealtimePlumberSchool(toolbox.getEmitter(),toolbox.getQueryRunnerFactoryConglomerate(),toolbox.getSegmentPusher(),lockingSegmentAnnouncer,segmentPublisher,toolbox.getSegmentHandoffNotifierFactory(),toolbox.getQueryExecutorService(),toolbox.getIndexMerger(),toolbox.getIndexIO(),toolbox.getCache(),toolbox.getCacheConfig(),toolbox.getObjectMapper());
  this.plumber=plumberSchool.findPlumber(dataSchema,tuningConfig,fireDepartment.getMetrics());
  Supplier<Committer> committerSupplier=null;
  try {
    plumber.startJob();
    toolbox.getMonitorScheduler().addMonitor(metricsMonitor);
    final FirehoseFactory firehoseFactory=spec.getIOConfig().getFirehoseFactory();
    final boolean firehoseDrainableByClosing=isFirehoseDrainableByClosing(firehoseFactory);
    firehose=firehoseFactory.connect(spec.getDataSchema().getParser());
    committerSupplier=Committers.supplierFromFirehose(firehose);
    while ((!gracefullyStopped || firehoseDrainableByClosing) && firehose.hasMore()) {
      final InputRow inputRow;
      try {
        inputRow=firehose.nextRow();
        if (inputRow == null) {
          log.debug("thrown away null input row, considering unparseable");
          fireDepartment.getMetrics().incrementUnparseable();
          continue;
        }
      }
 catch (      ParseException e) {
        log.debug(e,"thrown away line due to exception, considering unparseable");
        fireDepartment.getMetrics().incrementUnparseable();
        continue;
      }
      int numRows=plumber.add(inputRow,committerSupplier);
      if (numRows == -1) {
        fireDepartment.getMetrics().incrementThrownAway();
        log.debug("Throwing away event[%s]",inputRow);
        continue;
      }
      fireDepartment.getMetrics().incrementProcessed();
    }
  }
 catch (  Throwable e) {
    normalExit=false;
    log.makeAlert(e,"Exception aborted realtime processing[%s]",dataSchema.getDataSource()).emit();
    throw e;
  }
 finally {
    if (normalExit) {
      try {
        log.info("Persisting remaining data.");
        final Committer committer=committerSupplier.get();
        final CountDownLatch persistLatch=new CountDownLatch(1);
        plumber.persist(new Committer(){
          @Override public Object getMetadata(){
            return committer.getMetadata();
          }
          @Override public void run(){
            try {
              committer.run();
            }
  finally {
              persistLatch.countDown();
            }
          }
        }
);
        persistLatch.await();
        if (gracefullyStopped) {
          log.info("Gracefully stopping.");
        }
 else {
          log.info("Finishing the job.");
synchronized (this) {
            if (gracefullyStopped) {
              log.info("Gracefully stopping.");
            }
 else {
              finishingJob=true;
            }
          }
          if (finishingJob) {
            plumber.finishJob();
          }
        }
      }
 catch (      InterruptedException e) {
        log.debug(e,"Interrupted while finishing the job");
      }
catch (      Exception e) {
        log.makeAlert(e,"Failed to finish realtime task").emit();
        throw e;
      }
 finally {
        CloseQuietly.close(firehose);
        toolbox.getMonitorScheduler().removeMonitor(metricsMonitor);
      }
    }
  }
  log.info("Job done!");
  return TaskStatus.success(getId());
}

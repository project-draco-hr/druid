{
  this.sequenceName=Preconditions.checkNotNull(sequenceName,"sequenceName");
  this.startPartitions=Preconditions.checkNotNull(startPartitions,"startPartitions");
  this.endPartitions=Preconditions.checkNotNull(endPartitions,"endPartitions");
  this.consumerProperties=Preconditions.checkNotNull(consumerProperties,"consumerProperties");
  this.useTransaction=useTransaction != null ? useTransaction : DEFAULT_USE_TRANSACTION;
  Preconditions.checkArgument(startPartitions.getTopic().equals(endPartitions.getTopic()),"start topic and end topic must match");
  Preconditions.checkArgument(startPartitions.getPartitionOffsetMap().keySet().equals(endPartitions.getPartitionOffsetMap().keySet()),"start partition set and end partition set must match");
  for (  int partition : endPartitions.getPartitionOffsetMap().keySet()) {
    Preconditions.checkArgument(endPartitions.getPartitionOffsetMap().get(partition) >= startPartitions.getPartitionOffsetMap().get(partition),"end offset must be >= start offset for partition[%d]",partition);
  }
}

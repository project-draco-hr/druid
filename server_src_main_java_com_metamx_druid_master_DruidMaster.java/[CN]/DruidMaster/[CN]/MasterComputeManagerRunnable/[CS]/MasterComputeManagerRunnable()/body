{
  super(ImmutableList.of(new DruidMasterSegmentInfoLoader(DruidMaster.this),new DruidMasterHelper(){
    @Override public DruidMasterRuntimeParams run(    DruidMasterRuntimeParams params){
      Iterable<DruidServer> servers=FunctionalIterable.create(serverInventoryManager.getInventory()).filter(new Predicate<DruidServer>(){
        @Override public boolean apply(        @Nullable DruidServer input){
          return input.getType().equalsIgnoreCase("historical");
        }
      }
);
      if (log.isDebugEnabled()) {
        log.debug("Servers");
        for (        DruidServer druidServer : servers) {
          log.debug("  %s",druidServer);
          log.debug("    -- DataSources");
          for (          DruidDataSource druidDataSource : druidServer.getDataSources()) {
            log.debug("    %s",druidDataSource);
          }
        }
      }
      final DruidCluster cluster=new DruidCluster();
      final Map<String,ConcurrentSkipListSet<String>> currentlyReplicatingSegments;
      for (      DruidServer server : servers) {
        if (!loadManagementPeons.containsKey(server.getName())) {
          String basePath=yp.combineParts(Arrays.asList(config.getLoadQueuePath(),server.getName()));
          LoadQueuePeon loadQueuePeon=new LoadQueuePeon(yp,basePath,peonExec);
          log.info("Creating LoadQueuePeon for server[%s] at path[%s]",server.getName(),basePath);
          loadManagementPeons.put(server.getName(),loadQueuePeon);
          yp.registerListener(basePath,loadQueuePeon);
        }
        cluster.add(new ServerHolder(server,loadManagementPeons.get(server.getName())));
      }
      SegmentReplicantLookup segmentReplicantLookup=SegmentReplicantLookup.make(cluster);
      for (      String name : Sets.difference(Sets.newHashSet(Iterables.transform(servers,new Function<DruidServer,String>(){
        @Override public String apply(        @Nullable DruidServer input){
          return input.getName();
        }
      }
)),loadManagementPeons.keySet())) {
        log.info("Removing listener for server[%s] which is no longer there.",name);
        LoadQueuePeon peon=loadManagementPeons.remove(name);
        peon.stop();
        yp.unregisterListener(yp.combineParts(Arrays.asList(config.getLoadQueuePath(),name)),peon);
      }
      decrementRemovedSegmentsLifetime();
      return params.buildFromExisting().withDruidCluster(cluster).withDatabaseRuleManager(databaseRuleManager).withSegmentReplicantLookup(segmentReplicantLookup).build();
    }
  }
,new DruidMasterRuleRunner(DruidMaster.this),new DruidMasterCleanup(DruidMaster.this),new DruidMasterBalancer(DruidMaster.this,new BalancerAnalyzer()),new DruidMasterLogger()));
}

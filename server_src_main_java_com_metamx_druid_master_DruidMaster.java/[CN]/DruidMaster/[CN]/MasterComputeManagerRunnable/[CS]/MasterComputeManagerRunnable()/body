{
  super(ImmutableList.of(new DruidMasterSegmentInfoLoader(DruidMaster.this),new DruidMasterHelper(){
    @Override public DruidMasterRuntimeParams run(    DruidMasterRuntimeParams params){
      Collection<DruidServer> servers=serverInventoryManager.getInventory();
      if (log.isDebugEnabled()) {
        log.debug("Servers");
        for (        DruidServer druidServer : servers) {
          log.debug("  %s",druidServer);
          log.debug("    -- DataSources");
          for (          DruidDataSource druidDataSource : druidServer.getDataSources()) {
            log.debug("    %s",druidDataSource);
          }
        }
      }
      final DruidCluster cluster=new DruidCluster();
      final Set<String> historicalServers=Sets.newHashSet();
      for (      DruidServer server : servers) {
        if (server.getType().equalsIgnoreCase("historical")) {
          historicalServers.add(server.getName());
          if (!loadManagementPeons.containsKey(server.getName())) {
            String basePath=yp.combineParts(Arrays.asList(config.getLoadQueuePath(),server.getName()));
            LoadQueuePeon loadQueuePeon=new LoadQueuePeon(yp,basePath,peonExec);
            log.info("Creating LoadQueuePeon for server[%s] at path[%s]",server.getName(),basePath);
            loadManagementPeons.put(server.getName(),loadQueuePeon);
            yp.registerListener(basePath,loadQueuePeon);
          }
          cluster.add(new ServerHolder(server,loadManagementPeons.get(server.getName())));
        }
      }
      SegmentRuleLookup segmentRuleLookup=SegmentRuleLookup.make(params.getAvailableSegments(),databaseRuleCoordinator.getRuleMap());
      SegmentReplicantLookup segmentReplicantLookup=SegmentReplicantLookup.make(cluster);
      for (      String name : Sets.difference(historicalServers,loadManagementPeons.keySet())) {
        log.info("Removing listener for server[%s] which is no longer there.",name);
        LoadQueuePeon peon=loadManagementPeons.remove(name);
        peon.stop();
        yp.unregisterListener(yp.combineParts(Arrays.asList(config.getLoadQueuePath(),name)),peon);
      }
      return params.buildFromExisting().withDruidCluster(cluster).withSegmentRuleLookup(segmentRuleLookup).withSegmentReplicantLookup(segmentReplicantLookup).build();
    }
  }
,new DruidMasterAssigner(DruidMaster.this),new DruidMasterDropper(DruidMaster.this),new DruidMasterBalancer(DruidMaster.this,new BalancerAnalyzer()),new DruidMasterLogger()));
}

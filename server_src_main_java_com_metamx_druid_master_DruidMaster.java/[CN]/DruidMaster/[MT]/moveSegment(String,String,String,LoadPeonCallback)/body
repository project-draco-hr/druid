{
  final DruidServer fromServer=serverInventoryThingie.getInventoryValue(from);
  if (fromServer == null) {
    throw new IllegalArgumentException(String.format("Unable to find server [%s]",from));
  }
  final DruidServer toServer=serverInventoryThingie.getInventoryValue(to);
  if (toServer == null) {
    throw new IllegalArgumentException(String.format("Unable to find server [%s]",to));
  }
  if (to.equalsIgnoreCase(from)) {
    throw new IllegalArgumentException(String.format("Redundant command to move segment [%s] from [%s] to [%s]",segmentName,from,to));
  }
  final DataSegment segment=fromServer.getSegment(segmentName);
  if (segment == null) {
    throw new IllegalArgumentException(String.format("Unable to find segment [%s] on server [%s]",segmentName,from));
  }
  final LoadQueuePeon loadPeon=loadManagementPeons.get(to);
  if (loadPeon == null) {
    throw new IllegalArgumentException(String.format("LoadQueuePeon hasn't been created yet for path [%s]",to));
  }
  final LoadQueuePeon dropPeon=loadManagementPeons.get(from);
  if (dropPeon == null) {
    throw new IllegalArgumentException(String.format("LoadQueuePeon hasn't been created yet for path [%s]",from));
  }
  final ServerHolder toHolder=new ServerHolder(toServer,loadPeon);
  if (toHolder.getAvailableSize() < segment.getSize()) {
    throw new IllegalArgumentException(String.format("Not enough capacity on server [%s] for segment [%s]. Required: %,d, available: %,d.",to,segment,segment.getSize(),toHolder.getAvailableSize()));
  }
  final String toLoadQueueSegPath=ZKPaths.makePath(ZKPaths.makePath(config.getLoadQueuePath(),to),segmentName);
  final String toServedSegPath=ZKPaths.makePath(ZKPaths.makePath(config.getServedSegmentsLocation(),to),segmentName);
  loadPeon.loadSegment(segment,new LoadPeonCallback(){
    @Override protected void execute(){
      try {
        if (curator.checkExists().forPath(toServedSegPath) != null && curator.checkExists().forPath(toLoadQueueSegPath) == null && !dropPeon.getSegmentsToDrop().contains(segment)) {
          dropPeon.dropSegment(segment,callback);
        }
 else         if (callback != null) {
          callback.execute();
        }
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
    }
  }
);
}

{
  Preconditions.checkNotNull(argumentSpec,"argumentSpec");
  final HadoopDruidIndexerConfig config;
  if (argumentSpec.startsWith("{")) {
    config=HadoopDruidIndexerConfig.fromString(argumentSpec);
  }
 else   if (argumentSpec.startsWith("s3://")) {
    final Path s3nPath=new Path(String.format("s3n://%s",argumentSpec.substring("s3://".length())));
    final FileSystem fs=s3nPath.getFileSystem(new Configuration());
    String configString=CharStreams.toString(new InputSupplier<Readable>(){
      @Override public Readable getInput() throws IOException {
        return new InputStreamReader(fs.open(s3nPath));
      }
    }
);
    config=HadoopDruidIndexerConfig.fromString(configString);
  }
 else {
    config=HadoopDruidIndexerConfig.fromFile(new File(argumentSpec));
  }
  if (intervalSpec != null) {
    final List<Interval> dataInterval=Lists.transform(Arrays.asList(intervalSpec.split(",")),new StringIntervalFunction());
    config.setIntervals(dataInterval);
  }
  new HadoopDruidIndexerJob(config).run();
}

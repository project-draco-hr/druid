{
  final ServiceMetricEvent.Builder metricBuilder=new ServiceMetricEvent.Builder().setUser2(task.getDataSource()).setUser4(task.getType()).setUser5(task.getImplicitLockInterval().toString());
  TaskStatus preflightStatus;
  try {
    preflightStatus=task.preflight(taskActionClientFactory.create(task));
    log.info("Preflight done for task: %s",task.getId());
  }
 catch (  Exception e) {
    preflightStatus=TaskStatus.failure(task.getId());
    log.error(e,"Exception thrown during preflight for task: %s",task.getId());
  }
  if (!preflightStatus.isRunnable()) {
    log.info("Task finished during preflight: %s",task.getId());
    queue.notify(task,preflightStatus);
    return;
  }
  final ListenableFuture<TaskStatus> status=runner.run(task);
  Futures.addCallback(status,new FutureCallback<TaskStatus>(){
    @Override public void onSuccess(    final TaskStatus status){
      log.info("Received %s status for task: %s",status.getStatusCode(),task);
      handleStatus(status);
    }
    @Override public void onFailure(    Throwable t){
      log.makeAlert(t,"Failed to run task").addData("task",task.getId()).addData("type",task.getType()).addData("dataSource",task.getDataSource()).addData("interval",task.getImplicitLockInterval()).emit();
      handleStatus(TaskStatus.failure(task.getId()));
    }
    private void handleStatus(    TaskStatus status){
      try {
        if (shutdown) {
          log.info("Abandoning task due to shutdown: %s",task.getId());
          return;
        }
        queue.notify(task,status);
        if (status.isComplete()) {
          metricBuilder.setUser3(status.getStatusCode().toString());
          emitter.emit(metricBuilder.build("indexer/time/run/millis",status.getDuration()));
          log.info("Task %s: %s (%d run duration)",status.getStatusCode(),task,status.getDuration());
        }
      }
 catch (      Exception e) {
        log.makeAlert(e,"Failed to handle task status").addData("task",task.getId()).addData("statusCode",status.getStatusCode()).emit();
      }
    }
  }
);
}

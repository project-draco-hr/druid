{
  ImmutableMap.Builder<String,ImmutableZkWorker> builder=new ImmutableMap.Builder<>();
  for (  String workerHost : zkWorkers.keySet()) {
    if (!affinityWorkerHosts.contains(workerHost)) {
      builder.put(workerHost,zkWorkers.get(workerHost));
    }
  }
  ImmutableMap<String,ImmutableZkWorker> eligibleWorkers=builder.build();
  List<String> workerHosts=affinityConfig.getAffinity().get(task.getDataSource());
  if (workerHosts == null) {
    return super.findWorkerForTask(config,eligibleWorkers,task);
  }
  ImmutableMap.Builder<String,ImmutableZkWorker> affinityBuilder=new ImmutableMap.Builder<>();
  for (  String workerHost : workerHosts) {
    ImmutableZkWorker zkWorker=zkWorkers.get(workerHost);
    if (zkWorker != null) {
      affinityBuilder.put(workerHost,zkWorker);
    }
  }
  ImmutableMap<String,ImmutableZkWorker> affinityWorkers=affinityBuilder.build();
  if (!affinityWorkers.isEmpty()) {
    Optional<ImmutableZkWorker> retVal=super.findWorkerForTask(config,affinityWorkers,task);
    if (retVal.isPresent()) {
      return retVal;
    }
  }
  return super.findWorkerForTask(config,eligibleWorkers,task);
}

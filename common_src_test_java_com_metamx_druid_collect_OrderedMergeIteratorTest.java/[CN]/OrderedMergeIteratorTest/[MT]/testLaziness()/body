{
  final boolean[] done=new boolean[]{false,false};
  final ArrayList<Iterator<Integer>> iterators=Lists.newArrayList();
  iterators.add(new IteratorShell<Integer>(Arrays.asList(1,2,3).iterator()){
    @Override public boolean hasNext(){
      boolean retVal=super.hasNext();
      if (!retVal) {
        done[0]=true;
      }
      return retVal;
    }
  }
);
  iterators.add(new IteratorShell<Integer>(Arrays.asList(4,5,6).iterator()){
    int count=0;
    @Override public boolean hasNext(){
      if (count >= 1) {
        Assert.assertTrue("First iterator not complete",done[0]);
      }
      boolean retVal=super.hasNext();
      if (!retVal) {
        done[1]=true;
      }
      return retVal;
    }
    @Override public Integer next(){
      if (count >= 1) {
        Assert.assertTrue("First iterator not complete",done[0]);
      }
      ++count;
      return super.next();
    }
  }
);
  iterators.add(new IteratorShell<Integer>(Arrays.asList(7,8,9).iterator()){
    int count=0;
    @Override public boolean hasNext(){
      if (count >= 1) {
        Assert.assertTrue("Second iterator not complete",done[1]);
      }
      Assert.assertTrue("First iterator not complete",done[0]);
      return super.hasNext();
    }
    @Override public Integer next(){
      if (count >= 1) {
        Assert.assertTrue("Second iterator not complete",done[1]);
      }
      Assert.assertTrue("First iterator not complete",done[0]);
      ++count;
      return super.next();
    }
  }
);
  OrderedMergeIterator<Integer> iter=new OrderedMergeIterator<Integer>(Ordering.<Integer>natural(),iterators.iterator());
  Assert.assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9),Lists.newArrayList(iter));
}

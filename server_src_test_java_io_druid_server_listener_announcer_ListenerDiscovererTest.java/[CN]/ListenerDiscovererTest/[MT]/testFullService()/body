{
  final String listenerKey="listenerKey";
  final String listenerTier="listenerTier";
  final String listenerTierChild="tierChild";
  final String tierZkPath=ZKPaths.makePath(listenerTier,listenerTierChild);
  setupServerAndCurator();
  final ExecutorService executorService=Execs.singleThreaded("listenerDiscovererTest--%s");
  closerRule.closeLater(new Closeable(){
    @Override public void close() throws IOException {
      executorService.shutdownNow();
    }
  }
);
  closerRule.closeLater(server);
  closerRule.closeLater(curator);
  curator.start();
  curator.blockUntilConnected(10,TimeUnit.SECONDS);
  Assert.assertEquals("/druid",curator.create().forPath("/druid"));
  final Announcer announcer=new Announcer(curator,executorService);
  closerRule.closeLater(new Closeable(){
    @Override public void close() throws IOException {
      announcer.stop();
    }
  }
);
  final ListeningAnnouncerConfig config=new ListeningAnnouncerConfig(new ZkPathsConfig());
  final ListenerDiscoverer listenerDiscoverer=new ListenerDiscoverer(curator,config);
  listenerDiscoverer.start();
  closerRule.closeLater(new Closeable(){
    @Override public void close() throws IOException {
      listenerDiscoverer.stop();
    }
  }
);
  Assert.assertTrue(listenerDiscoverer.getNodes(listenerKey).isEmpty());
  final HostAndPort node=HostAndPort.fromParts("someHost",8888);
  final ListenerResourceAnnouncer listenerResourceAnnouncer=new ListenerResourceAnnouncer(announcer,config,listenerKey,node){
  }
;
  listenerResourceAnnouncer.start();
  closerRule.closeLater(new Closeable(){
    @Override public void close() throws IOException {
      listenerResourceAnnouncer.stop();
    }
  }
);
  final ListenerResourceAnnouncer tieredListenerResourceAnnouncer=new ListenerResourceAnnouncer(announcer,config,tierZkPath,node){
  }
;
  tieredListenerResourceAnnouncer.start();
  closerRule.closeLater(new Closeable(){
    @Override public void close() throws IOException {
      tieredListenerResourceAnnouncer.stop();
    }
  }
);
  announcer.start();
  Assert.assertNotNull(curator.checkExists().forPath(config.getAnnouncementPath(listenerKey)));
  while (listenerDiscoverer.getNodes(listenerKey).isEmpty()) {
    Thread.sleep(1);
  }
  Assert.assertEquals(ImmutableSet.of(HostAndPort.fromString(node.toString())),listenerDiscoverer.getNodes(listenerKey));
  Assert.assertEquals(ImmutableSet.of(listenerKey,listenerTier),ImmutableSet.copyOf(listenerDiscoverer.discoverChildren(null)));
  Assert.assertEquals(ImmutableSet.of(listenerTierChild),ImmutableSet.copyOf(listenerDiscoverer.discoverChildren(listenerTier)));
}

{
  return ImmutableList.<Object>of(new Module(){
    @Override public void configure(    Binder binder){
      binder.bindConstant().annotatedWith(Names.named("serviceName")).to("druid/bridge");
      binder.bindConstant().annotatedWith(Names.named("servicePort")).to(8089);
      ConfigProvider.bind(binder,BridgeCuratorConfig.class);
      binder.bind(BridgeZkCoordinator.class).in(ManageLifecycle.class);
      binder.bind(NodeTypeConfig.class).toInstance(new NodeTypeConfig("bridge"));
      JsonConfigProvider.bind(binder,"druid.manager.segments",MetadataSegmentManagerConfig.class);
      binder.bind(MetadataSegmentManager.class).toProvider(MetadataSegmentManagerProvider.class).in(ManageLifecycle.class);
      binder.bind(QuerySegmentWalker.class).to(BridgeQuerySegmentWalker.class).in(LazySingleton.class);
      binder.bind(JettyServerInitializer.class).to(QueryJettyServerInitializer.class).in(LazySingleton.class);
      Jerseys.addResource(binder,QueryResource.class);
      LifecycleModule.register(binder,QueryResource.class);
      ConfigProvider.bind(binder,DruidClusterBridgeConfig.class);
      binder.bind(DruidClusterBridge.class);
      LifecycleModule.register(binder,DruidClusterBridge.class);
      LifecycleModule.register(binder,BridgeZkCoordinator.class);
      LifecycleModule.register(binder,Server.class);
    }
    @Provides @LazySingleton @Bridge public CuratorFramework getBridgeCurator(    final BridgeCuratorConfig bridgeCuratorConfig,    Lifecycle lifecycle){
      final CuratorFramework framework=CuratorFrameworkFactory.builder().connectString(bridgeCuratorConfig.getParentZkHosts()).sessionTimeoutMs(bridgeCuratorConfig.getZkSessionTimeoutMs()).retryPolicy(new BoundedExponentialBackoffRetry(1000,45000,30)).compressionProvider(new PotentiallyGzippedCompressionProvider(bridgeCuratorConfig.enableCompression())).build();
      lifecycle.addHandler(new Lifecycle.Handler(){
        @Override public void start() throws Exception {
          log.info("Starting Curator for %s",bridgeCuratorConfig.getParentZkHosts());
          framework.start();
        }
        @Override public void stop(){
          log.info("Stopping Curator");
          framework.close();
        }
      }
);
      return framework;
    }
    @Provides @ManageLifecycle public ServerDiscoverySelector getServerDiscoverySelector(    DruidClusterBridgeConfig config,    ServerDiscoveryFactory factory){
      return factory.createSelector(config.getBrokerServiceName());
    }
    @Provides @ManageLifecycle @Bridge public Announcer getBridgeAnnouncer(    @Bridge CuratorFramework curator){
      return new Announcer(curator,Execs.singleThreaded("BridgeAnnouncer-%s"));
    }
    @Provides @ManageLifecycleLast @Bridge public AbstractDataSegmentAnnouncer getBridgeDataSegmentAnnouncer(    DruidServerMetadata metadata,    BatchDataSegmentAnnouncerConfig config,    ZkPathsConfig zkPathsConfig,    @Bridge Announcer announcer,    ObjectMapper jsonMapper){
      return new BatchDataSegmentAnnouncer(metadata,config,zkPathsConfig,announcer,jsonMapper);
    }
  }
);
}

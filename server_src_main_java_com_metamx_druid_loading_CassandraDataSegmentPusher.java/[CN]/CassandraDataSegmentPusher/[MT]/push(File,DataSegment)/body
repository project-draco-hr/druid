{
  log.info("Writing [%s] to C*",indexFilesDir);
  String key=JOINER.join(config.getKeyspace().isEmpty() ? null : config.getKeyspace(),DataSegmentPusherUtil.getStorageDir(segment));
  final File compressedIndexFile=File.createTempFile("druid","index.zip");
  long indexSize=CompressionUtils.zip(indexFilesDir,compressedIndexFile);
  int version=IndexIO.getVersionFromDir(indexFilesDir);
  File descriptorFile=File.createTempFile("druid","descriptor.json");
  Files.copy(ByteStreams.newInputStreamSupplier(jsonMapper.writeValueAsBytes(segment)),descriptorFile);
  try {
    ObjectMetadata indexMeta=ChunkedStorage.newWriter(indexStorage,key,new FileInputStream(compressedIndexFile)).withConcurrencyLevel(CONCURRENCY).call();
    ObjectMetadata descriptorMeta=ChunkedStorage.newWriter(descriptorStorage,key,new FileInputStream(descriptorFile)).withConcurrencyLevel(CONCURRENCY).call();
    log.debug("Wrote index to C* [" + indexMeta.getParentPath() + "]");
    log.debug("Wrote descriptor to C* [" + descriptorMeta.getParentPath() + "]");
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
  segment=segment.withSize(indexSize).withLoadSpec(ImmutableMap.<String,Object>of("type","c*","key",key)).withBinaryVersion(IndexIO.getVersionFromDir(indexFilesDir));
  log.info("Deleting zipped index File[%s]",compressedIndexFile);
  compressedIndexFile.delete();
  log.info("Deleting descriptor file[%s]",descriptorFile);
  descriptorFile.delete();
  return segment;
}

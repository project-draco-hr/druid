{
  EasyMock.expect(amazonEC2Client.runInstances(EasyMock.anyObject(RunInstancesRequest.class))).andReturn(runInstancesResult);
  EasyMock.expect(amazonEC2Client.describeInstances(EasyMock.anyObject(DescribeInstancesRequest.class))).andReturn(describeInstancesResult);
  EasyMock.expect(amazonEC2Client.terminateInstances(EasyMock.anyObject(TerminateInstancesRequest.class))).andReturn(null);
  EasyMock.replay(amazonEC2Client);
  EasyMock.expect(runInstancesResult.getReservation()).andReturn(reservation).atLeastOnce();
  EasyMock.replay(runInstancesResult);
  EasyMock.expect(describeInstancesResult.getReservations()).andReturn(Arrays.asList(reservation)).atLeastOnce();
  EasyMock.replay(describeInstancesResult);
  EasyMock.expect(reservation.getInstances()).andReturn(Arrays.asList(instance)).atLeastOnce();
  EasyMock.replay(reservation);
  Map<String,WorkerWrapper> zkWorkers=Maps.newHashMap();
  zkWorkers.put(worker.getWorker().getHost(),worker);
  worker.getRunningTasks().add("task1");
  Assert.assertFalse(worker.isAtCapacity());
  worker.getRunningTasks().add("task2");
  Assert.assertTrue(worker.isAtCapacity());
  strategy.provisionIfNeeded(zkWorkers);
  worker.getRunningTasks().remove("task1");
  worker.getRunningTasks().remove("task2");
  Instance deleted=strategy.terminateIfNeeded(zkWorkers);
  Assert.assertEquals(deleted.getInstanceId(),INSTANCE_ID);
}

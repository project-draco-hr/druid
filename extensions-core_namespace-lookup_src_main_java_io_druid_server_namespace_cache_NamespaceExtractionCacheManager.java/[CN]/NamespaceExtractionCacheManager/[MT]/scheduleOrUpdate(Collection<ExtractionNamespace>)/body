{
  Set<String> differentNamespaces=Sets.difference(implData.keySet(),Sets.newHashSet(Iterables.transform(namespaces,new Function<ExtractionNamespace,String>(){
    @Nullable @Override public String apply(    ExtractionNamespace input){
      return input.getNamespace();
    }
  }
)));
  if (log.isDebugEnabled()) {
    log.debug("Deleting %d namespaces: %s",differentNamespaces.size(),differentNamespaces);
  }
  for (  String namespaceName : differentNamespaces) {
    final NamespaceImplData implDatum=implData.get(namespaceName);
    if (implDatum == null) {
      log.wtf("Asked to delete something I just lost [%s]",namespaceName);
      continue;
    }
    delete(namespaceName);
  }
  for (  final ExtractionNamespace namespace : namespaces) {
    final NamespaceImplData implDatum=implData.get(namespace.getNamespace());
    if (implDatum == null) {
      schedule(namespace);
      continue;
    }
    if (!implDatum.enabled.get()) {
      schedule(namespace);
      continue;
    }
    if (implDatum.namespace.equals(namespace)) {
      continue;
    }
    if (log.isDebugEnabled()) {
      log.debug("Namespace [%s] needs updated to [%s]",implDatum.namespace,namespace);
    }
    removeNamespaceLocalMetadata(implDatum);
    schedule(namespace);
  }
}

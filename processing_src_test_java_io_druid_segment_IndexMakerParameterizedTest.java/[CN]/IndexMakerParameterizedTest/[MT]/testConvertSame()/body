{
  final long timestamp=System.currentTimeMillis();
  IncrementalIndex toPersist1=IncrementalIndexTest.createIndex(null);
  IncrementalIndexTest.populateIndex(timestamp,toPersist1);
  final File tempDir1=temporaryFolder.newFolder();
  final File convertDir=temporaryFolder.newFolder();
  final IndexableAdapter incrementalAdapter=new IncrementalIndexAdapter(toPersist1.getInterval(),toPersist1,indexSpec.getBitmapSerdeFactory().getBitmapFactory());
  QueryableIndex index1=closer.closeLater(INDEX_IO.loadIndex(INDEX_MAKER.persist(toPersist1,tempDir1,null,indexSpec)));
  final IndexableAdapter queryableAdapter=new QueryableIndexIndexableAdapter(index1);
  INDEX_IO.validateTwoSegments(incrementalAdapter,queryableAdapter);
  Assert.assertEquals(2,index1.getColumn(Column.TIME_COLUMN_NAME).getLength());
  Assert.assertEquals(Arrays.asList("dim1","dim2"),Lists.newArrayList(index1.getAvailableDimensions()));
  Assert.assertEquals(3,index1.getColumnNames().size());
  QueryableIndex converted=closer.closeLater(INDEX_IO.loadIndex(INDEX_MAKER.convert(tempDir1,convertDir,indexSpec)));
  Assert.assertEquals(2,converted.getColumn(Column.TIME_COLUMN_NAME).getLength());
  Assert.assertEquals(Arrays.asList("dim1","dim2"),Lists.newArrayList(converted.getAvailableDimensions()));
  Assert.assertEquals(3,converted.getColumnNames().size());
  INDEX_IO.validateTwoSegments(tempDir1,convertDir);
  assertDimCompression(index1,indexSpec.getDimensionCompressionStrategy());
  assertDimCompression(converted,indexSpec.getDimensionCompressionStrategy());
}

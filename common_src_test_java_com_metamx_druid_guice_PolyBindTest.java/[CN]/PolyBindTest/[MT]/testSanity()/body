{
  setUp(new Module(){
    @Override public void configure(    Binder binder){
      final MapBinder<String,Gogo> gogoBinder=PolyBind.optionBinder(binder,Key.get(Gogo.class));
      gogoBinder.addBinding("a").to(GoA.class);
      gogoBinder.addBinding("b").to(GoB.class);
      PolyBind.createChoice(binder,"billy",Key.get(Gogo.class,Names.named("reverse")),Key.get(GoB.class));
      final MapBinder<String,Gogo> annotatedGogoBinder=PolyBind.optionBinder(binder,Key.get(Gogo.class,Names.named("reverse")));
      annotatedGogoBinder.addBinding("a").to(GoB.class);
      annotatedGogoBinder.addBinding("b").to(GoA.class);
    }
  }
);
  Assert.assertEquals("A",injector.getInstance(Gogo.class).go());
  Assert.assertEquals("B",injector.getInstance(Key.get(Gogo.class,Names.named("reverse"))).go());
  props.setProperty("billy.type","b");
  Assert.assertEquals("B",injector.getInstance(Gogo.class).go());
  Assert.assertEquals("A",injector.getInstance(Key.get(Gogo.class,Names.named("reverse"))).go());
  props.setProperty("billy.type","a");
  Assert.assertEquals("A",injector.getInstance(Gogo.class).go());
  Assert.assertEquals("B",injector.getInstance(Key.get(Gogo.class,Names.named("reverse"))).go());
  props.setProperty("billy.type","b");
  Assert.assertEquals("B",injector.getInstance(Gogo.class).go());
  Assert.assertEquals("A",injector.getInstance(Key.get(Gogo.class,Names.named("reverse"))).go());
  props.setProperty("billy.type","c");
  Assert.assertEquals("A",injector.getInstance(Gogo.class).go());
  Assert.assertEquals("B",injector.getInstance(Key.get(Gogo.class,Names.named("reverse"))).go());
}

{
  final TaskQueue tq=newTaskQueue();
  final Task[] tasks={newTask("T0","G0","bar",new Interval("2011/P1Y")),newTask("T1","G1","bar",new Interval("2011-03-01/P1D")),newTask("T2","G2","foo",new Interval("2011-03-01/P1D")),newTask("T3","G3","foo",new Interval("2011/P1Y")),newTask("T4","G4","foo",new Interval("2012-01-02/P1D")),newTask("T5","G5","foo",new Interval("2012-02-01/PT1H"))};
  Throwable thrown;
  for (  Task task : tasks) {
    tq.add(task);
  }
  Assert.assertEquals("T2 status (before finishing)",TaskStatus.Status.RUNNING,tq.getStatus(tasks[2].getId()).get().getStatusCode());
  thrown=null;
  try {
    tq.add(newTask("T5","G5","baz",new Interval("2013-02-01/PT1H")));
  }
 catch (  IllegalStateException e) {
    thrown=e;
  }
  Assert.assertNotNull("Exception on duplicate task id",thrown);
  final List<Task> taken=Lists.newArrayList();
  while (true) {
    final VersionedTaskWrapper taskWrapper=tq.poll();
    if (taskWrapper != null) {
      taken.add(taskWrapper.getTask());
    }
 else {
      break;
    }
  }
  Assert.assertEquals("Taken tasks (round 1)",Lists.newArrayList(tasks[0],tasks[2],tasks[4],tasks[5]),taken);
  tq.done(tasks[2],tasks[2].run(null,null,null));
  Assert.assertEquals("T2 status (after finishing)",TaskStatus.Status.SUCCESS,tq.getStatus(tasks[2].getId()).get().getStatusCode());
  thrown=null;
  try {
    tq.done(tasks[2],tasks[2].run(null,null,null));
  }
 catch (  IllegalStateException e) {
    thrown=e;
  }
  Assert.assertNotNull("Exception on twice-done task",thrown);
  taken.clear();
  while (true) {
    final VersionedTaskWrapper taskWrapper=tq.poll();
    if (taskWrapper != null) {
      taken.add(taskWrapper.getTask());
    }
 else {
      break;
    }
  }
  Assert.assertEquals("Taken tasks (round 2)",Lists.newArrayList(tasks[3]),taken);
  Assert.assertNull("poll queue with no tasks available",tq.poll());
}

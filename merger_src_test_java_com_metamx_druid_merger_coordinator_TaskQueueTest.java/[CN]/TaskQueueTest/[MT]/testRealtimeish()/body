{
  final TaskStorage ts=new LocalTaskStorage();
  final TaskQueue tq=newTaskQueueWithStorage(ts);
class StructThingy {
    boolean pushed=false;
    boolean pass1=false;
    boolean pass2=false;
  }
  final StructThingy structThingy=new StructThingy();
  final Task rtTask=new AbstractTask("id1","ds",new Interval("2010-01-01T00:00:00Z/PT1H")){
    @Override public Type getType(){
      return Type.TEST;
    }
    @Override public TaskStatus run(    TaskContext context,    TaskToolbox toolbox,    TaskCallback callback) throws Exception {
      final Set<DataSegment> segments=ImmutableSet.of(DataSegment.builder().dataSource("ds").interval(new Interval("2010-01-01T00:00:00Z/PT1H")).version(context.getVersion()).build());
      final List<Task> nextTasks=ImmutableList.of(newTask("id2","id2","ds",new Interval("2010-01-01T01:00:00Z/PT1H")));
      final TaskStatus status1=TaskStatus.running("id1").withNextTasks(nextTasks);
      final TaskStatus status2=TaskStatus.running("id1").withNextTasks(nextTasks).withSegments(segments);
      final TaskStatus status3=TaskStatus.success("id1").withNextTasks(nextTasks).withSegments(segments);
      callback.notify(status1);
      if (ts.getStatus("id2").get().getStatusCode() == TaskStatus.Status.RUNNING) {
        structThingy.pass1=true;
      }
      callback.notify(status2);
      if (structThingy.pushed) {
        structThingy.pass2=true;
      }
      return status3;
    }
  }
;
  tq.add(rtTask);
  final VersionedTaskWrapper vt=tq.poll();
  final TaskCallback callback=new TaskCallback(){
    @Override public void notify(    final TaskStatus status){
      final Runnable commitRunnable=new Runnable(){
        @Override public void run(){
          if (status.getNextTasks().size() > 0) {
            structThingy.pushed=true;
          }
        }
      }
;
      tq.notify(vt.getTask(),status,commitRunnable);
    }
  }
;
  callback.notify(vt.getTask().run(new TaskContext(vt.getVersion(),null,null),null,callback));
  Assert.assertTrue("pass1",structThingy.pass1);
  Assert.assertTrue("pass2",structThingy.pass2);
  Assert.assertTrue("id1 isSuccess",ts.getStatus("id1").get().isSuccess());
  Assert.assertTrue("id1 isSuccess (merged)",new TaskStorageQueryAdapter(ts).getSameGroupMergedStatus("id1").get().isSuccess());
  Assert.assertTrue("id2 isRunnable",ts.getStatus("id2").get().isRunnable());
}

{
  final Capabilities capabilities=adapter.getCapabilities();
  final String dimension=query.getDimensionSpec().getDimension();
  final int cardinality=adapter.getDimensionCardinality(dimension);
  int numBytesPerRecord=0;
  for (  AggregatorFactory aggregatorFactory : query.getAggregatorSpecs()) {
    numBytesPerRecord+=aggregatorFactory.getMaxIntermediateSize();
  }
  final TopNAlgorithmSelector selector=new TopNAlgorithmSelector(cardinality,numBytesPerRecord);
  query.initTopNAlgorithmSelector(selector);
  final TopNAlgorithm topNAlgorithm;
  if (selector.isHasExtractionFn() && dimension.equals(Column.TIME_COLUMN_NAME)) {
    topNAlgorithm=new TimeExtractionTopNAlgorithm(capabilities,query);
  }
 else   if (selector.isHasExtractionFn()) {
    topNAlgorithm=new DimExtractionTopNAlgorithm(capabilities,query);
  }
 else   if (selector.isAggregateAllMetrics()) {
    topNAlgorithm=new PooledTopNAlgorithm(capabilities,query,bufferPool);
  }
 else   if (selector.isAggregateTopNMetricFirst() || query.getContextValue("doAggregateTopNMetricFirst",false)) {
    topNAlgorithm=new AggregateTopNMetricFirstAlgorithm(capabilities,query,bufferPool);
  }
 else {
    topNAlgorithm=new PooledTopNAlgorithm(capabilities,query,bufferPool);
  }
  return new TopNMapFn(query,topNAlgorithm);
}

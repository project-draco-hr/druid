{
  final DimensionSelector selector=columnSelectorFactory.makeDimensionSelector(new DefaultDimensionSpec(dimension,dimension));
  final boolean doesMatchNull=predicate.apply(null);
  if (selector == null) {
    return new BooleanValueMatcher(doesMatchNull);
  }
  final int cardinality=selector.getValueCardinality();
  if (cardinality >= 0) {
    final BitSet valueIds=new BitSet(cardinality);
    for (int i=0; i < cardinality; i++) {
      if (predicate.apply(selector.lookupName(i))) {
        valueIds.set(i);
      }
    }
    return new ValueMatcher(){
      @Override public boolean matches(){
        final IndexedInts row=selector.getRow();
        final int size=row.size();
        if (size == 0) {
          return doesMatchNull;
        }
 else {
          for (int i=0; i < size; ++i) {
            if (valueIds.get(row.get(i))) {
              return true;
            }
          }
          return false;
        }
      }
    }
;
  }
 else {
    return new ValueMatcher(){
      @Override public boolean matches(){
        final IndexedInts row=selector.getRow();
        final int size=row.size();
        if (size == 0) {
          return doesMatchNull;
        }
 else {
          for (int i=0; i < size; ++i) {
            if (predicate.apply(selector.lookupName(row.get(i)))) {
              return true;
            }
          }
          return false;
        }
      }
    }
;
  }
}

{
  if (getTypeForDimension(dimension) == ValueType.LONG) {
    return Filters.getLongValueMatcher(columnSelectorFactory.makeLongColumnSelector(dimension),value);
  }
  final DimensionSelector selector=columnSelectorFactory.makeDimensionSelector(new DefaultDimensionSpec(dimension,dimension));
  final String valueString=value == null ? null : Strings.emptyToNull(value.toString());
  if (selector == null) {
    return new BooleanValueMatcher(valueString == null);
  }
  final int cardinality=selector.getValueCardinality();
  if (cardinality >= 0) {
    final int valueId=selector.lookupId(valueString);
    return new ValueMatcher(){
      @Override public boolean matches(){
        final IndexedInts row=selector.getRow();
        final int size=row.size();
        if (size == 0) {
          return valueString == null;
        }
 else {
          for (int i=0; i < size; ++i) {
            if (row.get(i) == valueId) {
              return true;
            }
          }
          return false;
        }
      }
    }
;
  }
 else {
    return new ValueMatcher(){
      @Override public boolean matches(){
        final IndexedInts row=selector.getRow();
        final int size=row.size();
        if (size == 0) {
          return valueString == null;
        }
 else {
          for (int i=0; i < size; ++i) {
            if (Objects.equals(selector.lookupName(row.get(i)),valueString)) {
              return true;
            }
          }
          return false;
        }
      }
    }
;
  }
}

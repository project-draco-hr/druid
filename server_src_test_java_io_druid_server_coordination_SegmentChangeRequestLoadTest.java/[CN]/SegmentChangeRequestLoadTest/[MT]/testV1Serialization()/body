{
  ObjectMapper mapper=new DefaultObjectMapper();
  final Interval interval=new Interval("2011-10-01/2011-10-02");
  final ImmutableMap<String,Object> loadSpec=ImmutableMap.<String,Object>of("something","or_other");
  DataSegment segment=new DataSegment("something",interval,"1",loadSpec,Arrays.asList("dim1","dim2"),Arrays.asList("met1","met2"),NoneShardSpec.instance(),IndexIO.CURRENT_VERSION_ID,1);
  final SegmentChangeRequestLoad segmentDrop=new SegmentChangeRequestLoad(segment);
  Map<String,Object> objectMap=mapper.readValue(mapper.writeValueAsString(segmentDrop),new TypeReference<Map<String,Object>>(){
  }
);
  Assert.assertEquals(11,objectMap.size());
  Assert.assertEquals("load",objectMap.get("action"));
  Assert.assertEquals("something",objectMap.get("dataSource"));
  Assert.assertEquals(interval.toString(),objectMap.get("interval"));
  Assert.assertEquals("1",objectMap.get("version"));
  Assert.assertEquals(loadSpec,objectMap.get("loadSpec"));
  Assert.assertEquals("dim1,dim2",objectMap.get("dimensions"));
  Assert.assertEquals("met1,met2",objectMap.get("metrics"));
  Assert.assertEquals(ImmutableMap.of("type","none"),objectMap.get("shardSpec"));
  Assert.assertEquals(IndexIO.CURRENT_VERSION_ID,objectMap.get("binaryVersion"));
  Assert.assertEquals(1,objectMap.get("size"));
}

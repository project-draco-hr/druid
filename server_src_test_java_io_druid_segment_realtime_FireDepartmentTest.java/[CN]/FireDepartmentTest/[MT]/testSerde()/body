{
  ObjectMapper jsonMapper=new DefaultObjectMapper();
  jsonMapper.setInjectableValues(new InjectableValues.Std().addValue(ObjectMapper.class,jsonMapper));
  FireDepartment schema=new FireDepartment(new DataSchema("foo",jsonMapper.convertValue(new StringInputRowParser(new JSONParseSpec(new TimestampSpec("timestamp","auto",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(Arrays.asList("dim1","dim2")),null,null))),Map.class),new AggregatorFactory[]{new CountAggregatorFactory("count")},new UniformGranularitySpec(Granularity.HOUR,QueryGranularities.MINUTE,null),jsonMapper),new RealtimeIOConfig(null,new RealtimePlumberSchool(null,null,null,null,null,null,null,TestHelper.getTestIndexMerger(),TestHelper.getTestIndexMergerV9(),TestHelper.getTestIndexIO(),MapCache.create(0),NO_CACHE_CONFIG,TestHelper.getObjectMapper()),null),RealtimeTuningConfig.makeDefaultTuningConfig(new File("/tmp/nonexistent")));
  String json=jsonMapper.writeValueAsString(schema);
  FireDepartment newSchema=jsonMapper.readValue(json,FireDepartment.class);
  Assert.assertEquals(schema.getDataSchema().getDataSource(),newSchema.getDataSchema().getDataSource());
  Assert.assertEquals("/tmp/nonexistent",schema.getTuningConfig().getBasePersistDirectory().toString());
}

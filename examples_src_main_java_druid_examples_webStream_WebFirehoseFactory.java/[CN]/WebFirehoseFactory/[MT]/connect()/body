{
  final UpdateStream updateStream=factory.build();
  updateStream.start();
  return new Firehose(){
    Map<String,Object> map;
    private final Runnable doNothingRunnable=Runnables.getNoopRunnable();
    @Override public boolean hasMore(){
      try {
        map=updateStream.pollFromQueue(queueWaitTime,TimeUnit.SECONDS);
        return map != null;
      }
 catch (      InterruptedException e) {
        throw Throwables.propagate(e);
      }
    }
    @Override public InputRow nextRow(){
      try {
        DateTime date=TimestampParser.createTimestampParser(timeFormat).apply(map.get(updateStream.getTimeDimension()).toString());
        return new MapBasedInputRow(date.getMillis(),new ArrayList(map.keySet()),map);
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
 finally {
        map=null;
      }
    }
    @Override public Runnable commit(){
      return doNothingRunnable;
    }
    @Override public void close() throws IOException {
      updateStream.stop();
    }
  }
;
}

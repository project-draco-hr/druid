{
  final BlockingQueue<Map<String,Object>> queue=new ArrayBlockingQueue<Map<String,Object>>(QUEUE_SIZE);
  Runnable updateStream=new UpdateStream(new WebJsonSupplier(url),queue,new DefaultObjectMapper(),renamedDimensions,timeDimension);
  final ExecutorService service=Executors.newSingleThreadExecutor();
  service.submit(updateStream);
  return new Firehose(){
    private final Runnable doNothingRunnable=Runnables.getNoopRunnable();
    @Override public boolean hasMore(){
      return !service.isTerminated();
    }
    @Override public InputRow nextRow(){
      try {
        Map<String,Object> map=queue.take();
        DateTime date=TimestampParser.createTimestampParser(timeFormat).apply(map.get(newTimeDimension).toString());
        return new MapBasedInputRow(date.getMillis(),new ArrayList(map.keySet()),map);
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
    }
    @Override public Runnable commit(){
      return doNothingRunnable;
    }
    @Override public void close() throws IOException {
      service.shutdown();
    }
  }
;
}

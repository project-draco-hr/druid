{
  return ImmutableList.<Object>of(new DruidModule(){
    @Override public void configure(    Binder binder){
      IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);
      JsonConfigProvider.bind(binder,"druid.worker",WorkerConfig.class);
      binder.bind(TaskRunner.class).to(ForkingTaskRunner.class);
      binder.bind(ForkingTaskRunner.class).in(LazySingleton.class);
      binder.bind(WorkerTaskMonitor.class).in(ManageLifecycle.class);
      binder.bind(WorkerCuratorCoordinator.class).in(ManageLifecycle.class);
      LifecycleModule.register(binder,WorkerTaskMonitor.class);
      binder.bind(JettyServerInitializer.class).toInstance(new MiddleManagerJettyServerInitializer());
      Jerseys.addResource(binder,WorkerResource.class);
      LifecycleModule.register(binder,Server.class);
    }
    @Provides @LazySingleton public Worker getWorker(    @Self DruidNode node,    WorkerConfig config){
      return new Worker(node.getHost(),config.getIp(),config.getCapacity(),config.getVersion());
    }
    @Override public List<? extends com.fasterxml.jackson.databind.Module> getJacksonModules(){
      return Arrays.<com.fasterxml.jackson.databind.Module>asList(new SimpleModule("RealtimeModule").registerSubtypes(new NamedType(TwitterSpritzerFirehoseFactory.class,"twitzer"),new NamedType(FlightsFirehoseFactory.class,"flights"),new NamedType(RandomFirehoseFactory.class,"rand"),new NamedType(WebFirehoseFactory.class,"webstream"),new NamedType(KafkaFirehoseFactory.class,"kafka-0.7.2"),new NamedType(RabbitMQFirehoseFactory.class,"rabbitmq"),new NamedType(ClippedFirehoseFactory.class,"clipped"),new NamedType(TimedShutoffFirehoseFactory.class,"timed"),new NamedType(IrcFirehoseFactory.class,"irc"),new NamedType(StaticS3FirehoseFactory.class,"s3"),new NamedType(EventReceiverFirehoseFactory.class,"receiver"),new NamedType(LocalFirehoseFactory.class,"local")));
    }
  }
);
}

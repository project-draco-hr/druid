{
  return ImmutableList.<Object>of(new Module(){
    @Override public void configure(    Binder binder){
      binder.bindConstant().annotatedWith(Names.named("serviceName")).to("druid/middlemanager");
      binder.bindConstant().annotatedWith(Names.named("servicePort")).to(8091);
      IndexingServiceModuleHelper.configureTaskRunnerConfigs(binder);
      JsonConfigProvider.bind(binder,"druid.indexer.task",TaskConfig.class);
      JsonConfigProvider.bind(binder,"druid.worker",WorkerConfig.class);
      binder.bind(TaskRunner.class).to(ForkingTaskRunner.class);
      binder.bind(ForkingTaskRunner.class).in(LazySingleton.class);
      binder.bind(ChatHandlerProvider.class).toProvider(Providers.<ChatHandlerProvider>of(null));
      binder.bind(WorkerTaskMonitor.class).in(ManageLifecycle.class);
      binder.bind(WorkerCuratorCoordinator.class).in(ManageLifecycle.class);
      LifecycleModule.register(binder,WorkerTaskMonitor.class);
      binder.bind(JettyServerInitializer.class).toInstance(new MiddleManagerJettyServerInitializer());
      Jerseys.addResource(binder,WorkerResource.class);
      LifecycleModule.register(binder,Server.class);
    }
    @Provides @LazySingleton public Worker getWorker(    @Self DruidNode node,    WorkerConfig config){
      return new Worker(node.getHostAndPort(),config.getIp(),config.getCapacity(),config.getVersion());
    }
  }
,new IndexingServiceFirehoseModule(),new IndexingServiceTaskLogsModule());
}

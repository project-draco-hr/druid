{
  final LoadQueuePeon toPeon=params.getLoadManagementPeons().get(toServer.getName());
  final ImmutableDruidServer fromServer=segment.getFromServer();
  final DataSegment segmentToMove=segment.getSegment();
  final String segmentName=segmentToMove.getIdentifier();
  if (!toPeon.getSegmentsToLoad().contains(segmentToMove) && (toServer.getSegment(segmentName) == null) && new ServerHolder(toServer,toPeon).getAvailableSize() > segmentToMove.getSize()) {
    log.info("Moving [%s] from [%s] to [%s]",segmentName,fromServer.getName(),toServer.getName());
    LoadPeonCallback callback=null;
    try {
      currentlyMovingSegments.get(toServer.getTier()).put(segmentName,segment);
      callback=new LoadPeonCallback(){
        @Override public void execute(){
          Map<String,BalancerSegmentHolder> movingSegments=currentlyMovingSegments.get(toServer.getTier());
          if (movingSegments != null) {
            movingSegments.remove(segmentName);
          }
        }
      }
;
      coordinator.moveSegment(fromServer,toServer,segmentToMove.getIdentifier(),callback);
    }
 catch (    Exception e) {
      log.makeAlert(e,String.format("[%s] : Moving exception",segmentName)).emit();
      if (callback != null) {
        callback.execute();
      }
    }
  }
 else {
    currentlyMovingSegments.get(toServer.getTier()).remove(segmentName);
  }
}

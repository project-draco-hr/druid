{
  mockServer(server1,"server1",dataSource1);
  mockServer(server2,"server2",dataSource2);
  mockServer(server3,"server3",dataSource3);
  EasyMock.expect(dataSource1.getSegments()).andReturn(Sets.newHashSet(segment1,segment2,segment3));
  EasyMock.replay(dataSource1);
  EasyMock.expect(dataSource2.getSegments()).andReturn(Sets.newHashSet(segment1,segment2));
  EasyMock.replay(dataSource2);
  EasyMock.expect(dataSource3.getSegments()).andReturn(Sets.newHashSet(segment2));
  EasyMock.replay(dataSource3);
  EasyMock.expect(segment1.getIdentifier()).andReturn("segment1").anyTimes();
  EasyMock.expect(segment1.getSize()).andReturn(1L).anyTimes();
  EasyMock.expect(segment1.getInterval()).andReturn(new Interval(0,Integer.MAX_VALUE)).atLeastOnce();
  EasyMock.expect(segment1.compareTo(EasyMock.<DataSegment>anyObject())).andReturn(0).anyTimes();
  EasyMock.replay(segment1);
  EasyMock.expect(segment2.getIdentifier()).andReturn("segment2").anyTimes();
  EasyMock.expect(segment2.getSize()).andReturn(1L).anyTimes();
  EasyMock.expect(segment2.getInterval()).andReturn(new Interval(0,Integer.MAX_VALUE)).atLeastOnce();
  EasyMock.expect(segment2.compareTo(EasyMock.<DataSegment>anyObject())).andReturn(0).anyTimes();
  EasyMock.replay(segment2);
  EasyMock.expect(segment3.getIdentifier()).andReturn("segment3").anyTimes();
  EasyMock.expect(segment3.getSize()).andReturn(1L).anyTimes();
  EasyMock.expect(segment3.getInterval()).andReturn(new Interval(0,Integer.MAX_VALUE)).atLeastOnce();
  EasyMock.expect(segment3.compareTo(EasyMock.<DataSegment>anyObject())).andReturn(0).anyTimes();
  EasyMock.replay(segment3);
  EasyMock.expect(peon.getLoadQueueSize()).andReturn(0L).atLeastOnce();
  EasyMock.expect(peon.getSegmentsToLoad()).andReturn(Sets.<DataSegment>newHashSet());
  EasyMock.expect(peon.getSegmentsToDrop()).andReturn(Sets.<DataSegment>newHashSet());
  EasyMock.replay(peon);
  master.cloneSegment(EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall();
  master.dropSegment(EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall();
  EasyMock.replay(master);
  DruidMasterRuntimeParams params=DruidMasterRuntimeParams.newBuilder().withHistoricalServers(Arrays.asList(server1,server2,server3)).withLoadManagementPeons(ImmutableMap.of("server1",peon,"server2",peon,"server3",peon)).withAvailableSegments(Arrays.asList(segment1,segment2,segment3)).build();
  params=new DruidMasterReplicator(master).run(params);
  Assert.assertEquals(params.getCreatedReplicantCount(),1);
  Assert.assertEquals(params.getDestroyedReplicantCount(),1);
}

{
  final TaskLock myLock=Iterables.getOnlyElement(getTaskLocks(toolbox));
  final Set<DataSegment> segments=Sets.newHashSet();
  final Set<Interval> validIntervals=Sets.intersection(granularitySpec.bucketIntervals(),getDataIntervals());
  for (  final Interval bucket : validIntervals) {
    final List<ShardSpec> shardSpecs;
    if (targetPartitionSize > 0) {
      shardSpecs=determinePartitions(bucket,targetPartitionSize);
    }
 else {
      shardSpecs=ImmutableList.<ShardSpec>of(new NoneShardSpec());
    }
    for (    final ShardSpec shardSpec : shardSpecs) {
      final DataSegment segment=generateSegment(toolbox,new Schema(getDataSource(),spatialDimensions,aggregators,indexGranularity,shardSpec),bucket,myLock.getVersion());
      segments.add(segment);
    }
  }
  toolbox.pushSegments(segments);
  return TaskStatus.success(getId());
}

{
  final FirehoseFactory firehoseFactory=ingestionSchema.getIOConfig().getFirehoseFactory();
  final GranularitySpec granularitySpec=ingestionSchema.getDataSchema().getGranularitySpec();
  SortedSet<Interval> retVal=Sets.newTreeSet(Comparators.intervalsByStartThenEnd());
  int unparsed=0;
  try (Firehose firehose=firehoseFactory.connect(ingestionSchema.getDataSchema().getParser())){
    while (firehose.hasMore()) {
      final InputRow inputRow=firehose.nextRow();
      DateTime dt=new DateTime(inputRow.getTimestampFromEpoch());
      Optional<Interval> interval=granularitySpec.bucketInterval(dt);
      if (interval.isPresent()) {
        retVal.add(interval.get());
      }
 else {
        unparsed++;
      }
    }
  }
   if (unparsed > 0) {
    log.warn("Unable to to find a matching interval for [%,d] events",unparsed);
  }
  return retVal;
}

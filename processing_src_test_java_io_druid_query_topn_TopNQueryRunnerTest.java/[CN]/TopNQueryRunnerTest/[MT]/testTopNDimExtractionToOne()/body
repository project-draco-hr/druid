{
  TopNQuery query=new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(new ExtractionDimensionSpec(QueryRunnerTestHelper.marketDimension,QueryRunnerTestHelper.marketDimension,new JavaScriptExtractionFn("function(f) { return \"POTATO\"; }",false,JavaScriptConfig.getDefault()),null)).metric("rows").threshold(10).intervals(QueryRunnerTestHelper.fullOnInterval).aggregators(QueryRunnerTestHelper.commonAggregators).postAggregators(Arrays.<PostAggregator>asList(QueryRunnerTestHelper.addRowsIndexConstant)).build();
  QueryGranularity gran=QueryGranularity.DAY;
  TimeseriesQuery tsQuery=Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(gran).intervals(QueryRunnerTestHelper.fullOnInterval).aggregators(Arrays.asList(QueryRunnerTestHelper.rowsCount,QueryRunnerTestHelper.indexDoubleSum,QueryRunnerTestHelper.qualityUniques)).postAggregators(Arrays.<PostAggregator>asList(QueryRunnerTestHelper.addRowsIndexConstant)).build();
  List<Result<TopNResultValue>> expectedResults=Arrays.asList(new Result<>(new DateTime("2011-01-12T00:00:00.000Z"),new TopNResultValue(Arrays.<Map<String,Object>>asList(ImmutableMap.<String,Object>of("addRowsIndexConstant",504542.5071372986D,"index",503332.5071372986D,QueryRunnerTestHelper.marketDimension,"POTATO","uniques",QueryRunnerTestHelper.UNIQUES_9,"rows",1209L)))));
  List<Result<TopNResultValue>> list=Sequences.toList(runWithMerge(query),new ArrayList<Result<TopNResultValue>>());
  Assert.assertEquals(list.size(),1);
  Assert.assertEquals("Didn't merge results",list.get(0).getValue().getValue().size(),1);
  TestHelper.assertExpectedResults(expectedResults,list,"Failed to match");
}

{
  final HashMap<String,Object> specialContext=new HashMap<String,Object>();
  specialContext.put("bySegment","true");
  TopNQuery query=new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(marketDimension).metric(QueryRunnerTestHelper.indexMetric).threshold(4).intervals(QueryRunnerTestHelper.firstToThird).aggregators(QueryRunnerTestHelper.commonAggregators).postAggregators(Arrays.<PostAggregator>asList(QueryRunnerTestHelper.addRowsIndexConstant)).context(specialContext).build();
  List<Result<TopNResultValue>> expectedResults=Arrays.asList(new Result<TopNResultValue>(new DateTime("2011-04-01T00:00:00.000Z"),new TopNResultValue(Arrays.<Map<String,Object>>asList(ImmutableMap.<String,Object>of("addRowsIndexConstant",5356.814697265625D,"index",5351.814697265625D,marketDimension,"total_market","uniques",QueryRunnerTestHelper.UNIQUES_2,"rows",4L),ImmutableMap.<String,Object>of("addRowsIndexConstant",4880.669677734375D,"index",4875.669677734375D,marketDimension,"upfront","uniques",QueryRunnerTestHelper.UNIQUES_2,"rows",4L),ImmutableMap.<String,Object>of("addRowsIndexConstant",2250.8768157958984D,"index",2231.8768157958984D,marketDimension,"spot","uniques",QueryRunnerTestHelper.UNIQUES_9,"rows",18L)))));
  Sequence<Result<TopNResultValue>> results=new TopNQueryQueryToolChest(new TopNQueryConfig()).postMergeQueryDecoration(runner).run(query,specialContext);
  List<Result<BySegmentTopNResultValue>> resultList=Sequences.toList(Sequences.map(results,new Function<Result<TopNResultValue>,Result<BySegmentTopNResultValue>>(){
    @Nullable @Override public Result<BySegmentTopNResultValue> apply(    Result<TopNResultValue> input){
      return new Result<BySegmentTopNResultValue>(input.getTimestamp(),(BySegmentTopNResultValue)input.getValue());
    }
  }
),Lists.<Result<BySegmentTopNResultValue>>newArrayList());
  TestHelper.assertExpectedResults(expectedResults,resultList.get(0).getValue().getResults());
}

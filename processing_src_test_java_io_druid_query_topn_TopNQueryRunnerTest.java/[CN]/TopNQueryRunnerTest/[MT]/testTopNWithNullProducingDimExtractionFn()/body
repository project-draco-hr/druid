{
  final ExtractionFn nullStringDimExtraction=new DimExtractionFn(){
    @Override public byte[] getCacheKey(){
      return new byte[]{(byte)0xFF};
    }
    @Override public String apply(    String dimValue){
      return dimValue.equals("total_market") ? null : dimValue;
    }
    @Override public boolean preservesOrdering(){
      return false;
    }
  }
;
  final TopNQuery query=new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).metric("rows").threshold(4).intervals(QueryRunnerTestHelper.firstToThird).aggregators(QueryRunnerTestHelper.commonAggregators).postAggregators(Arrays.<PostAggregator>asList(QueryRunnerTestHelper.addRowsIndexConstant)).dimension(new ExtractionDimensionSpec(QueryRunnerTestHelper.marketDimension,QueryRunnerTestHelper.marketDimension,nullStringDimExtraction,null)).build();
  List<Result<TopNResultValue>> expectedResults=Arrays.asList(new Result<>(new DateTime("2011-04-01T00:00:00.000Z"),new TopNResultValue(Arrays.<Map<String,Object>>asList(ImmutableMap.<String,Object>of(QueryRunnerTestHelper.marketDimension,"spot","rows",18L,"index",2231.8768157958984D,"addRowsIndexConstant",2250.8768157958984D,"uniques",QueryRunnerTestHelper.UNIQUES_9),new LinkedHashMap<String,Object>(){
{
      put(QueryRunnerTestHelper.marketDimension,null);
      put("rows",4L);
      put("index",5351.814697265625D);
      put("addRowsIndexConstant",5356.814697265625D);
      put("uniques",QueryRunnerTestHelper.UNIQUES_2);
    }
  }
,ImmutableMap.<String,Object>of(QueryRunnerTestHelper.marketDimension,"upfront","rows",4L,"index",4875.669677734375D,"addRowsIndexConstant",4880.669677734375D,"uniques",QueryRunnerTestHelper.UNIQUES_2)))));
  TestHelper.assertExpectedResults(expectedResults,runner.run(query,Maps.newHashMap()));
}

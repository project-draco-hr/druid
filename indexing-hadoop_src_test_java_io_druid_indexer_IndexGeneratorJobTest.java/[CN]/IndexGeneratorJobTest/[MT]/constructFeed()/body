{
  final List<Object[]> baseConstructors=Arrays.asList(new Object[][]{{false,"single","2014-10-22T00:00:00Z/P2D",new String[][][]{{{null,"c.example.com"},{"c.example.com","e.example.com"},{"e.example.com","g.example.com"},{"g.example.com","i.example.com"},{"i.example.com",null}},{{null,"c.example.com"},{"c.example.com","e.example.com"},{"e.example.com","g.example.com"},{"g.example.com","i.example.com"},{"i.example.com",null}}},ImmutableList.of("2014102200,a.example.com,100","2014102200,b.exmaple.com,50","2014102200,c.example.com,200","2014102200,d.example.com,250","2014102200,e.example.com,123","2014102200,f.example.com,567","2014102200,g.example.com,11","2014102200,h.example.com,251","2014102200,i.example.com,963","2014102200,j.example.com,333","2014102300,a.example.com,100","2014102300,b.exmaple.com,50","2014102300,c.example.com,200","2014102300,d.example.com,250","2014102300,e.example.com,123","2014102300,f.example.com,567","2014102300,g.example.com,11","2014102300,h.example.com,251","2014102300,i.example.com,963","2014102300,j.example.com,333"),null,new StringInputRowParser(new CSVParseSpec(new TimestampSpec("timestamp","yyyyMMddHH",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of("host")),null,null),null,ImmutableList.of("timestamp","host","visited_num")),null),null,aggs1,"website"},{false,"hashed","2014-10-22T00:00:00Z/P1D",new Integer[][][]{{{0,4},{1,4},{2,4},{3,4}}},ImmutableList.of("2014102200,a.example.com,100","2014102201,b.exmaple.com,50","2014102202,c.example.com,200","2014102203,d.example.com,250","2014102204,e.example.com,123","2014102205,f.example.com,567","2014102206,g.example.com,11","2014102207,h.example.com,251","2014102208,i.example.com,963","2014102209,j.example.com,333","2014102210,k.example.com,253","2014102211,l.example.com,321","2014102212,m.example.com,3125","2014102213,n.example.com,234","2014102214,o.example.com,325","2014102215,p.example.com,3533","2014102216,q.example.com,500","2014102216,q.example.com,87"),null,new HadoopyStringInputRowParser(new CSVParseSpec(new TimestampSpec("timestamp","yyyyMMddHH",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of("host")),null,null),null,ImmutableList.of("timestamp","host","visited_num"))),null,aggs1,"website"},{true,"hashed","2014-10-22T00:00:00Z/P1D",new Integer[][][]{{{0,4},{1,4},{2,4},{3,4}}},ImmutableList.of("2014102200,a.example.com,100","2014102201,b.exmaple.com,50","2014102202,c.example.com,200","2014102203,d.example.com,250","2014102204,e.example.com,123","2014102205,f.example.com,567","2014102206,g.example.com,11","2014102207,h.example.com,251","2014102208,i.example.com,963","2014102209,j.example.com,333","2014102210,k.example.com,253","2014102211,l.example.com,321","2014102212,m.example.com,3125","2014102213,n.example.com,234","2014102214,o.example.com,325","2014102215,p.example.com,3533","2014102216,q.example.com,500","2014102216,q.example.com,87"),null,new StringInputRowParser(new CSVParseSpec(new TimestampSpec("timestamp","yyyyMMddHH",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of("host")),null,null),null,ImmutableList.of("timestamp","host","visited_num")),null),null,aggs1,"website"},{false,"single","2014-10-22T00:00:00Z/P2D",new String[][][]{{{null,"c.example.com"},{"c.example.com","e.example.com"},{"e.example.com","g.example.com"},{"g.example.com","i.example.com"},{"i.example.com",null}},{{null,"c.example.com"},{"c.example.com","e.example.com"},{"e.example.com","g.example.com"},{"g.example.com","i.example.com"},{"i.example.com",null}}},ImmutableList.of("2014102200,a.example.com,100","2014102200,b.exmaple.com,50","2014102200,c.example.com,200","2014102200,d.example.com,250","2014102200,e.example.com,123","2014102200,f.example.com,567","2014102200,g.example.com,11","2014102200,h.example.com,251","2014102200,i.example.com,963","2014102200,j.example.com,333","2014102300,a.example.com,100","2014102300,b.exmaple.com,50","2014102300,c.example.com,200","2014102300,d.example.com,250","2014102300,e.example.com,123","2014102300,f.example.com,567","2014102300,g.example.com,11","2014102300,h.example.com,251","2014102300,i.example.com,963","2014102300,j.example.com,333"),SequenceFileInputFormat.class.getName(),new HadoopyStringInputRowParser(new CSVParseSpec(new TimestampSpec("timestamp","yyyyMMddHH",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of("host")),null,null),null,ImmutableList.of("timestamp","host","visited_num"))),null,aggs1,"website"},{false,"hashed","2014-10-22T00:00:00Z/P1D",new Integer[][][]{{{0,1}}},ImmutableList.of("{\"ts\":\"2014102200\", \"X\":\"x.example.com\"}","{\"ts\":\"2014102201\", \"Y\":\"y.example.com\"}","{\"ts\":\"2014102202\", \"M\":\"m.example.com\"}","{\"ts\":\"2014102203\", \"Q\":\"q.example.com\"}","{\"ts\":\"2014102204\", \"B\":\"b.example.com\"}","{\"ts\":\"2014102205\", \"F\":\"f.example.com\"}"),null,new StringInputRowParser(new JSONParseSpec(new TimestampSpec("ts","yyyyMMddHH",null),new DimensionsSpec(null,null,null),null,null),null),1,aggs2,"inherit_dims"},{false,"hashed","2014-10-22T00:00:00Z/P1D",new Integer[][][]{{{0,1}}},ImmutableList.of("{\"ts\":\"2014102200\", \"X\":\"x.example.com\"}","{\"ts\":\"2014102201\", \"Y\":\"y.example.com\"}","{\"ts\":\"2014102202\", \"M\":\"m.example.com\"}","{\"ts\":\"2014102203\", \"Q\":\"q.example.com\"}","{\"ts\":\"2014102204\", \"B\":\"b.example.com\"}","{\"ts\":\"2014102205\", \"F\":\"f.example.com\"}"),null,new StringInputRowParser(new JSONParseSpec(new TimestampSpec("ts","yyyyMMddHH",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of("B","F","M","Q","X","Y")),null,null),null,null),null),1,aggs2,"inherit_dims2"}});
  final List<Object[]> constructors=Lists.newArrayList();
  for (  Object[] baseConstructor : baseConstructors) {
    final Object[] c1=new Object[baseConstructor.length + 1];
    final Object[] c2=new Object[baseConstructor.length + 1];
    System.arraycopy(baseConstructor,0,c1,0,baseConstructor.length);
    System.arraycopy(baseConstructor,0,c2,0,baseConstructor.length);
    c1[c1.length - 1]=true;
    c2[c2.length - 1]=false;
    constructors.add(c1);
    constructors.add(c2);
  }
  return constructors;
}

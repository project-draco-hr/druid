{
  final KafkaStream<String,String> kafkaStream=EasyMock.createStrictMock(KafkaStream.class);
  final ConsumerIterator<String,String> consumerIterator=EasyMock.createStrictMock(ConsumerIterator.class);
  final ConsumerConnector consumerConnector=EasyMock.createStrictMock(ConsumerConnector.class);
  EasyMock.expect(consumerConnector.createMessageStreamsByFilter(EasyMock.anyObject(TopicFilter.class),EasyMock.anyInt(),EasyMock.eq(DEFAULT_STRING_DECODER),EasyMock.eq(DEFAULT_STRING_DECODER))).andReturn(ImmutableList.of(kafkaStream)).once();
  EasyMock.expect(kafkaStream.iterator()).andReturn(consumerIterator).anyTimes();
  EasyMock.expect(consumerIterator.hasNext()).andReturn(false).anyTimes();
  EasyMock.expect(cacheManager.getCacheMap(EasyMock.anyString())).andReturn(new ConcurrentHashMap<String,String>()).once();
  EasyMock.expect(cacheManager.delete(EasyMock.anyString())).andReturn(true).once();
  consumerConnector.shutdown();
  EasyMock.expectLastCall().once();
  EasyMock.replay(cacheManager,kafkaStream,consumerConnector,consumerIterator);
  final KafkaLookupExtractorFactory factory=new KafkaLookupExtractorFactory(cacheManager,TOPIC,ImmutableMap.of("zookeeper.connect","localhost")){
    @Override ConsumerConnector buildConnector(    Properties properties){
      return consumerConnector;
    }
  }
;
  Assert.assertTrue(factory.start());
  Assert.assertTrue(factory.close());
  Assert.assertFalse(factory.start());
  EasyMock.verify(cacheManager);
}

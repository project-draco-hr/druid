{
  File tmpDir=temporaryFolder.newFolder();
  File tmpFile=File.createTempFile("druid","index",tmpDir);
  PrintWriter writer=new PrintWriter(tmpFile);
  writer.println("2014-01-01T00:00:10Z,a,1");
  writer.println("2014-01-01T01:00:20Z,b,1");
  writer.println("2014-01-01T02:00:30Z,c,1");
  writer.close();
  IndexTask indexTask=new IndexTask(null,null,new IndexTask.IndexIngestionSpec(new DataSchema("test",jsonMapper.convertValue(new StringInputRowParser(new CSVParseSpec(new TimestampSpec("ts","auto",null),new DimensionsSpec(DimensionsSpec.getDefaultSchemas(Arrays.asList("ts")),Lists.<String>newArrayList(),Lists.<SpatialDimensionSchema>newArrayList()),null,Arrays.asList("ts","dim","val")),null),Map.class),new AggregatorFactory[]{new LongSumAggregatorFactory("val","val")},new UniformGranularitySpec(Granularity.DAY,QueryGranularities.MINUTE,Arrays.asList(new Interval("2014/2015"))),jsonMapper),new IndexTask.IndexIOConfig(new LocalFirehoseFactory(tmpDir,"druid*",null)),new IndexTask.IndexTuningConfig(2,0,null,indexSpec,null,true)),jsonMapper,null);
  final List<DataSegment> segments=runTask(indexTask);
  Assert.assertEquals(2,segments.size());
  Assert.assertEquals("test",segments.get(0).getDataSource());
  Assert.assertEquals(new Interval("2014/P1D"),segments.get(0).getInterval());
  Assert.assertTrue(segments.get(0).getShardSpec().getClass().equals(NumberedShardSpec.class));
  Assert.assertEquals(0,segments.get(0).getShardSpec().getPartitionNum());
  Assert.assertEquals(2,((NumberedShardSpec)segments.get(0).getShardSpec()).getPartitions());
  Assert.assertEquals("test",segments.get(1).getDataSource());
  Assert.assertEquals(new Interval("2014/P1D"),segments.get(1).getInterval());
  Assert.assertTrue(segments.get(1).getShardSpec().getClass().equals(NumberedShardSpec.class));
  Assert.assertEquals(1,segments.get(1).getShardSpec().getPartitionNum());
  Assert.assertEquals(2,((NumberedShardSpec)segments.get(1).getShardSpec()).getPartitions());
}

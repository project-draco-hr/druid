{
  return ImmutableList.<Module>of(new Module(){
    @Override public void configure(    Binder binder){
      binder.bindConstant().annotatedWith(Names.named("serviceName")).to("druid/historical");
      binder.bindConstant().annotatedWith(Names.named("servicePort")).to(8083);
      LifecycleModule.register(binder,Server.class);
      binder.bind(ServerManager.class).in(LazySingleton.class);
      binder.bind(ZkCoordinator.class).in(ManageLifecycle.class);
      binder.bind(QuerySegmentWalker.class).to(ServerManager.class).in(LazySingleton.class);
      binder.bind(NodeTypeConfig.class).toInstance(new NodeTypeConfig("historical"));
      binder.bind(JettyServerInitializer.class).to(QueryJettyServerInitializer.class).in(LazySingleton.class);
      Jerseys.addResource(binder,QueryResource.class);
      Jerseys.addResource(binder,HistoricalResource.class);
      LifecycleModule.register(binder,QueryResource.class);
      LifecycleModule.register(binder,ZkCoordinator.class);
      JsonConfigProvider.bind(binder,"druid.historical.cache",CacheConfig.class);
      binder.install(new CacheModule());
      MetricsModule.register(binder,CacheMonitor.class);
    }
  }
,new LookupModule());
}

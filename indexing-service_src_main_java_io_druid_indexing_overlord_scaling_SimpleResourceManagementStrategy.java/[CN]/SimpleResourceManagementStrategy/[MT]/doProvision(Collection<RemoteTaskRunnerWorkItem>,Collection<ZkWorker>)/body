{
synchronized (lock) {
    boolean didProvision=false;
    final WorkerSetupData workerSetupData=workerSetupDataRef.get();
    if (workerSetupData == null) {
      log.warn("No workerSetupData available, cannot provision new workers.");
      return false;
    }
    final Predicate<ZkWorker> isValidWorker=createValidWorkerPredicate(config);
    final int currValidWorkers=Collections2.filter(zkWorkers,isValidWorker).size();
    final List<String> workerNodeIds=autoScalingStrategy.ipToIdLookup(Lists.newArrayList(Iterables.<ZkWorker,String>transform(zkWorkers,new Function<ZkWorker,String>(){
      @Override public String apply(      ZkWorker input){
        return input.getWorker().getIp();
      }
    }
)));
    currentlyProvisioning.removeAll(workerNodeIds);
    updateTargetWorkerCount(workerSetupData,pendingTasks,zkWorkers);
    int want=targetWorkerCount - (currValidWorkers + currentlyProvisioning.size());
    while (want > 0) {
      final AutoScalingData provisioned=autoScalingStrategy.provision();
      final List<String> newNodes;
      if (provisioned == null || (newNodes=provisioned.getNodeIds()).isEmpty()) {
        break;
      }
 else {
        currentlyProvisioning.addAll(newNodes);
        lastProvisionTime=new DateTime();
        scalingStats.addProvisionEvent(provisioned);
        want-=provisioned.getNodeIds().size();
        didProvision=true;
      }
    }
    if (!currentlyProvisioning.isEmpty()) {
      Duration durSinceLastProvision=new Duration(lastProvisionTime,new DateTime());
      log.info("%s provisioning. Current wait time: %s",currentlyProvisioning,durSinceLastProvision);
      if (durSinceLastProvision.isLongerThan(config.getMaxScalingDuration().toStandardDuration())) {
        log.makeAlert("Worker node provisioning taking too long!").addData("millisSinceLastProvision",durSinceLastProvision.getMillis()).addData("provisioningCount",currentlyProvisioning.size()).emit();
        autoScalingStrategy.terminateWithIds(Lists.newArrayList(currentlyProvisioning));
        currentlyProvisioning.clear();
      }
    }
    return didProvision;
  }
}

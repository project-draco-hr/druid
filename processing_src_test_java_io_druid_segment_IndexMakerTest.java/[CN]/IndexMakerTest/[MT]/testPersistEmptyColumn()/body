{
  final IncrementalIndex toPersist1=new IncrementalIndex(0L,QueryGranularity.NONE,new AggregatorFactory[]{},TestQueryRunners.pool);
  final IncrementalIndex toPersist2=new IncrementalIndex(0L,QueryGranularity.NONE,new AggregatorFactory[]{},TestQueryRunners.pool);
  final File tmpDir1=Files.createTempDir();
  final File tmpDir2=Files.createTempDir();
  final File tmpDir3=Files.createTempDir();
  try {
    toPersist1.add(new MapBasedInputRow(1L,ImmutableList.of("dim1","dim2"),ImmutableMap.<String,Object>of("dim1",ImmutableList.of(),"dim2","foo")));
    toPersist2.add(new MapBasedInputRow(1L,ImmutableList.of("dim1","dim2"),ImmutableMap.<String,Object>of("dim1",ImmutableList.of(),"dim2","bar")));
    final QueryableIndex index1=IndexIO.loadIndex(IndexMaker.persist(toPersist1,tmpDir1));
    final QueryableIndex index2=IndexIO.loadIndex(IndexMaker.persist(toPersist1,tmpDir2));
    final QueryableIndex merged=IndexIO.loadIndex(IndexMaker.mergeQueryableIndex(Arrays.asList(index1,index2),new AggregatorFactory[]{},tmpDir3));
    Assert.assertEquals(1,index1.getColumn(Column.TIME_COLUMN_NAME).getLength());
    Assert.assertEquals(ImmutableList.of("dim2"),ImmutableList.copyOf(index1.getAvailableDimensions()));
    Assert.assertEquals(1,index2.getColumn(Column.TIME_COLUMN_NAME).getLength());
    Assert.assertEquals(ImmutableList.of("dim2"),ImmutableList.copyOf(index2.getAvailableDimensions()));
    Assert.assertEquals(1,merged.getColumn(Column.TIME_COLUMN_NAME).getLength());
    Assert.assertEquals(ImmutableList.of("dim2"),ImmutableList.copyOf(merged.getAvailableDimensions()));
  }
  finally {
    FileUtils.deleteQuietly(tmpDir1);
    FileUtils.deleteQuietly(tmpDir2);
    FileUtils.deleteQuietly(tmpDir3);
  }
}

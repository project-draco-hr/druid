{
  final long lastCached=lastVersion == null ? JodaUtils.MIN_INSTANT : Long.parseLong(lastVersion);
  return new Callable<String>(){
    @Override public String call(){
      final boolean doSearch=extractionNamespace.getUriPrefix() != null;
      final URI originalUri=doSearch ? extractionNamespace.getUriPrefix() : extractionNamespace.getUri();
      final SearchableVersionedDataFinder<URI> pullerRaw=pullers.get(originalUri.getScheme());
      if (pullerRaw == null) {
        throw new IAE("Unknown loader type[%s].  Known types are %s",originalUri.getScheme(),pullers.keySet());
      }
      if (!(pullerRaw instanceof URIDataPuller)) {
        throw new IAE("Cannot load data from location [%s]. Data pulling from [%s] not supported",originalUri,originalUri.getScheme());
      }
      final URIDataPuller puller=(URIDataPuller)pullerRaw;
      final Pattern versionRegex;
      final URI uriBase;
      if (doSearch) {
        uriBase=extractionNamespace.getUriPrefix();
        if (extractionNamespace.getFileRegex() != null) {
          versionRegex=Pattern.compile(extractionNamespace.getFileRegex());
        }
 else {
          versionRegex=null;
        }
      }
 else {
        final Path filePath=Paths.get(extractionNamespace.getUri());
        versionRegex=Pattern.compile(Pattern.quote(filePath.getFileName().toString()));
        uriBase=filePath.getParent().toUri();
      }
      final URI uri=pullerRaw.getLatestVersion(uriBase,versionRegex);
      if (uri == null) {
        throw new RuntimeException(new FileNotFoundException(String.format("Could not find match for pattern `%s` in [%s] for %s",versionRegex,originalUri,extractionNamespace)));
      }
      final String uriPath=uri.getPath();
      try {
        return RetryUtils.retry(new Callable<String>(){
          @Override public String call() throws Exception {
            final String version=puller.getVersion(uri);
            try {
              long lastModified=Long.parseLong(version);
              if (lastModified <= lastCached) {
                final DateTimeFormatter fmt=ISODateTimeFormat.dateTime();
                log.debug("URI [%s] for namespace [%s] was las modified [%s] but was last cached [%s]. Skipping ",uri.toString(),extractionNamespace.getNamespace(),fmt.print(lastModified),fmt.print(lastCached));
                return version;
              }
            }
 catch (            NumberFormatException ex) {
              log.debug(ex,"Failed to get last modified timestamp. Assuming no timestamp");
            }
            final ByteSource source;
            if (CompressionUtils.isGz(uriPath)) {
              log.debug("Loading gz");
              source=new ByteSource(){
                @Override public InputStream openStream() throws IOException {
                  return CompressionUtils.gzipInputStream(puller.getInputStream(uri));
                }
              }
;
            }
 else {
              source=new ByteSource(){
                @Override public InputStream openStream() throws IOException {
                  return puller.getInputStream(uri);
                }
              }
;
            }
            final long lineCount=new MapPopulator<>(extractionNamespace.getNamespaceParseSpec().getParser()).populate(source,cache);
            log.info("Finished loading %d lines for namespace [%s]",lineCount,extractionNamespace.getNamespace());
            return version;
          }
        }
,puller.shouldRetryPredicate(),DEFAULT_NUM_RETRIES);
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
    }
  }
;
}

{
  final Interval theInterval=getIntervalOrDefault(interval);
  return dbi.withHandle(new HandleCallback<List<AuditEntry>>(){
    @Override public List<AuditEntry> withHandle(    Handle handle) throws Exception {
      return handle.createQuery(String.format("SELECT payload FROM %s WHERE type = :type and created_date between :start_date and :end_date ORDER BY created_date",getAuditTable())).bind("type",type).bind("start_date",theInterval.getStart().toString()).bind("end_date",theInterval.getEnd().toString()).map(new ResultSetMapper<AuditEntry>(){
        @Override public AuditEntry map(        int index,        ResultSet r,        StatementContext ctx) throws SQLException {
          try {
            return jsonMapper.readValue(r.getBytes("payload"),AuditEntry.class);
          }
 catch (          IOException e) {
            throw new SQLException(e);
          }
        }
      }
).list();
    }
  }
);
}

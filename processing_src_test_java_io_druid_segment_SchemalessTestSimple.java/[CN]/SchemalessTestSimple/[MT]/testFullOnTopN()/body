{
  TopNQuery query=new TopNQueryBuilder().dataSource(dataSource).granularity(allGran).dimension(marketDimension).metric(indexMetric).threshold(3).intervals(fullOnInterval).aggregators(Lists.<AggregatorFactory>newArrayList(Iterables.concat(commonAggregators,Lists.newArrayList(new MaxAggregatorFactory("maxIndex","index"),new MinAggregatorFactory("minIndex","index"))))).postAggregators(Arrays.<PostAggregator>asList(addRowsIndexConstant)).build();
  List<Result<TopNResultValue>> expectedResults=Arrays.asList(new Result<TopNResultValue>(new DateTime("2011-01-12T00:00:00.000Z"),new TopNResultValue(Arrays.<DimensionAndMetricValueExtractor>asList(new DimensionAndMetricValueExtractor(ImmutableMap.<String,Object>builder().put("market","spot").put("rows",4L).put("index",400.0D).put("addRowsIndexConstant",405.0D).put("uniques",1.0002442201269182D).put("maxIndex",100.0).put("minIndex",100.0).build()),new DimensionAndMetricValueExtractor(ImmutableMap.<String,Object>builder().put("market","").put("rows",2L).put("index",200.0D).put("addRowsIndexConstant",203.0D).put("uniques",0.0).put("maxIndex",100.0D).put("minIndex",100.0D).build()),new DimensionAndMetricValueExtractor(ImmutableMap.<String,Object>builder().put("market","total_market").put("rows",2L).put("index",200.0D).put("addRowsIndexConstant",203.0D).put("uniques",1.0002442201269182D).put("maxIndex",100.0D).put("minIndex",100.0D).build())))));
  QueryRunner runner=TestQueryRunners.makeTopNQueryRunner(segment);
  TestHelper.assertExpectedResults(expectedResults,runner.run(query));
}

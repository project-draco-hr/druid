{
  QueryRunner<Result<TimeseriesResultValue>> queryRunner=testOperator.postProcess(new QueryRunner<Result<TimeseriesResultValue>>(){
    @Override public Sequence<Result<TimeseriesResultValue>> run(    Query<Result<TimeseriesResultValue>> query,    Map<String,Object> responseContext){
      return Sequences.simple(ImmutableList.of(new Result<>(new DateTime(new DateTime("2014-01-09")),new TimeseriesResultValue(ImmutableMap.<String,Object>of("metric",2))),new Result<>(new DateTime(new DateTime("2014-01-11")),new TimeseriesResultValue(ImmutableMap.<String,Object>of("metric",3))),new Result<>(query.getIntervals().get(0).getEnd(),new TimeseriesResultValue(ImmutableMap.<String,Object>of("metric",5)))));
    }
  }
,new DateTime("2014-08-02").getMillis());
  final Query<Result<TimeseriesResultValue>> query=Druids.newTimeseriesQueryBuilder().dataSource("dummy").intervals("2014-07-31/2014-08-05").aggregators(Arrays.<AggregatorFactory>asList(new CountAggregatorFactory("count"))).build();
  Assert.assertEquals(Lists.newArrayList(new Result<>(new DateTime("2014-07-31"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("metric",2))),new Result<>(new DateTime("2014-08-02"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("metric",3))),new Result<>(new DateTime("2014-08-02"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("metric",5)))),Sequences.toList(queryRunner.run(query,CONTEXT),Lists.<Result<TimeseriesResultValue>>newArrayList()));
  TimewarpOperator<Result<TimeBoundaryResultValue>> timeBoundaryOperator=new TimewarpOperator<>(new Interval(new DateTime("2014-01-01"),new DateTime("2014-01-15")),new Period("P1W"),new DateTime("2014-01-06"));
  QueryRunner<Result<TimeBoundaryResultValue>> timeBoundaryRunner=timeBoundaryOperator.postProcess(new QueryRunner<Result<TimeBoundaryResultValue>>(){
    @Override public Sequence<Result<TimeBoundaryResultValue>> run(    Query<Result<TimeBoundaryResultValue>> query,    Map<String,Object> responseContext){
      return Sequences.simple(ImmutableList.of(new Result<>(new DateTime("2014-01-12"),new TimeBoundaryResultValue(ImmutableMap.<String,Object>of("maxTime",new DateTime("2014-01-12"))))));
    }
  }
,new DateTime("2014-08-02").getMillis());
  final Query<Result<TimeBoundaryResultValue>> timeBoundaryQuery=Druids.newTimeBoundaryQueryBuilder().dataSource("dummy").build();
  Assert.assertEquals(Lists.newArrayList(new Result<>(new DateTime("2014-08-02"),new TimeBoundaryResultValue(ImmutableMap.<String,Object>of("maxTime",new DateTime("2014-08-02"))))),Sequences.toList(timeBoundaryRunner.run(timeBoundaryQuery,CONTEXT),Lists.<Result<TimeBoundaryResultValue>>newArrayList()));
}

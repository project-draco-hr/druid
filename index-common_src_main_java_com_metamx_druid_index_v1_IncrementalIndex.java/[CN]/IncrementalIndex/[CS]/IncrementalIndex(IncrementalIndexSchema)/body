{
  this.minTimestamp=incrementalIndexSchema.getMinTimestamp();
  this.gran=incrementalIndexSchema.getGran();
  this.metrics=incrementalIndexSchema.getMetrics();
  final ImmutableList.Builder<String> metricNamesBuilder=ImmutableList.builder();
  final ImmutableMap.Builder<String,Integer> metricIndexesBuilder=ImmutableMap.builder();
  final ImmutableMap.Builder<String,String> metricTypesBuilder=ImmutableMap.builder();
  for (int i=0; i < metrics.length; i++) {
    final String metricName=metrics[i].getName().toLowerCase();
    metricNamesBuilder.add(metricName);
    metricIndexesBuilder.put(metricName,i);
    metricTypesBuilder.put(metricName,metrics[i].getTypeName());
  }
  metricNames=metricNamesBuilder.build();
  metricIndexes=metricIndexesBuilder.build();
  metricTypes=metricTypesBuilder.build();
  this.dimensionOrder=Maps.newLinkedHashMap();
  this.dimensions=new CopyOnWriteArrayList<String>();
  int index=0;
  for (  String dim : incrementalIndexSchema.getDimensions()) {
    dimensionOrder.put(dim,index++);
    dimensions.add(dim);
  }
  this.spatialDimensionRowFormatter=new SpatialDimensionRowFormatter(incrementalIndexSchema.getSpatialDimensions());
  this.dimValues=new DimensionHolder();
  this.facts=new ConcurrentSkipListMap<TimeAndDims,Aggregator[]>();
}

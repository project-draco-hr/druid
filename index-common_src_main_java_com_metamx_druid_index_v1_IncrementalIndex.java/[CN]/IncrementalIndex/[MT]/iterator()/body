{
  return Iterators.transform(facts.entrySet().iterator(),new Function<Map.Entry<TimeAndDims,Aggregator[]>,Row>(){
    @Override public Row apply(    final Map.Entry<TimeAndDims,Aggregator[]> input){
      final TimeAndDims timeAndDims=input.getKey();
      final Aggregator[] aggregators=input.getValue();
      String[][] theDims=timeAndDims.getDims();
      Map<String,Object> theVals=Maps.newLinkedHashMap();
      for (int i=0; i < theDims.length; ++i) {
        String[] dim=theDims[i];
        if (dim != null && dim.length != 0) {
          theVals.put(dimensions.get(i),dim.length == 1 ? dim[0] : Arrays.asList(dim));
        }
      }
      for (int i=0; i < aggregators.length; ++i) {
        theVals.put(metrics[i].getName(),aggregators[i].get());
      }
      return new MapBasedRow(timeAndDims.getTimestamp(),theVals);
    }
  }
);
}

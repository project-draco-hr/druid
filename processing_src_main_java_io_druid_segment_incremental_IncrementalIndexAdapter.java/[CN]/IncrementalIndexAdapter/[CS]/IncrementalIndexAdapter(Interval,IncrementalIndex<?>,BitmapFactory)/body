{
  this.dataInterval=dataInterval;
  this.index=index;
  this.hasNullValueDimensions=Sets.newHashSet();
  final List<IncrementalIndex.DimensionDesc> dimensions=index.getDimensions();
  indexers=Maps.newHashMapWithExpectedSize(dimensions.size());
  for (  IncrementalIndex.DimensionDesc dimension : dimensions) {
    indexers.put(dimension.getName(),new DimensionIndexer(dimension));
  }
  int rowNum=0;
  for (  IncrementalIndex.TimeAndDims timeAndDims : index.getFacts().keySet()) {
    final int[][] dims=timeAndDims.getDims();
    for (    IncrementalIndex.DimensionDesc dimension : dimensions) {
      final int dimIndex=dimension.getIndex();
      DimensionIndexer indexer=indexers.get(dimension.getName());
      if (dimIndex >= dims.length || dims[dimIndex] == null) {
        hasNullValueDimensions.add(dimension.getName());
        continue;
      }
      final IncrementalIndex.DimDim values=dimension.getValues();
      if (hasNullValue(values,dims[dimIndex])) {
        hasNullValueDimensions.add(dimension.getName());
      }
      final MutableBitmap[] bitmapIndexes=indexer.invertedIndexes;
      for (      Comparable dimIdxComparable : dims[dimIndex]) {
        Integer dimIdx=(Integer)dimIdxComparable;
        if (bitmapIndexes[dimIdx] == null) {
          bitmapIndexes[dimIdx]=bitmapFactory.makeEmptyMutableBitmap();
        }
        try {
          bitmapIndexes[dimIdx].add(rowNum);
        }
 catch (        Exception e) {
          log.info(e.toString());
        }
      }
    }
    ++rowNum;
  }
}

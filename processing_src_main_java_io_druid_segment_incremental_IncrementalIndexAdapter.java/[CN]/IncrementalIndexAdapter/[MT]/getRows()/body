{
  return FunctionalIterable.create(index.getFacts().entrySet()).transform(new Function<Map.Entry<IncrementalIndex.TimeAndDims,Aggregator[]>,Rowboat>(){
    int count=0;
    @Override public Rowboat apply(    @Nullable Map.Entry<IncrementalIndex.TimeAndDims,Aggregator[]> input){
      final IncrementalIndex.TimeAndDims timeAndDims=input.getKey();
      final String[][] dimValues=timeAndDims.getDims();
      final Aggregator[] aggs=input.getValue();
      int[][] dims=new int[dimValues.length][];
      for (      String dimension : index.getDimensions()) {
        int dimIndex=index.getDimensionIndex(dimension);
        final IncrementalIndex.DimDim dimDim=index.getDimension(dimension);
        dimDim.sort();
        if (dimIndex >= dimValues.length || dimValues[dimIndex] == null) {
          continue;
        }
        dims[dimIndex]=new int[dimValues[dimIndex].length];
        if (dimIndex >= dims.length || dims[dimIndex] == null) {
          continue;
        }
        for (int i=0; i < dimValues[dimIndex].length; ++i) {
          dims[dimIndex][i]=dimDim.getSortedId(dimValues[dimIndex][i]);
        }
      }
      Object[] metrics=new Object[aggs.length];
      for (int i=0; i < aggs.length; i++) {
        metrics[i]=aggs[i].get();
      }
      Map<String,String> description=Maps.newHashMap();
      for (      SpatialDimensionSchema spatialDimensionSchema : index.getSpatialDimensions()) {
        description.put(spatialDimensionSchema.getDimName(),"spatial");
      }
      return new Rowboat(timeAndDims.getTimestamp(),dims,metrics,count++,description);
    }
  }
);
}

{
  final List<String> remoteUriList=Lists.newArrayList();
  if (!noDefaultRemoteRepositories) {
    remoteUriList.addAll(DEFAULT_REMOTE_REPOSITORIES);
  }
  remoteUriList.addAll(remoteRepositories);
  List<Repository> remoteRepositories=Lists.newArrayList();
  for (  String uri : remoteUriList) {
    try {
      URI u=new URI(uri);
      Repository r=new Repository(uri);
      if (u.getUserInfo() != null) {
        String[] auth=u.getUserInfo().split(":",2);
        if (auth.length == 2) {
          r.setUsername(auth[0]);
          r.setPassword(auth[1]);
        }
 else {
          log.warn("Invalid credentials in repository URI, expecting [<user>:<password>], got [%s] for [%s]",u.getUserInfo(),uri);
        }
      }
      remoteRepositories.add(r);
    }
 catch (    URISyntaxException e) {
      throw Throwables.propagate(e);
    }
  }
  if (log.isTraceEnabled() || log.isDebugEnabled()) {
    return new DefaultTeslaAether(localRepository,remoteRepositories.toArray(new Repository[remoteRepositories.size()]));
  }
  PrintStream oldOut=System.out;
  try {
    System.setOut(new PrintStream(new OutputStream(){
      @Override public void write(      int b) throws IOException {
      }
      @Override public void write(      byte[] b) throws IOException {
      }
      @Override public void write(      byte[] b,      int off,      int len) throws IOException {
      }
    }
,false,StringUtils.UTF8_STRING));
    return new DefaultTeslaAether(localRepository,remoteRepositories.toArray(new Repository[remoteRepositories.size()]));
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
 finally {
    System.setOut(oldOut);
  }
}

{
  final SegmentHolder currentlyLoadingRef=currentlyLoading;
  final AtomicBoolean postedEphemeral=new AtomicBoolean(false);
  zkWritingExecutor.execute(new Runnable(){
    @Override public void run(){
synchronized (lock) {
        try {
          if (currentlyLoading == null) {
            log.error("Crazy race condition! server[%s]",basePath);
            postedEphemeral.set(true);
            actionCompleted();
            doNext();
            return;
          }
          log.info("Server[%s] adding segment[%s]",basePath,currentlyLoading.getSegmentIdentifier());
          yp.postEphemeral(basePath,currentlyLoading.getSegmentIdentifier(),currentlyLoading.getChangeRequest());
          postedEphemeral.set(true);
        }
 catch (        Throwable e) {
          log.error(e,"Server[%s], throwable caught when submitting [%s].",basePath,currentlyLoading);
          postedEphemeral.set(true);
          actionCompleted();
          doNext();
        }
      }
    }
  }
);
  zkWritingExecutor.schedule(new Runnable(){
    @Override public void run(){
synchronized (lock) {
        String path=yp.combineParts(Arrays.asList(basePath,currentlyLoadingRef.getSegmentIdentifier()));
        if (!postedEphemeral.get()) {
          log.info("Ephemeral hasn't been posted yet for [%s], rescheduling.",path);
          zkWritingExecutor.schedule(this,60,TimeUnit.SECONDS);
        }
        if (currentlyLoadingRef == currentlyLoading) {
          if (yp.lookup(path,Object.class) == null) {
            log.info("Looks like [%s] was created and deleted without the watchers finding out.",path);
            entryRemoved(currentlyLoadingRef.getSegmentIdentifier());
          }
 else {
            log.info("Path[%s] still out on ZK, rescheduling.",path);
            zkWritingExecutor.schedule(this,60,TimeUnit.SECONDS);
          }
        }
      }
    }
  }
,60,TimeUnit.SECONDS);
}

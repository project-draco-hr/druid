{
  final List<Pair<FireHydrant,Interval>> indexesToPersist=Lists.newArrayList();
  for (  Sink sink : sinks.values()) {
    if (sink.swappable()) {
      indexesToPersist.add(Pair.of(sink.swap(),sink.getInterval()));
    }
  }
  log.info("Submitting persist runnable for dataSource[%s]",schema.getDataSource());
  final Stopwatch runExecStopwatch=Stopwatch.createStarted();
  final Stopwatch persistStopwatch=Stopwatch.createStarted();
  final Map<String,Object> metadata=committer.getMetadata() == null ? null : ImmutableMap.of(COMMIT_METADATA_KEY,committer.getMetadata(),COMMIT_METADATA_TIMESTAMP_KEY,System.currentTimeMillis());
  persistExecutor.execute(new ThreadRenamingRunnable(String.format("%s-incremental-persist",schema.getDataSource())){
    @Override public void doRun(){
      try {
        for (        Pair<FireHydrant,Interval> pair : indexesToPersist) {
          metrics.incrementRowOutputCount(persistHydrant(pair.lhs,schema,pair.rhs,metadata));
        }
        committer.run();
      }
 catch (      Exception e) {
        metrics.incrementFailedPersists();
        throw e;
      }
 finally {
        metrics.incrementNumPersists();
        metrics.incrementPersistTimeMillis(persistStopwatch.elapsed(TimeUnit.MILLISECONDS));
        persistStopwatch.stop();
      }
    }
  }
);
  final long startDelay=runExecStopwatch.elapsed(TimeUnit.MILLISECONDS);
  metrics.incrementPersistBackPressureMillis(startDelay);
  if (startDelay > WARN_DELAY) {
    log.warn("Ingestion was throttled for [%,d] millis because persists were pending.",startDelay);
  }
  runExecStopwatch.stop();
  resetNextFlush();
}

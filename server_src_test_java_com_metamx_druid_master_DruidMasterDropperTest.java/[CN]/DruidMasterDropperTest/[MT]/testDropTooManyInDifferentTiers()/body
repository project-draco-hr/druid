{
  mockPeon.dropSegment(EasyMock.<DataSegment>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  EasyMock.replay(mockPeon);
  DruidServer server1=new DruidServer("server1","host1",1000,"historical","hot");
  server1.addDataSegment(availableSegments.get(0).getIdentifier(),availableSegments.get(0));
  DruidServer server2=new DruidServer("serverNorm2","hostNorm2",1000,"historical","normal");
  server2.addDataSegment(availableSegments.get(0).getIdentifier(),availableSegments.get(0));
  DruidCluster druidCluster=new DruidCluster(ImmutableMap.of("hot",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(server1,mockPeon))),"normal",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(server2,mockPeon)))));
  RuleMap ruleMap=new RuleMap(ImmutableMap.<String,List<Rule>>of("test",Lists.<Rule>newArrayList(new IntervalLoadRule(new Interval("2012-01-01T00:00:00.000Z/2012-01-01T12:00:00.000Z"),1,"hot"))),Lists.<Rule>newArrayList(new IntervalDropRule(new Interval("2012-01-01T00:00:00.000Z/2012-01-02T00:00:00.000Z"))));
  SegmentRuleLookup segmentRuleLookup=SegmentRuleLookup.make(availableSegments,ruleMap);
  Table<String,String,Integer> segmentsInCluster=HashBasedTable.create();
  for (  DataSegment segment : availableSegments) {
    segmentsInCluster.put(segment.getIdentifier(),"normal",1);
  }
  segmentsInCluster.put(availableSegments.get(0).getIdentifier(),"hot",1);
  SegmentReplicantLookup segmentReplicantLookup=new SegmentReplicantLookup(segmentsInCluster);
  DruidMasterRuntimeParams params=new DruidMasterRuntimeParams.Builder().withDruidCluster(druidCluster).withMillisToWaitBeforeDeleting(0L).withAvailableSegments(availableSegments).withSegmentRuleLookup(segmentRuleLookup).withSegmentReplicantLookup(segmentReplicantLookup).build();
  DruidMasterRuntimeParams afterParams=dropper.run(params);
  Assert.assertTrue(afterParams.getDroppedCount().get("normal").get() == 1);
  Assert.assertTrue(afterParams.getDeletedCount() == 12);
  EasyMock.verify(mockPeon);
}

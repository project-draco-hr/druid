{
  Map<String,Object> map=new HashMap<String,Object>(value.size());
  for (  Map.Entry<Writable,Writable> e : value.entrySet()) {
    if (!(e.getKey() instanceof Text)) {
      throw new RuntimeException("Found non-Text key in input record. type: " + e.getKey().getClass().getName());
    }
    if (e.getValue() instanceof IntWritable) {
      map.put(e.getKey().toString(),((IntWritable)e.getValue()).get());
    }
 else     if (e.getValue() instanceof LongWritable) {
      map.put(e.getKey().toString(),((LongWritable)e.getValue()).get());
    }
 else     if (e.getValue() instanceof FloatWritable) {
      map.put(e.getKey().toString(),((FloatWritable)e.getValue()).get());
    }
 else     if (e.getValue() instanceof DoubleWritable) {
      map.put(e.getKey().toString(),((DoubleWritable)e.getValue()).get());
    }
 else     if (e.getValue() instanceof Text) {
      map.put(e.getKey().toString(),e.getValue().toString());
    }
 else     if (e.getValue() instanceof BytesWritable) {
      map.put(e.getKey().toString(),((BytesWritable)e.getValue()).getBytes());
    }
 else     if (e.getValue() instanceof ArrayWritable) {
      map.put(e.getKey().toString(),Lists.transform(Arrays.asList(((ArrayWritable)e.getValue()).get()),new Function<Writable,String>(){
        @Override public String apply(        Writable input){
          return ((Text)input).toString();
        }
      }
));
    }
 else {
      throw new RuntimeException("Unrecognized value type in input record. type: " + e.getValue().getClass().getName());
    }
  }
  return map;
}

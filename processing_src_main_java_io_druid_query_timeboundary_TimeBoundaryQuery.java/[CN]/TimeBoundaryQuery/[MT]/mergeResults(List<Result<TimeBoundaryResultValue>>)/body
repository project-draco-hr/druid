{
  if (results == null || results.isEmpty()) {
    return Lists.newArrayList();
  }
  DateTime min=new DateTime(Long.MAX_VALUE);
  DateTime max=new DateTime(Long.MIN_VALUE);
  for (  Result<TimeBoundaryResultValue> result : results) {
    TimeBoundaryResultValue val=result.getValue();
    if (!exclude.equalsIgnoreCase(MIN_TIME)) {
      DateTime currMinTime=val.getMinTime();
      if (currMinTime.isBefore(min)) {
        min=currMinTime;
      }
    }
    if (!exclude.equalsIgnoreCase(MAX_TIME)) {
      DateTime currMaxTime=val.getMaxTime();
      if (currMaxTime.isAfter(max)) {
        max=currMaxTime;
      }
    }
  }
  final ImmutableMap.Builder<String,Object> builder=new ImmutableMap.Builder<>();
  final DateTime ts;
  if (exclude.equalsIgnoreCase(MIN_TIME)) {
    ts=max;
    builder.put(MAX_TIME,max);
  }
 else   if (exclude.equalsIgnoreCase(MAX_TIME)) {
    ts=min;
    builder.put(MIN_TIME,min);
  }
 else {
    ts=min;
    builder.put(MAX_TIME,max);
    builder.put(MIN_TIME,min);
  }
  return Arrays.asList(new Result<>(ts,new TimeBoundaryResultValue(builder.build())));
}

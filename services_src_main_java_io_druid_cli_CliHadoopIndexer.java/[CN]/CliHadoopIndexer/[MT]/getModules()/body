{
  return ImmutableList.<Object>of(new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(HadoopDruidIndexerJob.class).in(LazySingleton.class);
    }
    @Provides @LazySingleton public HadoopDruidIndexerConfig getHadoopDruidIndexerConfig(){
      Preconditions.checkNotNull(argumentSpec,"argumentSpec");
      try {
        if (argumentSpec.startsWith("{")) {
          return HadoopDruidIndexerConfig.fromString(argumentSpec);
        }
 else         if (argumentSpec.startsWith("s3://")) {
          final Path s3nPath=new Path(String.format("s3n://%s",argumentSpec.substring("s3://".length())));
          final FileSystem fs=s3nPath.getFileSystem(new Configuration());
          String configString=CharStreams.toString(new InputSupplier<InputStreamReader>(){
            @Override public InputStreamReader getInput() throws IOException {
              return new InputStreamReader(fs.open(s3nPath));
            }
          }
);
          return HadoopDruidIndexerConfig.fromString(configString);
        }
 else {
          return HadoopDruidIndexerConfig.fromFile(new File(argumentSpec));
        }
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
    }
  }
);
}

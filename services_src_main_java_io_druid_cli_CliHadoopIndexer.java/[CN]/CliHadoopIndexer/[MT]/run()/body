{
  try {
    final DefaultTeslaAether aetherClient=Initialization.getAetherClient(extensionsConfig);
    final ClassLoader hadoopLoader=Initialization.getClassLoaderForCoordinates(aetherClient,hadoopCoordinates);
    final List<URL> extensionURLs=Lists.newArrayList();
    for (    String coordinate : extensionsConfig.getCoordinates()) {
      final ClassLoader coordinateLoader=Initialization.getClassLoaderForCoordinates(aetherClient,coordinate);
      extensionURLs.addAll(Arrays.asList(((URLClassLoader)coordinateLoader).getURLs()));
    }
    final List<URL> nonHadoopURLs=Lists.newArrayList();
    nonHadoopURLs.addAll(Arrays.asList(((URLClassLoader)CliHadoopIndexer.class.getClassLoader()).getURLs()));
    final List<URL> driverURLs=Lists.newArrayList();
    driverURLs.addAll(nonHadoopURLs);
    driverURLs.addAll(Arrays.asList(((URLClassLoader)hadoopLoader).getURLs()));
    final URLClassLoader loader=new URLClassLoader(driverURLs.toArray(new URL[driverURLs.size()]),null);
    Thread.currentThread().setContextClassLoader(loader);
    final List<URL> jobUrls=Lists.newArrayList();
    jobUrls.addAll(nonHadoopURLs);
    jobUrls.addAll(extensionURLs);
    System.setProperty("druid.hadoop.internal.classpath",Joiner.on(File.pathSeparator).join(jobUrls));
    final Class<?> mainClass=loader.loadClass(Main.class.getName());
    final Method mainMethod=mainClass.getMethod("main",String[].class);
    String[] args=new String[]{"internal","hadoop-indexer",argumentSpec};
    mainMethod.invoke(null,new Object[]{args});
  }
 catch (  Exception e) {
    log.error(e,"failure!!!!");
    System.exit(1);
  }
}

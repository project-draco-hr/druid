{
  if (!(input instanceof SearchQuery)) {
    throw new ISE("Got a [%s] which isn't a %s",input.getClass(),SearchQuery.class);
  }
  final SearchQuery query=(SearchQuery)input;
  final Filter filter=Filters.convertDimensionFilters(query.getDimensionsFilter());
  final List<String> dimensions=query.getDimensions();
  final SearchQuerySpec searchQuerySpec=query.getQuery();
  final int limit=query.getLimit();
  final QueryableIndex index=segment.asQueryableIndex();
  if (index != null) {
    final TreeSet<SearchHit> retVal=Sets.newTreeSet(query.getSort().getComparator());
    Iterable<String> dimsToSearch;
    if (dimensions == null || dimensions.isEmpty()) {
      dimsToSearch=index.getAvailableDimensions();
    }
 else {
      dimsToSearch=dimensions;
    }
    final ImmutableConciseSet baseFilter;
    if (filter == null) {
      baseFilter=ImmutableConciseSet.complement(new ImmutableConciseSet(),index.getNumRows());
    }
 else {
      baseFilter=filter.goConcise(new ColumnSelectorBitmapIndexSelector(index));
    }
    for (    String dimension : dimsToSearch) {
      final Column column=index.getColumn(dimension.toLowerCase());
      if (column == null) {
        continue;
      }
      final BitmapIndex bitmapIndex=column.getBitmapIndex();
      if (bitmapIndex != null) {
        for (int i=0; i < bitmapIndex.getCardinality(); ++i) {
          String dimVal=Strings.nullToEmpty(bitmapIndex.getValue(i));
          if (searchQuerySpec.accept(dimVal) && ImmutableConciseSet.intersection(baseFilter,bitmapIndex.getConciseSet(i)).size() > 0) {
            retVal.add(new SearchHit(dimension,dimVal));
            if (retVal.size() >= limit) {
              return makeReturnResult(limit,retVal);
            }
          }
        }
      }
    }
    return makeReturnResult(limit,retVal);
  }
  final StorageAdapter adapter=segment.asStorageAdapter();
  if (adapter != null) {
    Iterable<String> dimsToSearch;
    if (dimensions == null || dimensions.isEmpty()) {
      dimsToSearch=adapter.getAvailableDimensions();
    }
 else {
      dimsToSearch=dimensions;
    }
    final TreeSet<SearchHit> retVal=Sets.newTreeSet(query.getSort().getComparator());
    final Iterable<Cursor> cursors=adapter.makeCursors(filter,segment.getDataInterval(),QueryGranularity.ALL);
    for (    Cursor cursor : cursors) {
      Map<String,DimensionSelector> dimSelectors=Maps.newHashMap();
      for (      String dim : dimsToSearch) {
        dimSelectors.put(dim,cursor.makeDimensionSelector(dim));
      }
      while (!cursor.isDone()) {
        for (        Map.Entry<String,DimensionSelector> entry : dimSelectors.entrySet()) {
          final DimensionSelector selector=entry.getValue();
          final IndexedInts vals=selector.getRow();
          for (int i=0; i < vals.size(); ++i) {
            final String dimVal=selector.lookupName(vals.get(i));
            if (searchQuerySpec.accept(dimVal)) {
              retVal.add(new SearchHit(entry.getKey(),dimVal));
              if (retVal.size() >= limit) {
                return makeReturnResult(limit,retVal);
              }
            }
          }
        }
        cursor.advance();
      }
    }
    return makeReturnResult(limit,retVal);
  }
  log.makeAlert("WTF!? Unable to process search query on segment.").addData("segment",segment.getIdentifier()).addData("query",query);
  return Sequences.empty();
}

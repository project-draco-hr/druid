{
  final Map<String,List<String>> spatialLookup=Maps.newHashMap();
  final List<String> finalDims=Lists.newArrayList(Iterables.filter(Lists.transform(row.getDimensions(),new Function<String,String>(){
    @Override public String apply(    String input){
      return input.toLowerCase();
    }
  }
),new Predicate<String>(){
    @Override public boolean apply(    String input){
      return !spatialDimNames.contains(input);
    }
  }
));
  InputRow retVal=new InputRow(){
    @Override public List<String> getDimensions(){
      return finalDims;
    }
    @Override public long getTimestampFromEpoch(){
      return row.getTimestampFromEpoch();
    }
    @Override public List<String> getDimension(    String dimension){
      List<String> retVal=spatialLookup.get(dimension);
      return (retVal == null) ? row.getDimension(dimension) : retVal;
    }
    @Override public float getFloatMetric(    String metric){
      return row.getFloatMetric(metric);
    }
  }
;
  for (  SpatialDimensionSchema spatialDimension : spatialDimensions) {
    if (!row.getDimension(spatialDimension.getDimName()).isEmpty()) {
      continue;
    }
    List<String> spatialDimVals=Lists.newArrayList();
    for (    String partialSpatialDim : spatialDimension.getDims()) {
      List<String> dimVals=row.getDimension(partialSpatialDim);
      if (isSpatialDimValsValid(dimVals)) {
        spatialDimVals.addAll(dimVals);
      }
    }
    if (spatialDimVals.size() == spatialDimNames.size()) {
      spatialLookup.put(spatialDimension.getDimName(),Arrays.asList(JOINER.join(spatialDimVals)));
      finalDims.add(spatialDimension.getDimName());
    }
  }
  return retVal;
}

{
  EasyMock.reset(autoScaler);
  EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);
  EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(2);
  EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.<List<String>>anyObject())).andReturn(Lists.newArrayList("ip"));
  EasyMock.replay(autoScaler);
  RemoteTaskRunner runner=EasyMock.createMock(RemoteTaskRunner.class);
  EasyMock.expect(runner.getPendingTasks()).andReturn(Collections.singletonList(new RemoteTaskRunnerWorkItem(testTask.getId(),null).withQueueInsertionTime(new DateTime()))).times(2);
  EasyMock.expect(runner.getWorkers()).andReturn(Arrays.asList(new TestZkWorker(NoopTask.create()).getWorker(),new TestZkWorker(NoopTask.create()).getWorker())).times(2);
  EasyMock.expect(runner.getLazyWorkers()).andReturn(Lists.<Worker>newArrayList());
  EasyMock.expect(runner.markWorkersLazy(EasyMock.<Predicate<Worker>>anyObject(),EasyMock.anyInt())).andReturn(Collections.<Worker>emptyList());
  EasyMock.replay(runner);
  boolean terminatedSomething=simpleResourceManagementStrategy.doTerminate(runner);
  Assert.assertFalse(terminatedSomething);
  EasyMock.verify(autoScaler);
  EasyMock.reset(autoScaler);
  EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);
  EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(2);
  EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.<List<String>>anyObject())).andReturn(Lists.newArrayList("ip"));
  EasyMock.replay(autoScaler);
  boolean provisionedSomething=simpleResourceManagementStrategy.doProvision(runner);
  Assert.assertFalse(provisionedSomething);
  EasyMock.verify(autoScaler);
  EasyMock.verify(runner);
}

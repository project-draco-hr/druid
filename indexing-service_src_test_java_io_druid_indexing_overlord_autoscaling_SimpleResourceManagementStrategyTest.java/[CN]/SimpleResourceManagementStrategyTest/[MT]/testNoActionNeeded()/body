{
  EasyMock.reset(autoScaler);
  EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);
  EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(2);
  EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.<List<String>>anyObject())).andReturn(Lists.<String>newArrayList("ip"));
  EasyMock.replay(autoScaler);
  boolean terminatedSomething=simpleResourceManagementStrategy.doTerminate(Arrays.<RemoteTaskRunnerWorkItem>asList(new RemoteTaskRunnerWorkItem(testTask.getId(),null).withQueueInsertionTime(new DateTime())),Arrays.<ZkWorker>asList(new TestZkWorker(NoopTask.create()),new TestZkWorker(NoopTask.create())));
  Assert.assertFalse(terminatedSomething);
  EasyMock.verify(autoScaler);
  EasyMock.reset(autoScaler);
  EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);
  EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(2);
  EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.<List<String>>anyObject())).andReturn(Lists.<String>newArrayList("ip"));
  EasyMock.replay(autoScaler);
  boolean provisionedSomething=simpleResourceManagementStrategy.doProvision(Arrays.<RemoteTaskRunnerWorkItem>asList(new RemoteTaskRunnerWorkItem(testTask.getId(),null).withQueueInsertionTime(new DateTime())),Arrays.<ZkWorker>asList(new TestZkWorker(NoopTask.create()),new TestZkWorker(NoopTask.create())));
  Assert.assertFalse(provisionedSomething);
  EasyMock.verify(autoScaler);
}

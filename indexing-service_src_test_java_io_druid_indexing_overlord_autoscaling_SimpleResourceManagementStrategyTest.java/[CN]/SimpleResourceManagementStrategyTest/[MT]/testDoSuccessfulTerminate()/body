{
  EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0);
  EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(1);
  EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.<List<String>>anyObject())).andReturn(Lists.<String>newArrayList());
  EasyMock.expect(autoScaler.terminate(EasyMock.<List<String>>anyObject())).andReturn(new AutoScalingData(Lists.<String>newArrayList()));
  EasyMock.replay(autoScaler);
  RemoteTaskRunner runner=EasyMock.createMock(RemoteTaskRunner.class);
  EasyMock.expect(runner.getPendingTasks()).andReturn(Collections.singletonList(new RemoteTaskRunnerWorkItem(testTask.getId(),null).withQueueInsertionTime(new DateTime()))).times(2);
  EasyMock.expect(runner.getWorkers()).andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker())).times(2);
  EasyMock.expect(runner.markWorkersLazy(EasyMock.<Predicate<Worker>>anyObject(),EasyMock.anyInt())).andReturn(Collections.<Worker>singletonList(new TestZkWorker(testTask).getWorker()));
  EasyMock.expect(runner.getLazyWorkers()).andReturn(Lists.<Worker>newArrayList());
  EasyMock.replay(runner);
  boolean terminatedSomething=simpleResourceManagementStrategy.doTerminate(runner);
  Assert.assertTrue(terminatedSomething);
  Assert.assertTrue(simpleResourceManagementStrategy.getStats().toList().size() == 1);
  Assert.assertTrue(simpleResourceManagementStrategy.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.TERMINATE);
  EasyMock.verify(autoScaler);
}

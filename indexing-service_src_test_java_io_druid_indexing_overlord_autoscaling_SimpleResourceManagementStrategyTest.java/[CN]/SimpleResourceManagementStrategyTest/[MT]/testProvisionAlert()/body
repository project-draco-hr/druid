{
  ServiceEmitter emitter=EasyMock.createMock(ServiceEmitter.class);
  EmittingLogger.registerEmitter(emitter);
  emitter.emit(EasyMock.<ServiceEventBuilder>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  EasyMock.replay(emitter);
  EasyMock.expect(autoScaler.getMinNumWorkers()).andReturn(0).times(2);
  EasyMock.expect(autoScaler.getMaxNumWorkers()).andReturn(2).times(2);
  EasyMock.expect(autoScaler.ipToIdLookup(EasyMock.<List<String>>anyObject())).andReturn(Lists.<String>newArrayList()).times(2);
  EasyMock.expect(autoScaler.terminateWithIds(EasyMock.<List<String>>anyObject())).andReturn(null);
  EasyMock.expect(autoScaler.provision()).andReturn(new AutoScalingData(Lists.newArrayList("fake")));
  EasyMock.replay(autoScaler);
  RemoteTaskRunner runner=EasyMock.createMock(RemoteTaskRunner.class);
  EasyMock.expect(runner.getPendingTasks()).andReturn(Collections.singletonList(new RemoteTaskRunnerWorkItem(testTask.getId(),null,null).withQueueInsertionTime(new DateTime()))).times(2);
  EasyMock.expect(runner.getWorkers()).andReturn(Collections.singletonList(new TestZkWorker(testTask).getWorker())).times(2);
  EasyMock.replay(runner);
  boolean provisionedSomething=simpleResourceManagementStrategy.doProvision(runner);
  Assert.assertTrue(provisionedSomething);
  Assert.assertTrue(simpleResourceManagementStrategy.getStats().toList().size() == 1);
  DateTime createdTime=simpleResourceManagementStrategy.getStats().toList().get(0).getTimestamp();
  Assert.assertTrue(simpleResourceManagementStrategy.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.PROVISION);
  Thread.sleep(2000);
  provisionedSomething=simpleResourceManagementStrategy.doProvision(runner);
  Assert.assertFalse(provisionedSomething);
  Assert.assertTrue(simpleResourceManagementStrategy.getStats().toList().get(0).getEvent() == ScalingStats.EVENT.PROVISION);
  DateTime anotherCreatedTime=simpleResourceManagementStrategy.getStats().toList().get(0).getTimestamp();
  Assert.assertTrue(createdTime.equals(anotherCreatedTime));
  EasyMock.verify(autoScaler);
  EasyMock.verify(emitter);
  EasyMock.verify(runner);
}

{
  String badId="bad";
  URIExtractionNamespace badNamespace=new URIExtractionNamespace(null,Paths.get(namespace.getUri()).getParent().toUri(),Pattern.quote(Paths.get(namespace.getUri()).getFileName().toString()),namespace.getNamespaceParseSpec(),Period.millis((int)namespace.getPollMs()),null);
  Assert.assertTrue(new File(namespace.getUri()).delete());
  ConcurrentMap<String,String> map=new ConcurrentHashMap<>();
  expectedException.expect(new BaseMatcher<Throwable>(){
    @Override public void describeTo(    Description description){
    }
    @Override public boolean matches(    Object o){
      if (!(o instanceof Throwable)) {
        return false;
      }
      final Throwable t=(Throwable)o;
      return t.getCause() != null && t.getCause() instanceof FileNotFoundException;
    }
  }
);
  factory.getCachePopulator(badId,badNamespace,null,map).call();
}

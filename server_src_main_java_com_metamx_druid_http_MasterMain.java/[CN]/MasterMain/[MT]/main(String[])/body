{
  LogLevelAdjuster.register();
  final ObjectMapper jsonMapper=new DefaultObjectMapper();
  final Properties props=Initialization.loadProperties();
  final ConfigurationObjectFactory configFactory=Config.createFactory(props);
  final Lifecycle lifecycle=new Lifecycle();
  final HttpClientConfig.Builder httpClientConfigBuilder=HttpClientConfig.builder().withNumConnections(1);
  final String emitterTimeout=props.getProperty("druid.emitter.timeOut");
  if (emitterTimeout != null) {
    httpClientConfigBuilder.withReadTimeout(new Duration(emitterTimeout));
  }
  final HttpClient httpClient=HttpClientInit.createClient(httpClientConfigBuilder.build(),lifecycle);
  final ServiceEmitter emitter=new ServiceEmitter(PropUtils.getProperty(props,"druid.service"),PropUtils.getProperty(props,"druid.host"),Emitters.create(props,httpClient,jsonMapper,lifecycle));
  EmittingLogger.registerEmitter(emitter);
  final ScheduledExecutorFactory scheduledExecutorFactory=ScheduledExecutors.createFactory(lifecycle);
  final ServiceDiscoveryConfig serviceDiscoveryConfig=configFactory.build(ServiceDiscoveryConfig.class);
  CuratorFramework curatorFramework=Initialization.makeCuratorFramework(serviceDiscoveryConfig,lifecycle);
  final ZkPathsConfig zkPaths=configFactory.build(ZkPathsConfig.class);
  final ExecutorService exec=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat("ServerInventoryThingie-%s").build());
  ServerInventoryThingie serverInventoryThingie=new ServerInventoryThingie(configFactory.build(ServerInventoryThingieConfig.class),zkPaths,curatorFramework,exec,jsonMapper);
  lifecycle.addManagedInstance(serverInventoryThingie);
  final DbConnectorConfig dbConnectorConfig=configFactory.build(DbConnectorConfig.class);
  final DatabaseRuleManagerConfig databaseRuleManagerConfig=configFactory.build(DatabaseRuleManagerConfig.class);
  final DBI dbi=new DbConnector(dbConnectorConfig).getDBI();
  DbConnector.createSegmentTable(dbi,PropUtils.getProperty(props,"druid.database.segmentTable"));
  DbConnector.createRuleTable(dbi,PropUtils.getProperty(props,"druid.database.ruleTable"));
  DatabaseRuleManager.createDefaultRule(dbi,databaseRuleManagerConfig.getRuleTable(),databaseRuleManagerConfig.getDefaultDatasource(),jsonMapper);
  final DatabaseSegmentManager databaseSegmentManager=new DatabaseSegmentManager(jsonMapper,scheduledExecutorFactory.create(1,"DatabaseSegmentManager-Exec--%d"),configFactory.build(DatabaseSegmentManagerConfig.class),dbi);
  final DatabaseRuleManager databaseRuleManager=new DatabaseRuleManager(jsonMapper,scheduledExecutorFactory.create(1,"DatabaseRuleManager-Exec--%d"),databaseRuleManagerConfig,dbi);
  final ScheduledExecutorService globalScheduledExec=scheduledExecutorFactory.create(1,"Global--%d");
  final MonitorScheduler healthMonitor=new MonitorScheduler(configFactory.build(MonitorSchedulerConfig.class),globalScheduledExec,emitter,ImmutableList.<Monitor>of(new JvmMonitor(),new SysMonitor()));
  lifecycle.addManagedInstance(healthMonitor);
  final DruidMasterConfig druidMasterConfig=configFactory.build(DruidMasterConfig.class);
  final ServiceDiscovery serviceDiscovery=Initialization.makeServiceDiscoveryClient(curatorFramework,serviceDiscoveryConfig,lifecycle);
  IndexingServiceClient indexingServiceClient=null;
  if (druidMasterConfig.getMergerServiceName() != null) {
    ServiceProvider serviceProvider=Initialization.makeServiceProvider(druidMasterConfig.getMergerServiceName(),serviceDiscovery,lifecycle);
    indexingServiceClient=new IndexingServiceClient(httpClient,jsonMapper,serviceProvider);
  }
  final ConfigManagerConfig configManagerConfig=configFactory.build(ConfigManagerConfig.class);
  DbConnector.createConfigTable(dbi,configManagerConfig.getConfigTable());
  JacksonConfigManager configManager=new JacksonConfigManager(new ConfigManager(dbi,configManagerConfig),jsonMapper);
  final LoadQueueTaskMaster taskMaster=new LoadQueueTaskMaster(curatorFramework,jsonMapper,Execs.singleThreaded("Master-PeonExec--%d"));
  final DruidMaster master=new DruidMaster(druidMasterConfig,zkPaths,configManager,databaseSegmentManager,serverInventoryThingie,databaseRuleManager,curatorFramework,emitter,scheduledExecutorFactory,indexingServiceClient,taskMaster);
  lifecycle.addManagedInstance(master);
  try {
    lifecycle.start();
  }
 catch (  Throwable t) {
    log.error(t,"Error when starting up.  Failing.");
    System.exit(1);
  }
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      log.info("Running shutdown hook");
      lifecycle.stop();
    }
  }
));
  final Injector injector=Guice.createInjector(new MasterServletModule(serverInventoryThingie,databaseSegmentManager,databaseRuleManager,master,jsonMapper,indexingServiceClient));
  final Server server=Initialization.makeJettyServer(configFactory.build(ServerConfig.class));
  final RedirectInfo redirectInfo=new RedirectInfo(){
    @Override public boolean doLocal(){
      return master.isClusterMaster();
    }
    @Override public URL getRedirectURL(    String queryString,    String requestURI){
      try {
        final String currentMaster=master.getCurrentMaster();
        if (currentMaster == null) {
          return null;
        }
        String location=String.format("http://%s%s",currentMaster,requestURI);
        if (queryString != null) {
          location=String.format("%s?%s",location,queryString);
        }
        return new URL(location);
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
    }
  }
;
  final Context staticContext=new Context(server,"/static",Context.SESSIONS);
  staticContext.addServlet(new ServletHolder(new RedirectServlet(redirectInfo)),"/*");
  staticContext.setResourceBase(ComputeMain.class.getClassLoader().getResource("static").toExternalForm());
  final Context root=new Context(server,"/",Context.SESSIONS);
  root.addServlet(new ServletHolder(new StatusServlet()),"/status");
  root.addServlet(new ServletHolder(new DefaultServlet()),"/*");
  root.addEventListener(new GuiceServletConfig(injector));
  root.addFilter(new FilterHolder(new RedirectFilter(new ToStringResponseHandler(Charsets.UTF_8),redirectInfo)),"/*",0);
  root.addFilter(GuiceFilter.class,"/info/*",0);
  root.addFilter(GuiceFilter.class,"/master/*",0);
  server.start();
  server.join();
}

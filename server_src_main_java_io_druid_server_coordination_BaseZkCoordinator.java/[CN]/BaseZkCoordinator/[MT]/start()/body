{
synchronized (lock) {
    if (started) {
      return;
    }
    log.info("Starting zkCoordinator for server[%s]",me.getName());
    final String loadQueueLocation=ZKPaths.makePath(zkPaths.getLoadQueuePath(),me.getName());
    final String servedSegmentsLocation=ZKPaths.makePath(zkPaths.getServedSegmentsPath(),me.getName());
    final String liveSegmentsLocation=ZKPaths.makePath(zkPaths.getLiveSegmentsPath(),me.getName());
    loadQueueCache=new PathChildrenCache(curator,loadQueueLocation,true,true,Executors.newFixedThreadPool(config.getNumLoadingThreads(),new ThreadFactoryBuilder().setDaemon(true).setNameFormat("ZkCoordinator-%s").build()));
    try {
      curator.newNamespaceAwareEnsurePath(loadQueueLocation).ensure(curator.getZookeeperClient());
      curator.newNamespaceAwareEnsurePath(servedSegmentsLocation).ensure(curator.getZookeeperClient());
      curator.newNamespaceAwareEnsurePath(liveSegmentsLocation).ensure(curator.getZookeeperClient());
      loadLocalCache();
      loadQueueCache.getListenable().addListener(new PathChildrenCacheListener(){
        @Override public void childEvent(        CuratorFramework client,        PathChildrenCacheEvent event) throws Exception {
          final ChildData child=event.getData();
switch (event.getType()) {
case CHILD_ADDED:
            final String path=child.getPath();
          final DataSegmentChangeRequest request=jsonMapper.readValue(child.getData(),DataSegmentChangeRequest.class);
        log.info("New request[%s] with zNode[%s].",request.asString(),path);
      try {
        request.go(getDataSegmentChangeHandler(),new DataSegmentChangeCallback(){
          boolean hasRun=false;
          @Override public void execute(){
            try {
              if (!hasRun) {
                curator.delete().guaranteed().forPath(path);
                log.info("Completed request [%s]",request.asString());
                hasRun=true;
              }
            }
 catch (            Exception e) {
              try {
                curator.delete().guaranteed().forPath(path);
              }
 catch (              Exception e1) {
                log.error(e1,"Failed to delete zNode[%s], but ignoring exception.",path);
              }
              log.error(e,"Exception while removing zNode[%s]",path);
              throw Throwables.propagate(e);
            }
          }
        }
);
      }
 catch (      Exception e) {
        try {
          curator.delete().guaranteed().forPath(path);
        }
 catch (        Exception e1) {
          log.error(e1,"Failed to delete zNode[%s], but ignoring exception.",path);
        }
        log.makeAlert(e,"Segment load/unload: uncaught exception.").addData("node",path).addData("nodeProperties",request).emit();
      }
    break;
case CHILD_REMOVED:
  log.info("zNode[%s] was removed",event.getData().getPath());
break;
default :
log.info("Ignoring event[%s]",event);
}
}
}
);
loadQueueCache.start();
}
 catch (Exception e) {
Throwables.propagateIfPossible(e,IOException.class);
throw Throwables.propagate(e);
}
started=true;
}
}

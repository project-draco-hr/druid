{
  TimeseriesQuery query=Druids.newTimeseriesQueryBuilder().dataSource(new UnionDataSource(Lists.newArrayList(new TableDataSource("ds1"),new TableDataSource("ds2")))).granularity(QueryRunnerTestHelper.dayGran).intervals(QueryRunnerTestHelper.firstToThird).aggregators(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).build();
  QueryToolChest toolChest=new TimeseriesQueryQueryToolChest(new QueryConfig());
  QueryRunner mergingrunner=toolChest.mergeResults(new UnionQueryRunner<Result<TimeseriesResultValue>>((Iterable)Arrays.asList(new QueryRunner<Result<TimeseriesResultValue>>(){
    @Override public Sequence<Result<TimeseriesResultValue>> run(    Query<Result<TimeseriesResultValue>> query){
      return Sequences.simple(Lists.newArrayList(new Result<TimeseriesResultValue>(new DateTime("2011-04-02"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",1L,"idx",2L))),new Result<TimeseriesResultValue>(new DateTime("2011-04-03"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",3L,"idx",4L)))));
    }
  }
,new QueryRunner<Result<TimeseriesResultValue>>(){
    @Override public Sequence<Result<TimeseriesResultValue>> run(    Query<Result<TimeseriesResultValue>> query){
{
        return Sequences.simple(Lists.newArrayList(new Result<TimeseriesResultValue>(new DateTime("2011-04-01"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",5L,"idx",6L))),new Result<TimeseriesResultValue>(new DateTime("2011-04-02"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",7L,"idx",8L))),new Result<TimeseriesResultValue>(new DateTime("2011-04-04"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",9L,"idx",10L)))));
      }
    }
  }
),toolChest));
  List<Result<TimeseriesResultValue>> expectedResults=Arrays.asList(new Result<TimeseriesResultValue>(new DateTime("2011-04-01"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",5L,"idx",6L))),new Result<TimeseriesResultValue>(new DateTime("2011-04-02"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",8L,"idx",10L))),new Result<TimeseriesResultValue>(new DateTime("2011-04-03"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",3L,"idx",4L))),new Result<TimeseriesResultValue>(new DateTime("2011-04-04"),new TimeseriesResultValue(ImmutableMap.<String,Object>of("rows",9L,"idx",10L))));
  Iterable<Result<TimeseriesResultValue>> results=Sequences.toList(mergingrunner.run(query),Lists.<Result<TimeseriesResultValue>>newArrayList());
  System.out.println(results);
  TestHelper.assertExpectedResults(expectedResults,results);
}

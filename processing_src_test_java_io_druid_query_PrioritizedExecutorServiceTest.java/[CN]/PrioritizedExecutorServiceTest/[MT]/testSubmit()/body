{
  final ConcurrentLinkedQueue<Integer> order=new ConcurrentLinkedQueue<Integer>();
  exec.submit(new AbstractPrioritizedCallable<Void>(0){
    @Override public Void call() throws Exception {
      latch.await();
      return null;
    }
  }
);
  exec.submit(new AbstractPrioritizedCallable<Void>(-1){
    @Override public Void call() throws Exception {
      order.add(-1);
      finishLatch.countDown();
      return null;
    }
  }
);
  exec.submit(new AbstractPrioritizedCallable<Void>(0){
    @Override public Void call() throws Exception {
      order.add(0);
      finishLatch.countDown();
      return null;
    }
  }
);
  exec.submit(new AbstractPrioritizedCallable<Void>(2){
    @Override public Void call() throws Exception {
      order.add(2);
      finishLatch.countDown();
      return null;
    }
  }
);
  latch.countDown();
  finishLatch.await();
  Assert.assertTrue(order.size() == 3);
  List<Integer> expected=ImmutableList.of(2,0,-1);
  Assert.assertEquals(expected,ImmutableList.copyOf(order));
}

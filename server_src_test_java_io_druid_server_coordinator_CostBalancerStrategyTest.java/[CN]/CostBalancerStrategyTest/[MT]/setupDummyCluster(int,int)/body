{
  List<ServerHolder> serverHolderList=Lists.newArrayList();
  for (int i=0; i < serverCount; i++) {
    LoadQueuePeonTester fromPeon=new LoadQueuePeonTester();
    Map<String,DataSegment> segments=Maps.newHashMap();
    for (int j=0; j < maxSegments; j++) {
      DataSegment segment=getSegment(j);
      segments.put(segment.getIdentifier(),segment);
    }
    serverHolderList.add(new ServerHolder(new ImmutableDruidServer(new DruidServerMetadata("DruidServer_Name_" + i,"localhost",10000000L,"hot","hot",1),3000L,ImmutableMap.of("DUMMY",EasyMock.createMock(ImmutableDruidDataSource.class)),ImmutableMap.copyOf(segments)),fromPeon));
  }
  LoadQueuePeonTester fromPeon=new LoadQueuePeonTester();
  ImmutableDruidServer druidServer=EasyMock.createMock(ImmutableDruidServer.class);
  EasyMock.expect(druidServer.getName()).andReturn("BEST_SERVER").anyTimes();
  EasyMock.expect(druidServer.getCurrSize()).andReturn(3000L).anyTimes();
  EasyMock.expect(druidServer.getMaxSize()).andReturn(10000000L).anyTimes();
  EasyMock.expect(druidServer.getSegment(EasyMock.<String>anyObject())).andReturn(null).anyTimes();
  Map<String,DataSegment> segments=Maps.newHashMap();
  for (int j=0; j < (maxSegments - 2); j++) {
    DataSegment segment=getSegment(j);
    segments.put(segment.getIdentifier(),segment);
    EasyMock.expect(druidServer.getSegment(segment.getIdentifier())).andReturn(segment).anyTimes();
  }
  EasyMock.expect(druidServer.getSegments()).andReturn(segments).anyTimes();
  EasyMock.replay(druidServer);
  serverHolderList.add(new ServerHolder(druidServer,fromPeon));
  return serverHolderList;
}

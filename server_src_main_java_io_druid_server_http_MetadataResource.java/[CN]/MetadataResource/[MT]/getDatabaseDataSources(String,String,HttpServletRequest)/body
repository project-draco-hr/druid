{
  final Set<String> dataSourceNamesPreAuth;
  if (includeDisabled != null) {
    dataSourceNamesPreAuth=Sets.newTreeSet(metadataSegmentManager.getAllDatasourceNames());
  }
 else {
    dataSourceNamesPreAuth=Sets.newTreeSet(Iterables.transform(metadataSegmentManager.getInventory(),new Function<DruidDataSource,String>(){
      @Override public String apply(      DruidDataSource input){
        return input.getName();
      }
    }
));
  }
  final Set<String> dataSourceNamesPostAuth;
  if (authConfig.isEnabled()) {
    final Map<Pair<Resource,Action>,Access> resourceAccessMap=new HashMap<>();
    final AuthorizationInfo authorizationInfo=(AuthorizationInfo)req.getAttribute(AuthConfig.DRUID_AUTH_TOKEN);
    dataSourceNamesPostAuth=ImmutableSet.copyOf(Sets.filter(dataSourceNamesPreAuth,new Predicate<String>(){
      @Override public boolean apply(      String input){
        Resource resource=new Resource(input,ResourceType.DATASOURCE);
        Action action=Action.READ;
        Pair<Resource,Action> key=new Pair<>(resource,action);
        if (resourceAccessMap.containsKey(key)) {
          return resourceAccessMap.get(key).isAllowed();
        }
 else {
          Access access=authorizationInfo.isAuthorized(key.lhs,key.rhs);
          resourceAccessMap.put(key,access);
          return access.isAllowed();
        }
      }
    }
));
  }
 else {
    dataSourceNamesPostAuth=dataSourceNamesPreAuth;
  }
  if (full != null && includeDisabled == null) {
    return Response.ok().entity(Collections2.filter(metadataSegmentManager.getInventory(),new Predicate<DruidDataSource>(){
      @Override public boolean apply(      DruidDataSource input){
        return dataSourceNamesPostAuth.contains(input.getName());
      }
    }
)).build();
  }
 else {
    return Response.ok().entity(dataSourceNamesPostAuth).build();
  }
}

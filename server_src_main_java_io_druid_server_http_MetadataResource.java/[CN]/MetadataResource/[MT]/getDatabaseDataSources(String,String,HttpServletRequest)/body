{
  Response.ResponseBuilder builder=Response.status(Response.Status.OK);
  final Collection<DruidDataSource> druidDataSources;
  if (authConfig.isEnabled()) {
    final Map<Pair<Resource,Action>,Access> resourceAccessMap=new HashMap<>();
    final AuthorizationInfo authorizationInfo=(AuthorizationInfo)req.getAttribute(AuthConfig.DRUID_AUTH_TOKEN);
    if (includeDisabled != null) {
      return builder.entity(Collections2.filter(metadataSegmentManager.getAllDatasourceNames(),new Predicate<String>(){
        @Override public boolean apply(        String input){
          Resource resource=new Resource(input,ResourceType.DATASOURCE);
          Action action=Action.READ;
          Pair<Resource,Action> key=new Pair<>(resource,action);
          if (resourceAccessMap.containsKey(key)) {
            return resourceAccessMap.get(key).isAllowed();
          }
 else {
            Access access=authorizationInfo.isAuthorized(key.lhs,key.rhs);
            resourceAccessMap.put(key,access);
            return access.isAllowed();
          }
        }
      }
)).build();
    }
 else {
      druidDataSources=Collections2.filter(metadataSegmentManager.getInventory(),new Predicate<DruidDataSource>(){
        @Override public boolean apply(        DruidDataSource input){
          Resource resource=new Resource(input.getName(),ResourceType.DATASOURCE);
          Action action=Action.READ;
          Pair<Resource,Action> key=new Pair<>(resource,action);
          if (resourceAccessMap.containsKey(key)) {
            return resourceAccessMap.get(key).isAllowed();
          }
 else {
            Access access=authorizationInfo.isAuthorized(key.lhs,key.rhs);
            resourceAccessMap.put(key,access);
            return access.isAllowed();
          }
        }
      }
);
    }
  }
 else {
    druidDataSources=metadataSegmentManager.getInventory();
  }
  if (includeDisabled != null) {
    return builder.entity(Collections2.transform(druidDataSources,new Function<DruidDataSource,String>(){
      @Override public String apply(      DruidDataSource input){
        return input.getName();
      }
    }
)).build();
  }
  if (full != null) {
    return builder.entity(druidDataSources).build();
  }
  List<String> dataSourceNames=Lists.newArrayList(Iterables.transform(druidDataSources,new Function<DruidDataSource,String>(){
    @Override public String apply(    DruidDataSource dataSource){
      return dataSource.getName();
    }
  }
));
  Collections.sort(dataSourceNames);
  return builder.entity(dataSourceNames).build();
}

{
  Preconditions.checkNotNull(task,"task");
  Preconditions.checkNotNull(taskRunnerWorkItem,"taskRunnerWorkItem");
  Preconditions.checkArgument(task.getId().equals(taskRunnerWorkItem.getTaskId()),"task id != workItem id");
  if (runningTasks.containsKey(task.getId()) || findWorkerRunningTask(task.getId()) != null) {
    log.info("Task[%s] already running.",task.getId());
    return true;
  }
 else {
    WorkerBehaviorConfig workerConfig=workerConfigRef.get();
    WorkerSelectStrategy strategy;
    if (workerConfig == null || workerConfig.getSelectStrategy() == null) {
      log.warn("No worker selections strategy set. Using default.");
      strategy=WorkerBehaviorConfig.DEFAULT_STRATEGY;
    }
 else {
      strategy=workerConfig.getSelectStrategy();
    }
    final Optional<ImmutableZkWorker> immutableZkWorker=strategy.findWorkerForTask(config,ImmutableMap.copyOf(Maps.transformEntries(Maps.filterEntries(zkWorkers,new Predicate<Map.Entry<String,ZkWorker>>(){
      @Override public boolean apply(      Map.Entry<String,ZkWorker> input){
        return !lazyWorkers.containsKey(input.getKey());
      }
    }
),new Maps.EntryTransformer<String,ZkWorker,ImmutableZkWorker>(){
      @Override public ImmutableZkWorker transformEntry(      String key,      ZkWorker value){
        return value.toImmutable();
      }
    }
)),task);
    if (immutableZkWorker.isPresent()) {
      final ZkWorker zkWorker=zkWorkers.get(immutableZkWorker.get().getWorker().getHost());
      return announceTask(task,zkWorker,taskRunnerWorkItem);
    }
 else {
      log.debug("Worker nodes %s do not have capacity to run any more tasks!",zkWorkers.values());
      return false;
    }
  }
}

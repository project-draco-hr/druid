{
  log.info("Worker[%s] reportin' for duty!",worker.getHost());
  try {
    final String workerStatusPath=JOINER.join(zkPaths.getIndexerStatusPath(),worker.getHost());
    final PathChildrenCache statusCache=pathChildrenCacheFactory.make(cf,workerStatusPath);
    final ZkWorker zkWorker=new ZkWorker(worker,statusCache,jsonMapper);
    zkWorker.addListener(new PathChildrenCacheListener(){
      @Override public void childEvent(      CuratorFramework client,      PathChildrenCacheEvent event) throws Exception {
        final String taskId;
        final RemoteTaskRunnerWorkItem taskRunnerWorkItem;
synchronized (statusLock) {
          try {
switch (event.getType()) {
case CHILD_ADDED:
case CHILD_UPDATED:
              taskId=ZKPaths.getNodeFromPath(event.getData().getPath());
            final TaskStatus taskStatus=jsonMapper.readValue(event.getData().getData(),TaskStatus.class);
          log.info("Worker[%s] wrote %s status for task: %s",zkWorker.getWorker().getHost(),taskStatus.getStatusCode(),taskId);
        statusLock.notifyAll();
      final RemoteTaskRunnerWorkItem tmp;
    if ((tmp=runningTasks.get(taskId)) != null) {
      taskRunnerWorkItem=tmp;
    }
 else {
      log.warn("Worker[%s] announced a status for a task I didn't know about, adding to runningTasks: %s",zkWorker.getWorker().getHost(),taskId);
      taskRunnerWorkItem=new RemoteTaskRunnerWorkItem(taskId,SettableFuture.<TaskStatus>create(),zkWorker.getWorker());
      runningTasks.put(taskId,taskRunnerWorkItem);
    }
  if (taskStatus.isComplete()) {
    taskComplete(taskRunnerWorkItem,zkWorker,taskStatus);
    runPendingTasks();
  }
break;
case CHILD_REMOVED:
taskId=ZKPaths.getNodeFromPath(event.getData().getPath());
taskRunnerWorkItem=runningTasks.remove(taskId);
if (taskRunnerWorkItem != null) {
log.info("Task[%s] just disappeared!",taskId);
taskRunnerWorkItem.setResult(TaskStatus.failure(taskRunnerWorkItem.getTaskId()));
}
 else {
log.info("Task[%s] went bye bye.",taskId);
}
break;
case INITIALIZED:
if (zkWorkers.putIfAbsent(worker.getHost(),zkWorker) != null) {
log.makeAlert("WTF?! Tried to add already-existing worker[%s]",worker.getHost()).addData("workerHost",worker.getHost()).addData("workerIp",worker.getIp()).emit();
}
runPendingTasks();
}
}
 catch (Exception e) {
log.makeAlert(e,"Failed to handle new worker status").addData("worker",zkWorker.getWorker().getHost()).addData("znode",event.getData().getPath()).emit();
}
}
}
}
);
zkWorker.start();
return zkWorker;
}
 catch (Exception e) {
throw Throwables.propagate(e);
}
}

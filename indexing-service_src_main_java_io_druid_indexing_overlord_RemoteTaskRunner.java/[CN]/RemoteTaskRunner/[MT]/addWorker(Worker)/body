{
  log.info("Worker[%s] reportin' for duty!",worker.getHost());
  try {
    cancelWorkerCleanup(worker.getHost());
    final String workerStatusPath=JOINER.join(indexerZkConfig.getStatusPath(),worker.getHost());
    final PathChildrenCache statusCache=pathChildrenCacheFactory.make(cf,workerStatusPath);
    final SettableFuture<ZkWorker> retVal=SettableFuture.create();
    final ZkWorker zkWorker=new ZkWorker(worker,statusCache,jsonMapper);
    zkWorker.addListener(new PathChildrenCacheListener(){
      @Override public void childEvent(      CuratorFramework client,      PathChildrenCacheEvent event) throws Exception {
        final String taskId;
        final RemoteTaskRunnerWorkItem taskRunnerWorkItem;
synchronized (statusLock) {
          try {
switch (event.getType()) {
case CHILD_ADDED:
case CHILD_UPDATED:
              taskId=ZKPaths.getNodeFromPath(event.getData().getPath());
            final TaskAnnouncement announcement=jsonMapper.readValue(event.getData().getData(),TaskAnnouncement.class);
          log.info("Worker[%s] wrote %s status for task [%s] on [%s]",zkWorker.getWorker().getHost(),announcement.getTaskStatus().getStatusCode(),taskId,announcement.getTaskLocation());
        statusLock.notifyAll();
      final RemoteTaskRunnerWorkItem tmp;
    if ((tmp=runningTasks.get(taskId)) != null) {
      taskRunnerWorkItem=tmp;
    }
 else {
      final RemoteTaskRunnerWorkItem newTaskRunnerWorkItem=new RemoteTaskRunnerWorkItem(taskId,zkWorker.getWorker(),TaskLocation.unknown());
      final RemoteTaskRunnerWorkItem existingItem=runningTasks.putIfAbsent(taskId,newTaskRunnerWorkItem);
      if (existingItem == null) {
        log.warn("Worker[%s] announced a status for a task I didn't know about, adding to runningTasks: %s",zkWorker.getWorker().getHost(),taskId);
        taskRunnerWorkItem=newTaskRunnerWorkItem;
      }
 else {
        taskRunnerWorkItem=existingItem;
      }
    }
  if (!announcement.getTaskLocation().equals(taskRunnerWorkItem.getLocation())) {
    taskRunnerWorkItem.setLocation(announcement.getTaskLocation());
    TaskRunnerUtils.notifyLocationChanged(listeners,taskId,announcement.getTaskLocation());
  }
if (announcement.getTaskStatus().isComplete()) {
  taskComplete(taskRunnerWorkItem,zkWorker,announcement.getTaskStatus());
  runPendingTasks();
}
break;
case CHILD_REMOVED:
taskId=ZKPaths.getNodeFromPath(event.getData().getPath());
taskRunnerWorkItem=runningTasks.remove(taskId);
if (taskRunnerWorkItem != null) {
log.info("Task[%s] just disappeared!",taskId);
taskRunnerWorkItem.setResult(TaskStatus.failure(taskRunnerWorkItem.getTaskId()));
}
 else {
log.info("Task[%s] went bye bye.",taskId);
}
break;
case INITIALIZED:
if (zkWorkers.putIfAbsent(worker.getHost(),zkWorker) == null) {
retVal.set(zkWorker);
}
 else {
final String message=String.format("WTF?! Tried to add already-existing worker[%s]",worker.getHost());
log.makeAlert(message).addData("workerHost",worker.getHost()).addData("workerIp",worker.getIp()).emit();
retVal.setException(new IllegalStateException(message));
}
runPendingTasks();
}
}
 catch (Exception e) {
log.makeAlert(e,"Failed to handle new worker status").addData("worker",zkWorker.getWorker().getHost()).addData("znode",event.getData().getPath()).emit();
}
}
}
}
);
zkWorker.start();
return retVal;
}
 catch (Exception e) {
throw Throwables.propagate(e);
}
}

{
  final ByteBuffer resultsBuf=params.getResultsBuf();
  final int numBytesPerRecord=params.getNumBytesPerRecord();
  final int[] aggregatorSizes=params.getAggregatorSizes();
  final Cursor cursor=params.getCursor();
  final DimensionSelector dimSelector=params.getDimSelector();
  final int[] aggregatorOffsets=new int[aggregatorSizes.length];
  for (int j=0, offset=0; j < aggregatorSizes.length; ++j) {
    aggregatorOffsets[j]=offset;
    offset+=aggregatorSizes[j];
  }
  final int aggSize=theAggregators.length;
  final int aggExtra=aggSize % AGG_UNROLL_COUNT;
  while (!cursor.isDone()) {
    final IndexedInts dimValues=dimSelector.getRow();
    final int dimSize=dimValues.size();
    final int dimExtra=dimSize - dimSize % 4;
    final int dimUpper=(dimSize / 4) * 4 - 1;
    for (int i=0; i < dimUpper; i+=4) {
      aggregateDimValues(positions,theAggregators,numProcessed,resultsBuf,numBytesPerRecord,aggregatorOffsets,aggSize,aggExtra,dimValues.get(i));
      aggregateDimValues(positions,theAggregators,numProcessed,resultsBuf,numBytesPerRecord,aggregatorOffsets,aggSize,aggExtra,dimValues.get(i + 1));
      aggregateDimValues(positions,theAggregators,numProcessed,resultsBuf,numBytesPerRecord,aggregatorOffsets,aggSize,aggExtra,dimValues.get(i + 2));
      aggregateDimValues(positions,theAggregators,numProcessed,resultsBuf,numBytesPerRecord,aggregatorOffsets,aggSize,aggExtra,dimValues.get(i + 3));
    }
    for (int i=dimExtra; i < dimSize; ++i) {
      aggregateDimValues(positions,theAggregators,numProcessed,resultsBuf,numBytesPerRecord,aggregatorOffsets,aggSize,aggExtra,dimValues.get(i));
    }
    cursor.advance();
  }
}

{
  mockPeon.dropSegment(EasyMock.<DataSegment>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  EasyMock.expect(mockPeon.getSegmentsToLoad()).andReturn(Sets.<DataSegment>newHashSet()).atLeastOnce();
  EasyMock.expect(mockPeon.getLoadQueueSize()).andReturn(0L).anyTimes();
  EasyMock.replay(mockPeon);
  LoadRule rule=new LoadRule(){
    private final Map<String,Integer> tiers=ImmutableMap.of("hot",0,DruidServer.DEFAULT_TIER,0);
    @Override public Map<String,Integer> getTieredReplicants(){
      return tiers;
    }
    @Override public int getNumReplicants(    String tier){
      return tiers.get(tier);
    }
    @Override public String getType(){
      return "test";
    }
    @Override public boolean appliesTo(    DataSegment segment,    DateTime referenceTimestamp){
      return true;
    }
  }
;
  DruidServer server1=new DruidServer("serverHot","hostHot",1000,"historical","hot");
  server1.addDataSegment(segment.getIdentifier(),segment);
  DruidServer server2=new DruidServer("serverNorm","hostNorm",1000,"historical",DruidServer.DEFAULT_TIER);
  server2.addDataSegment(segment.getIdentifier(),segment);
  DruidCluster druidCluster=new DruidCluster(ImmutableMap.of("hot",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(server1,mockPeon))),DruidServer.DEFAULT_TIER,MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(server2,mockPeon)))));
  CoordinatorStats stats=rule.run(null,DruidCoordinatorRuntimeParams.newBuilder().withDruidCluster(druidCluster).withSegmentReplicantLookup(SegmentReplicantLookup.make(druidCluster)).withReplicationManager(throttler).withAvailableSegments(Arrays.asList(segment)).build(),segment);
  Assert.assertTrue(stats.getPerTierStats().get("droppedCount").get("hot").get() == 1);
  Assert.assertTrue(stats.getPerTierStats().get("droppedCount").get(DruidServer.DEFAULT_TIER).get() == 1);
}

{
  mockPeon.loadSegment(EasyMock.<DataSegment>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  EasyMock.expect(mockPeon.getSegmentsToLoad()).andReturn(Sets.<DataSegment>newHashSet()).atLeastOnce();
  EasyMock.expect(mockPeon.getLoadQueueSize()).andReturn(0L).atLeastOnce();
  EasyMock.replay(mockPeon);
  LoadRule rule=new LoadRule(){
    private final Map<String,Integer> tiers=ImmutableMap.of("hot",1,DruidServer.DEFAULT_TIER,2);
    @Override public Map<String,Integer> getTieredReplicants(){
      return tiers;
    }
    @Override public int getNumReplicants(    String tier){
      return tiers.get(tier);
    }
    @Override public String getType(){
      return "test";
    }
    @Override public boolean appliesTo(    DataSegment segment,    DateTime referenceTimestamp){
      return true;
    }
    @Override public boolean appliesTo(    Interval interval,    DateTime referenceTimestamp){
      return true;
    }
  }
;
  DruidCluster druidCluster=new DruidCluster(ImmutableMap.of("hot",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(new DruidServer("serverHot","hostHot",1000,"historical","hot",0).toImmutableDruidServer(),mockPeon))),DruidServer.DEFAULT_TIER,MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(new DruidServer("serverNorm","hostNorm",1000,"historical",DruidServer.DEFAULT_TIER,0).toImmutableDruidServer(),mockPeon)))));
  CoordinatorStats stats=rule.run(null,DruidCoordinatorRuntimeParams.newBuilder().withDruidCluster(druidCluster).withSegmentReplicantLookup(SegmentReplicantLookup.make(new DruidCluster())).withReplicationManager(throttler).withAvailableSegments(Arrays.asList(segment)).build(),segment);
  Assert.assertTrue(stats.getPerTierStats().get("assignedCount").get("hot").get() == 1);
  Assert.assertTrue(stats.getPerTierStats().get("assignedCount").get(DruidServer.DEFAULT_TIER).get() == 2);
}

{
  try {
    final List<String> segmentFailures=Lists.newArrayList();
    Iterable<DataSegment> validSegments=FunctionalIterable.create(segments).transform(new Function<DataSegment,DataSegment>(){
      @Nullable @Override public DataSegment apply(      @Nullable DataSegment segment){
        if (segment == null) {
          return null;
        }
        log.info("Loading segment %s",segment.getIdentifier());
        try {
          serverManager.loadSegment(segment);
        }
 catch (        Exception e) {
          log.error(e,"Exception loading segment[%s]",segment.getIdentifier());
          removeSegment(segment);
          segmentFailures.add(segment.getIdentifier());
          return null;
        }
        File segmentInfoCacheFile=new File(config.getSegmentInfoCacheDirectory(),segment.getIdentifier());
        if (!segmentInfoCacheFile.exists()) {
          try {
            jsonMapper.writeValue(segmentInfoCacheFile,segment);
          }
 catch (          IOException e) {
            log.error(e,"Failed to write to disk segment info cache file[%s]",segmentInfoCacheFile);
            removeSegment(segment);
            segmentFailures.add(segment.getIdentifier());
            return null;
          }
        }
        return segment;
      }
    }
).filter(Predicates.<DataSegment>notNull());
    try {
      announcer.announceSegments(validSegments);
    }
 catch (    IOException e) {
      throw new SegmentLoadingException(e,"Failed to announce segments[%s]",segments);
    }
    if (!segmentFailures.isEmpty()) {
      throw new SegmentLoadingException("Error loading segments: %s",segmentFailures);
    }
  }
 catch (  SegmentLoadingException e) {
    log.makeAlert(e,"Failed to load segments for dataSource").addData("segments",segments).emit();
  }
}

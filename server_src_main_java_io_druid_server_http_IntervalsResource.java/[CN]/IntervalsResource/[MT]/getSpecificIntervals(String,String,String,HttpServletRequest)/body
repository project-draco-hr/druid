{
  final Interval theInterval=new Interval(interval.replace("_","/"));
  final Set<DruidDataSource> datasources=authConfig.isEnabled() ? InventoryViewUtils.getSecuredDataSources(serverInventoryView,(AuthorizationInfo)req.getAttribute(AuthConfig.DRUID_AUTH_TOKEN)) : InventoryViewUtils.getDataSources(serverInventoryView);
  final Comparator<Interval> comparator=Comparators.inverse(Comparators.intervalsByStartThenEnd());
  if (full != null) {
    final Map<Interval,Map<String,Map<String,Object>>> retVal=Maps.newTreeMap(comparator);
    for (    DruidDataSource dataSource : datasources) {
      for (      DataSegment dataSegment : dataSource.getSegments()) {
        if (theInterval.contains(dataSegment.getInterval())) {
          Map<String,Map<String,Object>> dataSourceInterval=retVal.get(dataSegment.getInterval());
          if (dataSourceInterval == null) {
            Map<String,Map<String,Object>> tmp=Maps.newHashMap();
            retVal.put(dataSegment.getInterval(),tmp);
          }
          setProperties(retVal,dataSource,dataSegment);
        }
      }
    }
    return Response.ok(retVal).build();
  }
  if (simple != null) {
    final Map<Interval,Map<String,Object>> retVal=Maps.newHashMap();
    for (    DruidDataSource dataSource : datasources) {
      for (      DataSegment dataSegment : dataSource.getSegments()) {
        if (theInterval.contains(dataSegment.getInterval())) {
          Map<String,Object> properties=retVal.get(dataSegment.getInterval());
          if (properties == null) {
            properties=Maps.newHashMap();
            properties.put("size",dataSegment.getSize());
            properties.put("count",1);
            retVal.put(dataSegment.getInterval(),properties);
          }
 else {
            properties.put("size",MapUtils.getLong(properties,"size",0L) + dataSegment.getSize());
            properties.put("count",MapUtils.getInt(properties,"count",0) + 1);
          }
        }
      }
    }
    return Response.ok(retVal).build();
  }
  final Map<String,Object> retVal=Maps.newHashMap();
  for (  DruidDataSource dataSource : datasources) {
    for (    DataSegment dataSegment : dataSource.getSegments()) {
      if (theInterval.contains(dataSegment.getInterval())) {
        retVal.put("size",MapUtils.getLong(retVal,"size",0L) + dataSegment.getSize());
        retVal.put("count",MapUtils.getInt(retVal,"count",0) + 1);
      }
    }
  }
  return Response.ok(retVal).build();
}

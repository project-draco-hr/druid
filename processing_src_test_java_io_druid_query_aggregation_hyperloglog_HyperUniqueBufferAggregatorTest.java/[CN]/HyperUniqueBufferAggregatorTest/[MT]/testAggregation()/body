{
  final HyperUniquesBufferAggregator agg=new HyperUniquesBufferAggregator(new ObjectColumnSelector(){
    @Override public Class classOfObject(){
      return HyperLogLogCollector.class;
    }
    @Override public Object get(){
      return collector;
    }
  }
);
  ByteBuffer byteBuffer=ByteBuffer.allocate(HyperLogLogCollector.getLatestNumBytesForDenseStorage());
  for (int i=0; i < 1000; i++) {
    collector=HyperLogLogCollector.makeLatestCollector();
    collector.add(fn.hashInt(i).asBytes());
    agg.aggregate(byteBuffer,0);
  }
  final HyperLogLogCollector collector=HyperLogLogCollector.makeCollector(((HyperLogLogCollector)agg.get(byteBuffer,0)).toByteBuffer());
  System.out.println(collector.estimateCardinality());
}

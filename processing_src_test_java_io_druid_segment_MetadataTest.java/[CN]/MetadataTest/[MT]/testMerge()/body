{
  Assert.assertNull(Metadata.merge(null,null));
  Assert.assertNull(Metadata.merge(ImmutableList.<Metadata>of(),null));
  List<Metadata> metadataToBeMerged=new ArrayList<>();
  metadataToBeMerged.add(null);
  Assert.assertNull(Metadata.merge(metadataToBeMerged,null));
  AggregatorFactory[] aggs=new AggregatorFactory[]{new LongMaxAggregatorFactory("n","f")};
  Metadata m1=new Metadata();
  m1.put("k","v");
  m1.setAggregators(aggs);
  m1.setQueryGranularity(QueryGranularities.ALL);
  Metadata m2=new Metadata();
  m2.put("k","v");
  m2.setAggregators(aggs);
  m2.setQueryGranularity(QueryGranularities.ALL);
  Metadata merged=new Metadata();
  merged.put("k","v");
  merged.setAggregators(new AggregatorFactory[]{new LongMaxAggregatorFactory("n","n")});
  merged.setQueryGranularity(QueryGranularities.ALL);
  Assert.assertEquals(merged,Metadata.merge(ImmutableList.of(m1,m2),null));
  metadataToBeMerged.clear();
  metadataToBeMerged.add(m1);
  metadataToBeMerged.add(m2);
  metadataToBeMerged.add(null);
  merged.setAggregators(null);
  merged.setQueryGranularity(null);
  Assert.assertEquals(merged,Metadata.merge(metadataToBeMerged,null));
  AggregatorFactory[] explicitAggs=new AggregatorFactory[]{new DoubleMaxAggregatorFactory("x","y")};
  merged.setAggregators(explicitAggs);
  Assert.assertEquals(merged,Metadata.merge(metadataToBeMerged,explicitAggs));
  merged.setQueryGranularity(QueryGranularities.ALL);
  Assert.assertEquals(merged,Metadata.merge(ImmutableList.of(m1,m2),explicitAggs));
}

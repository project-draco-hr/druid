{
  final TestFloatColumnSelector selector1=new TestFloatColumnSelector(new float[]{42.12f,9f});
  final TestFloatColumnSelector selector2=new TestFloatColumnSelector(new float[]{2f,3f});
  Map<String,String> script=sumLogATimesBPlusTen;
  JavaScriptBufferAggregator agg=new JavaScriptBufferAggregator(Arrays.<ObjectColumnSelector>asList(MetricSelectorUtils.wrap(selector1),MetricSelectorUtils.wrap(selector2)),JavaScriptAggregatorFactory.compileScript(script.get("fnAggregate"),script.get("fnReset"),script.get("fnCombine")));
  ByteBuffer buf=ByteBuffer.allocateDirect(32);
  final int position=4;
  agg.init(buf,position);
  double val=10.;
  Assert.assertEquals(val,agg.get(buf,position));
  Assert.assertEquals(val,agg.get(buf,position));
  Assert.assertEquals(val,agg.get(buf,position));
  aggregateBuffer(selector1,selector2,agg,buf,position);
  val+=Math.log(42.12f) * 2f;
  Assert.assertEquals(val,agg.get(buf,position));
  Assert.assertEquals(val,agg.get(buf,position));
  Assert.assertEquals(val,agg.get(buf,position));
  aggregateBuffer(selector1,selector2,agg,buf,position);
  val+=Math.log(9f) * 3f;
  Assert.assertEquals(val,agg.get(buf,position));
  Assert.assertEquals(val,agg.get(buf,position));
  Assert.assertEquals(val,agg.get(buf,position));
}

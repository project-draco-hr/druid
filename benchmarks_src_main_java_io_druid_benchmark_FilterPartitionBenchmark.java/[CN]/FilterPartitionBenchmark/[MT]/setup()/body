{
  log.info("SETUP CALLED AT " + System.currentTimeMillis());
  if (ComplexMetrics.getSerdeForType("hyperUnique") == null) {
    ComplexMetrics.registerSerde("hyperUnique",new HyperUniquesSerde(Hashing.murmur3_128()));
  }
  schemaInfo=BenchmarkSchemas.SCHEMA_MAP.get(schema);
  BenchmarkDataGenerator gen=new BenchmarkDataGenerator(schemaInfo.getColumnSchemas(),RNG_SEED,schemaInfo.getDataInterval(),rowsPerSegment);
  incIndex=makeIncIndex();
  for (int j=0; j < rowsPerSegment; j++) {
    InputRow row=gen.nextRow();
    if (j % 10000 == 0) {
      log.info(j + " rows generated.");
    }
    incIndex.add(row);
  }
  File tmpFile=Files.createTempDir();
  log.info("Using temp dir: " + tmpFile.getAbsolutePath());
  tmpFile.deleteOnExit();
  indexFile=INDEX_MERGER_V9.persist(incIndex,tmpFile,new IndexSpec());
  qIndex=INDEX_IO.loadIndex(indexFile);
  Interval interval=schemaInfo.getDataInterval();
  timeFilterNone=new BoundFilter(new BoundDimFilter(Column.TIME_COLUMN_NAME,String.valueOf(Long.MAX_VALUE),String.valueOf(Long.MAX_VALUE),true,true,null,null,StringComparators.ALPHANUMERIC));
  long halfEnd=(interval.getEndMillis() + interval.getStartMillis()) / 2;
  timeFilterHalf=new BoundFilter(new BoundDimFilter(Column.TIME_COLUMN_NAME,String.valueOf(interval.getStartMillis()),String.valueOf(halfEnd),true,true,null,null,StringComparators.ALPHANUMERIC));
  timeFilterAll=new BoundFilter(new BoundDimFilter(Column.TIME_COLUMN_NAME,String.valueOf(interval.getStartMillis()),String.valueOf(interval.getEndMillis()),true,true,null,null,StringComparators.ALPHANUMERIC));
}

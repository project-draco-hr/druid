{
  Preconditions.checkArgument(chunkFactor * Longs.BYTES <= 0xffff,"Chunks must be <= 64k bytes. chunkFactor was[%s]",chunkFactor);
  return new CompressedLongsIndexedSupplier(buffer.remaining(),chunkFactor,GenericIndexed.fromIterable(new Iterable<ResourceHolder<LongBuffer>>(){
    @Override public Iterator<ResourceHolder<LongBuffer>> iterator(){
      return new Iterator<ResourceHolder<LongBuffer>>(){
        LongBuffer myBuffer=buffer.asReadOnlyBuffer();
        @Override public boolean hasNext(){
          return myBuffer.hasRemaining();
        }
        @Override public ResourceHolder<LongBuffer> next(){
          LongBuffer retVal=myBuffer.asReadOnlyBuffer();
          if (chunkFactor < myBuffer.remaining()) {
            retVal.limit(retVal.position() + chunkFactor);
          }
          myBuffer.position(myBuffer.position() + retVal.remaining());
          return StupidResourceHolder.create(retVal);
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
,CompressedLongBufferObjectStrategy.getBufferForOrder(byteOrder)));
}

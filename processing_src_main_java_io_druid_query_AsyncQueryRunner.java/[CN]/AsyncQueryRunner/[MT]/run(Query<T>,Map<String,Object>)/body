{
  final int priority=BaseQuery.getContextPriority(query,0);
  final ListenableFuture<Sequence<T>> future=executor.submit(new AbstractPrioritizedCallable<Sequence<T>>(priority){
    @Override public Sequence<T> call() throws Exception {
      return baseRunner.run(query,responseContext);
    }
  }
);
  queryWatcher.registerQuery(query,future);
  return new LazySequence<>(new Supplier<Sequence<T>>(){
    @Override public Sequence<T> get(){
      try {
        Number timeout=query.getContextValue(QueryContextKeys.TIMEOUT);
        if (timeout == null) {
          return future.get();
        }
 else {
          return future.get(timeout.longValue(),TimeUnit.MILLISECONDS);
        }
      }
 catch (      ExecutionException|InterruptedException|TimeoutException ex) {
        throw Throwables.propagate(ex);
      }
    }
  }
);
}

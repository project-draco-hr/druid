{
  TopNQueryEngine engine=new TopNQueryEngine(new StupidPool<ByteBuffer>(new Supplier<ByteBuffer>(){
    @Override public ByteBuffer get(){
      return ByteBuffer.allocate(1024 * 1024);
    }
  }
));
  IncrementalIndex index=new OnheapIncrementalIndex(0,QueryGranularities.SECOND,new AggregatorFactory[]{new CountAggregatorFactory("cnt")},1000);
  String visitor_id="visitor_id";
  String client_type="client_type";
  DateTime time=new DateTime("2016-03-04T00:00:00.000Z");
  long timestamp=time.getMillis();
  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.<String,Object>of(visitor_id,"0",client_type,"iphone")));
  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.<String,Object>of(visitor_id,"1",client_type,"iphone")));
  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.<String,Object>of(visitor_id,"2",client_type,"android")));
  TopNQuery query=new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).intervals(QueryRunnerTestHelper.fullOnInterval).dimension(client_type).metric("UV").threshold(10).aggregators(Lists.newArrayList(QueryRunnerTestHelper.rowsCount,new DistinctCountAggregatorFactory("UV",visitor_id,null))).build();
  final Iterable<Result<TopNResultValue>> results=Sequences.toList(engine.query(query,new IncrementalIndexStorageAdapter(index)),Lists.<Result<TopNResultValue>>newLinkedList());
  List<Result<TopNResultValue>> expectedResults=Arrays.asList(new Result<>(time,new TopNResultValue(Arrays.<Map<String,Object>>asList(ImmutableMap.<String,Object>of(client_type,"iphone","UV",2L,"rows",2L),ImmutableMap.<String,Object>of(client_type,"android","UV",1L,"rows",1L)))));
  TestHelper.assertExpectedResults(expectedResults,results);
}

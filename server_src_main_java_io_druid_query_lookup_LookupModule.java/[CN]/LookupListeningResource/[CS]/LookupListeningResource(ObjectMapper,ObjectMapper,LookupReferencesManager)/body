{
  super(jsonMapper,smileMapper,new AbstractListenerHandler<LookupExtractorFactory>(new TypeReference<LookupExtractorFactory>(){
  }
){
    private final Object deleteLock=new Object();
    @Override public synchronized Object post(    final Map<String,LookupExtractorFactory> lookups) throws Exception {
      final Map<String,LookupExtractorFactory> failedUpdates=new HashMap<>();
      for (      final String name : lookups.keySet()) {
        final LookupExtractorFactory factory=lookups.get(name);
        try {
          if (!manager.updateIfNew(name,factory)) {
            failedUpdates.put(name,factory);
          }
        }
 catch (        ISE ise) {
          LOG.error(ise,"Error starting [%s]: [%s]",name,factory);
          failedUpdates.put(name,factory);
        }
      }
      return ImmutableMap.of("status","accepted",LookupModule.FAILED_UPDATES_KEY,failedUpdates);
    }
    @Override public Object get(    String id){
      return manager.get(id);
    }
    @Override public Map<String,LookupExtractorFactory> getAll(){
      return manager.getAll();
    }
    @Override public Object delete(    String id){
synchronized (deleteLock) {
        if (manager.get(id) == null) {
          return null;
        }
        if (!manager.remove(id)) {
          throw new RE("Could not remove lookup [%s]",id);
        }
        return id;
      }
    }
  }
);
}

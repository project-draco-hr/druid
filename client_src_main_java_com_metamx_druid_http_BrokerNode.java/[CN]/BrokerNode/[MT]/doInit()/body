{
  initializeWarehouse();
  initializeBrokerHttpClient();
  initializeCacheBroker();
  initializeDiscovery();
  final Lifecycle lifecycle=getLifecycle();
  final List<Monitor> monitors=getMonitors();
  monitors.add(new CacheMonitor(cacheBroker));
  startMonitoring(monitors);
  final BrokerServerView view=new BrokerServerView(warehouse,getSmileMapper(),brokerHttpClient);
  final ClientInventoryManager clientInventoryManager=new ClientInventoryManager(getConfigFactory().build(ClientConfig.class),getPhoneBook(),view);
  lifecycle.addManagedInstance(clientInventoryManager);
  final CachingClusteredClient baseClient=new CachingClusteredClient(warehouse,view,cacheBroker,getSmileMapper());
  lifecycle.addManagedInstance(baseClient);
  final ClientQuerySegmentWalker texasRanger=new ClientQuerySegmentWalker(warehouse,getEmitter(),baseClient);
  List<Module> theModules=Lists.newArrayList();
  theModules.add(new ClientServletModule(texasRanger,clientInventoryManager,getJsonMapper()));
  theModules.addAll(extraModules);
  final Injector injector=Guice.createInjector(theModules);
  final Context root=new Context(getServer(),"/druid/v2",Context.SESSIONS);
  root.addServlet(new ServletHolder(new StatusServlet()),"/status");
  root.addServlet(new ServletHolder(new QueryServlet(getJsonMapper(),getSmileMapper(),texasRanger,getEmitter(),getRequestLogger())),"/*");
  root.addEventListener(new GuiceServletConfig(injector));
  root.addFilter(GuiceFilter.class,"/datasources/*",0);
  for (  String path : pathsForGuiceFilter) {
    root.addFilter(GuiceFilter.class,path,0);
  }
}

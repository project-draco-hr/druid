{
  super(String.format("merge_%s_%s",computeProcessingID(dataSource,segments),new DateTime().toString()),dataSource,computeMergedInterval(segments));
  Preconditions.checkArgument(segments.size() > 0,"segments nonempty");
  Preconditions.checkArgument(Iterables.size(Iterables.filter(segments,new Predicate<DataSegment>(){
    @Override public boolean apply(    @Nullable DataSegment segment){
      return segment == null || !segment.getDataSource().equalsIgnoreCase(dataSource);
    }
  }
)) == 0,"segments in the wrong datasource");
  Preconditions.checkArgument(Iterables.size(Iterables.filter(segments,new Predicate<DataSegment>(){
    @Override public boolean apply(    @Nullable DataSegment segment){
      return segment == null || !(segment.getShardSpec() instanceof NoneShardSpec);
    }
  }
)) == 0,"segments without NoneShardSpec");
  this.segments=segments;
}

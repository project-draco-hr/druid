{
  final ServiceEmitter emitter=toolbox.getEmitter();
  final ServiceMetricEvent.Builder builder=new ServiceMetricEvent.Builder();
  final DataSegment mergedSegment=computeMergedSegment(getDataSource(),context.getVersion(),segments);
  final File taskDir=toolbox.getConfig().getTaskDir(this);
  try {
    final long startTime=System.currentTimeMillis();
    log.info("Starting merge of id[%s], segments: %s",getId(),Lists.transform(segments,new Function<DataSegment,String>(){
      @Override public String apply(      @Nullable DataSegment input){
        return input.getIdentifier();
      }
    }
));
    final Map<String,SegmentPuller> segmentGetters=toolbox.getSegmentGetters(this);
    final Map<DataSegment,File> gettedSegments=Maps.newHashMap();
    for (    final DataSegment segment : segments) {
      Map<String,Object> loadSpec=segment.getLoadSpec();
      SegmentPuller segmentPuller=segmentGetters.get(loadSpec.get("type"));
      gettedSegments.put(segment,segmentPuller.getSegmentFiles(segment));
    }
    final File fileToUpload=merge(gettedSegments,new File(taskDir,"merged"));
    emitter.emit(builder.build("merger/numMerged",segments.size()));
    emitter.emit(builder.build("merger/mergeTime",System.currentTimeMillis() - startTime));
    log.info("[%s] : Merged %d segments in %,d millis",mergedSegment.getDataSource(),segments.size(),System.currentTimeMillis() - startTime);
    long uploadStart=System.currentTimeMillis();
    final DataSegment uploadedSegment=toolbox.getSegmentPusher().push(fileToUpload,mergedSegment);
    emitter.emit(builder.build("merger/uploadTime",System.currentTimeMillis() - uploadStart));
    emitter.emit(builder.build("merger/mergeSize",uploadedSegment.getSize()));
    return TaskStatus.success(getId(),Lists.newArrayList(uploadedSegment));
  }
 catch (  Exception e) {
    log.error(e,String.format("Exception merging %s[%s] segments",mergedSegment.getDataSource(),mergedSegment.getInterval()));
    emitter.emit(new AlertEvent.Builder().build("Exception merging",ImmutableMap.<String,Object>builder().put("exception",e.toString()).build()));
    return TaskStatus.failure(getId());
  }
}

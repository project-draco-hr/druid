{
  assertFilterMatches(new SelectorDimFilter(COUNT_COLUMN,"0",null),ImmutableList.<String>of());
  assertFilterMatches(new SelectorDimFilter(COUNT_COLUMN,"3",null),ImmutableList.<String>of("3"));
  assertFilterMatches(new BoundDimFilter(COUNT_COLUMN,"2","5",false,false,true,null),ImmutableList.<String>of("2","3","4","5"));
  assertFilterMatches(new BoundDimFilter(COUNT_COLUMN,"1","4",true,true,true,null),ImmutableList.<String>of("2","3"));
  assertFilterMatches(new InDimFilter(COUNT_COLUMN,Arrays.asList("2","4","8"),null),ImmutableList.<String>of("2","4"));
  List<String> infilterValues=new ArrayList<>(InDimFilter.LONG_HASHING_THRESHOLD * 2);
  for (int i=0; i < InDimFilter.LONG_HASHING_THRESHOLD * 2; i++) {
    infilterValues.add(String.valueOf(i * 2));
  }
  assertFilterMatches(new InDimFilter(COUNT_COLUMN,infilterValues,null),ImmutableList.<String>of("2","4","6"));
  String jsFn="function(x) { return(x === 3 || x === 5) }";
  assertFilterMatches(new JavaScriptDimFilter(COUNT_COLUMN,jsFn,null,JavaScriptConfig.getDefault()),ImmutableList.<String>of("3","5"));
  assertFilterMatches(new RegexDimFilter(COUNT_COLUMN,"4",null),ImmutableList.<String>of("4"));
  assertFilterMatches(new SearchQueryDimFilter(COUNT_COLUMN,new ContainsSearchQuerySpec("2",true),null),ImmutableList.<String>of("2"));
}

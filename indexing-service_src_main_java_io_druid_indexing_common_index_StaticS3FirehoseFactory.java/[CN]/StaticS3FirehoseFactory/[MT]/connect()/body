{
  Preconditions.checkNotNull(s3Client,"null s3Client");
  return new FileIteratingFirehose<URI>(new LineIteratorFactory<URI>(){
    @Override public LineIterator make(    URI nextURI) throws Exception {
      final String s3Bucket=nextURI.getAuthority();
      final S3Object s3Object=new S3Object(nextURI.getPath().startsWith("/") ? nextURI.getPath().substring(1) : nextURI.getPath());
      log.info("Reading from bucket[%s] object[%s] (%s)",s3Bucket,s3Object.getKey(),nextURI);
      try {
        final InputStream innerInputStream=s3Client.getObject(s3Bucket,s3Object.getKey()).getDataInputStream();
        final InputStream outerInputStream=s3Object.getKey().endsWith(".gz") ? new GZIPInputStream(innerInputStream) : innerInputStream;
        return IOUtils.lineIterator(new BufferedReader(new InputStreamReader(outerInputStream,Charsets.UTF_8)));
      }
 catch (      IOException e) {
        log.error(e,"Exception reading from bucket[%s] object[%s]",s3Bucket,s3Object.getKey());
        throw Throwables.propagate(e);
      }
    }
  }
,Lists.newLinkedList(uris),parser);
}

{
  EasyMock.expect(req.getContentType()).andReturn("application/json").times(NUM_EVENTS);
  EasyMock.replay(req);
  for (int i=0; i < NUM_EVENTS; ++i) {
    final InputStream inputStream=IOUtils.toInputStream(inputRow);
    firehose.addAll(inputStream,req);
    Assert.assertEquals(i + 1,firehose.getCurrentBufferSize());
    inputStream.close();
  }
  EasyMock.verify(req);
  final Iterable<Map.Entry<String,EventReceiverFirehoseMetric>> metrics=register.getMetrics();
  Assert.assertEquals(1,Iterables.size(metrics));
  final Map.Entry<String,EventReceiverFirehoseMetric> entry=Iterables.getLast(metrics);
  Assert.assertEquals(SERVICE_NAME,entry.getKey());
  Assert.assertEquals(CAPACITY,entry.getValue().getCapacity());
  Assert.assertEquals(CAPACITY,firehose.getCapacity());
  Assert.assertEquals(NUM_EVENTS,entry.getValue().getCurrentBufferSize());
  Assert.assertEquals(NUM_EVENTS,firehose.getCurrentBufferSize());
  for (int i=NUM_EVENTS - 1; i >= 0; --i) {
    Assert.assertTrue(firehose.hasMore());
    Assert.assertNotNull(firehose.nextRow());
    Assert.assertEquals(i,firehose.getCurrentBufferSize());
  }
  Assert.assertEquals(CAPACITY,entry.getValue().getCapacity());
  Assert.assertEquals(CAPACITY,firehose.getCapacity());
  Assert.assertEquals(0,entry.getValue().getCurrentBufferSize());
  Assert.assertEquals(0,firehose.getCurrentBufferSize());
  firehose.close();
  Assert.assertFalse(firehose.hasMore());
  Assert.assertEquals(0,Iterables.size(register.getMetrics()));
}

{
  final TestColumnSelectorFactory columnSelectorFactory=GrouperTestUtil.newColumnSelectorFactory();
  final Grouper<Integer> grouper=new BufferGrouper<>(ByteBuffer.allocate(1000),GrouperTestUtil.intKeySerde(),columnSelectorFactory,new AggregatorFactory[]{new LongSumAggregatorFactory("valueSum","value"),new CountAggregatorFactory("count")},Integer.MAX_VALUE,0,0);
  columnSelectorFactory.setRow(new MapBasedRow(0,ImmutableMap.<String,Object>of("value",10L)));
  grouper.aggregate(12);
  grouper.aggregate(6);
  grouper.aggregate(10);
  grouper.aggregate(6);
  grouper.aggregate(12);
  grouper.aggregate(12);
  final List<Grouper.Entry<Integer>> expected=ImmutableList.of(new Grouper.Entry<>(6,new Object[]{20L,2L}),new Grouper.Entry<>(10,new Object[]{10L,1L}),new Grouper.Entry<>(12,new Object[]{30L,3L}));
  final List<Grouper.Entry<Integer>> unsortedEntries=Lists.newArrayList(grouper.iterator(false));
  final List<Grouper.Entry<Integer>> sortedEntries=Lists.newArrayList(grouper.iterator(true));
  Assert.assertEquals(expected,sortedEntries);
  Assert.assertEquals(expected,Ordering.from(new Comparator<Grouper.Entry<Integer>>(){
    @Override public int compare(    Grouper.Entry<Integer> o1,    Grouper.Entry<Integer> o2){
      return Ints.compare(o1.getKey(),o2.getKey());
    }
  }
).sortedCopy(unsortedEntries));
}

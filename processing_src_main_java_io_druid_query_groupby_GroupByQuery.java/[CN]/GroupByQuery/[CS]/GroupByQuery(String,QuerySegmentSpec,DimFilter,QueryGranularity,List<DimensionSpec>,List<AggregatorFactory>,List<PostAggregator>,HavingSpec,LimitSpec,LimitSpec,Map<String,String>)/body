{
  super(dataSource,querySegmentSpec,context);
  this.dimFilter=dimFilter;
  this.granularity=granularity;
  this.dimensions=dimensions == null ? ImmutableList.<DimensionSpec>of() : dimensions;
  this.aggregatorSpecs=aggregatorSpecs;
  this.postAggregatorSpecs=postAggregatorSpecs == null ? ImmutableList.<PostAggregator>of() : postAggregatorSpecs;
  this.havingSpec=havingSpec;
  this.limitSpec=(limitSpec == null) ? (orderBySpec == null ? new NoopLimitSpec() : orderBySpec) : limitSpec;
  Preconditions.checkNotNull(this.granularity,"Must specify a granularity");
  Preconditions.checkNotNull(this.aggregatorSpecs,"Must specify at least one aggregator");
  Queries.verifyAggregations(this.aggregatorSpecs,this.postAggregatorSpecs);
  Function<Sequence<Row>,Sequence<Row>> postProcFn=this.limitSpec.build(this.dimensions,this.aggregatorSpecs,this.postAggregatorSpecs);
  if (havingSpec != null) {
    postProcFn=Functions.compose(new Function<Sequence<Row>,Sequence<Row>>(){
      @Override public Sequence<Row> apply(      @Nullable Sequence<Row> input){
        return Sequences.filter(input,new Predicate<Row>(){
          @Override public boolean apply(          @Nullable Row input){
            return GroupByQuery.this.havingSpec.eval(input);
          }
        }
);
      }
    }
,postProcFn);
  }
  orderByLimitFn=postProcFn;
}

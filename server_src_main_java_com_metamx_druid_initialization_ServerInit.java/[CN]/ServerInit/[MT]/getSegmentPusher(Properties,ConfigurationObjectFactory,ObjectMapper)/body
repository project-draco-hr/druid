{
  if (Boolean.parseBoolean(props.getProperty("druid.pusher.local","false"))) {
    return new LocalDataSegmentPusher(configFactory.build(LocalDataSegmentPusherConfig.class),jsonMapper);
  }
 else   if (Boolean.parseBoolean(props.getProperty("druid.pusher.cassandra","false"))) {
    final CassandraDataSegmentPusherConfig config=configFactory.build(CassandraDataSegmentPusherConfig.class);
    return new CassandraDataSegmentPusher(config,jsonMapper);
  }
 else   if (Boolean.parseBoolean(props.getProperty("druid.pusher.hdfs","false"))) {
    final HdfsDataSegmentPusherConfig config=configFactory.build(HdfsDataSegmentPusherConfig.class);
    return new HdfsDataSegmentPusher(config,new Configuration(),jsonMapper);
  }
 else {
    final RestS3Service s3Client;
    try {
      s3Client=new RestS3Service(new AWSCredentials(PropUtils.getProperty(props,"com.metamx.aws.accessKey"),PropUtils.getProperty(props,"com.metamx.aws.secretKey")));
    }
 catch (    S3ServiceException e) {
      throw Throwables.propagate(e);
    }
    return new S3DataSegmentPusher(s3Client,configFactory.build(S3DataSegmentPusherConfig.class),jsonMapper);
  }
}

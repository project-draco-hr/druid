{
  SegmentLoaderConfig config=configFactory.build(SegmentLoaderConfig.class);
  DelegatingSegmentLoader delegateLoader=new DelegatingSegmentLoader();
  final QueryableIndexFactory factory=new MMappedQueryableIndexFactory();
  SingleSegmentLoader s3segmentLoader=null;
  try {
    final RestS3Service s3Client=new RestS3Service(new AWSCredentials(PropUtils.getProperty(props,"com.metamx.aws.accessKey"),PropUtils.getProperty(props,"com.metamx.aws.secretKey")));
    final S3DataSegmentPuller segmentGetter=new S3DataSegmentPuller(s3Client);
    s3segmentLoader=new SingleSegmentLoader(segmentGetter,factory,config);
  }
 catch (  com.metamx.common.ISE ise) {
    log.warn("Could not create s3Client.",ise);
  }
  Map<String,SegmentLoader> loaderTypes=new HashMap<String,SegmentLoader>();
  loaderTypes.put("local",new SingleSegmentLoader(new LocalDataSegmentPuller(),factory,config));
  loaderTypes.put("hdfs",new SingleSegmentLoader(new HdfsDataSegmentPuller(new Configuration()),factory,config));
  loaderTypes.put("c*",new SingleSegmentLoader(new CassandraDataSegmentPuller(configFactory.build(CassandraDataSegmentConfig.class)),factory,config));
  if (s3segmentLoader != null) {
    loaderTypes.put("s3",s3segmentLoader);
    loaderTypes.put("s3_zip",s3segmentLoader);
  }
  delegateLoader.setLoaderTypes(ImmutableMap.<String,SegmentLoader>copyOf(loaderTypes));
  return delegateLoader;
}

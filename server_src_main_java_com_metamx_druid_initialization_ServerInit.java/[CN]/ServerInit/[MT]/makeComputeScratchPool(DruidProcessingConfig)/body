{
  try {
    Class<?> vmClass=Class.forName("sun.misc.VM");
    Object maxDirectMemoryObj=vmClass.getMethod("maxDirectMemory").invoke(null);
    if (maxDirectMemoryObj == null || !(maxDirectMemoryObj instanceof Number)) {
      log.info("Cannot determine maxDirectMemory from[%s]",maxDirectMemoryObj);
    }
 else {
      long maxDirectMemory=((Number)maxDirectMemoryObj).longValue();
      final long memoryNeeded=(long)config.intermediateComputeSizeBytes() * (config.getNumThreads() + 1);
      if (maxDirectMemory < memoryNeeded) {
        throw new ISE("Not enough direct memory.  Please adjust -XX:MaxDirectMemory or druid.computation.buffer.size: " + "maxDirectMemory[%,d], memoryNeeded[%,d], druid.computation.buffer.size[%,d], numThreads[%,d]",maxDirectMemory,memoryNeeded,config.intermediateComputeSizeBytes(),config.getNumThreads());
      }
    }
  }
 catch (  ClassNotFoundException e) {
    log.info("No VM class, cannot do memory check.");
  }
catch (  NoSuchMethodException e) {
    log.info("VM.maxDirectMemory doesn't exist, cannot do memory check.");
  }
catch (  InvocationTargetException e) {
    log.warn(e,"static method shouldn't throw this");
  }
catch (  IllegalAccessException e) {
    log.warn(e,"public method, shouldn't throw this");
  }
  return new ComputeScratchPool(config.intermediateComputeSizeBytes());
}

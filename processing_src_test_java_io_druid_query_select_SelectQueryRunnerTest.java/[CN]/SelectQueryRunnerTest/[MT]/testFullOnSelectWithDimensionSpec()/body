{
  Map<String,String> map=new HashMap<>();
  map.put("automotive","automotive0");
  map.put("business","business0");
  map.put("entertainment","entertainment0");
  map.put("health","health0");
  map.put("mezzanine","mezzanine0");
  map.put("news","news0");
  map.put("premium","premium0");
  map.put("technology","technology0");
  map.put("travel","travel0");
  SelectQuery query=newTestQuery().dimensionSpecs(Arrays.<DimensionSpec>asList(new DefaultDimensionSpec(QueryRunnerTestHelper.marketDimension,"mar"),new ExtractionDimensionSpec(QueryRunnerTestHelper.qualityDimension,"qual",new LookupExtractionFn(new MapLookupExtractor(map,true),false,null,true,false)),new DefaultDimensionSpec(QueryRunnerTestHelper.placementDimension,"place"))).build();
  HashMap<String,Object> context=new HashMap<String,Object>();
  Iterable<Result<SelectResultValue>> results=Sequences.toList(runner.run(query,context),Lists.<Result<SelectResultValue>>newArrayList());
  List<Result<SelectResultValue>> expectedResultsAsc=Arrays.asList(new Result<SelectResultValue>(new DateTime("2011-01-12T00:00:00.000Z"),new SelectResultValue(ImmutableMap.of(QueryRunnerTestHelper.segmentId,2),Arrays.asList(new EventHolder(QueryRunnerTestHelper.segmentId,0,new ImmutableMap.Builder<String,Object>().put(EventHolder.timestampKey,new DateTime("2011-01-12T00:00:00.000Z")).put("mar","spot").put("qual","automotive0").put("place","preferred").put(QueryRunnerTestHelper.indexMetric,100.000000F).build()),new EventHolder(QueryRunnerTestHelper.segmentId,1,new ImmutableMap.Builder<String,Object>().put(EventHolder.timestampKey,new DateTime("2011-01-12T00:00:00.000Z")).put("mar","spot").put("qual","business0").put("place","preferred").put(QueryRunnerTestHelper.indexMetric,100.000000F).build()),new EventHolder(QueryRunnerTestHelper.segmentId,2,new ImmutableMap.Builder<String,Object>().put(EventHolder.timestampKey,new DateTime("2011-01-12T00:00:00.000Z")).put("mar","spot").put("qual","entertainment0").put("place","preferred").put(QueryRunnerTestHelper.indexMetric,100.000000F).build())))));
  List<Result<SelectResultValue>> expectedResultsDsc=Arrays.asList(new Result<SelectResultValue>(new DateTime("2011-01-12T00:00:00.000Z"),new SelectResultValue(ImmutableMap.of(QueryRunnerTestHelper.segmentId,-3),Arrays.asList(new EventHolder(QueryRunnerTestHelper.segmentId,-1,new ImmutableMap.Builder<String,Object>().put(EventHolder.timestampKey,new DateTime("2011-04-15T00:00:00.000Z")).put("mar","upfront").put("qual","premium0").put("place","preferred").put(QueryRunnerTestHelper.indexMetric,780.27197265625F).build()),new EventHolder(QueryRunnerTestHelper.segmentId,-2,new ImmutableMap.Builder<String,Object>().put(EventHolder.timestampKey,new DateTime("2011-04-15T00:00:00.000Z")).put("mar","upfront").put("qual","mezzanine0").put("place","preferred").put(QueryRunnerTestHelper.indexMetric,962.731201171875F).build()),new EventHolder(QueryRunnerTestHelper.segmentId,-3,new ImmutableMap.Builder<String,Object>().put(EventHolder.timestampKey,new DateTime("2011-04-15T00:00:00.000Z")).put("mar","total_market").put("qual","premium0").put("place","preferred").put(QueryRunnerTestHelper.indexMetric,1029.0570068359375F).build())))));
  verify(descending ? expectedResultsDsc : expectedResultsAsc,results);
}

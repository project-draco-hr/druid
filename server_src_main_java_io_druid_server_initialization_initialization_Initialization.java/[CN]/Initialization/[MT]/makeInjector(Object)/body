{
  final Injector baseInjector=Guice.createInjector(new DruidGuiceExtensions(),new JacksonModule(),new PropertiesModule("runtime.properties"),new ConfigModule(),new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(DruidSecondaryModule.class);
      for (      Object module : modules) {
        if (module instanceof Class) {
          binder.bind((Class)module);
        }
      }
    }
  }
);
  List<Object> actualModules=Lists.newArrayList();
  actualModules.add(DruidSecondaryModule.class);
  actualModules.addAll(Arrays.asList(modules));
  return Guice.createInjector(Lists.transform(actualModules,new Function<Object,Module>(){
    ObjectMapper jsonMapper=baseInjector.getInstance(Key.get(ObjectMapper.class,Json.class));
    ObjectMapper smileMapper=baseInjector.getInstance(Key.get(ObjectMapper.class,Smile.class));
    @Override @SuppressWarnings("unchecked") public Module apply(    @Nullable Object input){
      if (input instanceof DruidModule) {
        baseInjector.injectMembers(input);
        return registerJacksonModules(((DruidModule)input));
      }
      if (input instanceof Module) {
        baseInjector.injectMembers(input);
        return (Module)input;
      }
      if (input instanceof Class) {
        if (DruidModule.class.isAssignableFrom((Class)input)) {
          return registerJacksonModules(baseInjector.getInstance((Class<? extends DruidModule>)input));
        }
        if (Module.class.isAssignableFrom((Class)input)) {
          return baseInjector.getInstance((Class<? extends Module>)input);
        }
 else {
          throw new ISE("Class[%s] does not implement %s",input.getClass(),Module.class);
        }
      }
      throw new ISE("Unknown module type[%s]",input.getClass());
    }
    private DruidModule registerJacksonModules(    DruidModule module){
      for (      com.fasterxml.jackson.databind.Module jacksonModule : module.getJacksonModules()) {
        jsonMapper.registerModule(jacksonModule);
        smileMapper.registerModule(jacksonModule);
      }
      return module;
    }
  }
));
}

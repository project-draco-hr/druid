{
  final List<Class<?>> externalModules=Lists.newArrayList();
  final DefaultTeslaAether aether=new DefaultTeslaAether();
  try {
    final List<Artifact> artifacts=aether.resolveArtifacts("com.metamx.druid-extensions-mmx:druid-extensions:0.4.18-SNAPSHOT");
    List<URL> urls=Lists.newArrayListWithExpectedSize(artifacts.size());
    for (    Artifact artifact : artifacts) {
      if (!exclusions.contains(artifact.getGroupId())) {
        urls.add(artifact.getFile().toURI().toURL());
      }
 else {
        log.error("Skipped Artifact[%s]",artifact);
      }
    }
    for (    URL url : urls) {
      log.error("Added URL[%s]",url);
    }
    ClassLoader loader=new URLClassLoader(urls.toArray(new URL[urls.size()]),Initialization.class.getClassLoader());
    externalModules.add(loader.loadClass("com.metamx.druid.extensions.query.topn.TopNQueryDruidModule"));
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
  final Injector baseInjector=Guice.createInjector(new DruidGuiceExtensions(),new JacksonModule(),new PropertiesModule("runtime.properties"),new ConfigModule(),new Module(){
    @Override public void configure(    Binder binder){
      binder.bind(DruidSecondaryModule.class);
      for (      Object module : modules) {
        if (module instanceof Class) {
          binder.bind((Class)module);
        }
      }
      for (      Class<?> externalModule : externalModules) {
        binder.bind(externalModule);
      }
    }
  }
);
  ModuleList actualModules=new ModuleList(baseInjector);
  actualModules.addModule(DruidSecondaryModule.class);
  for (  Object module : modules) {
    actualModules.addModule(module);
  }
  for (  Class<?> externalModule : externalModules) {
    actualModules.addModule(externalModule);
  }
  return Guice.createInjector(actualModules.getModules());
}

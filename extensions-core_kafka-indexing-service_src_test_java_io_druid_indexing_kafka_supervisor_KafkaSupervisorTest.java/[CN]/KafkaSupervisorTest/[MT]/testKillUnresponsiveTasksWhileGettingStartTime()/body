{
  supervisor=getSupervisor(2,2,true,"PT1H",null);
  addSomeEvents(1);
  Capture<Task> captured=Capture.newInstance(CaptureType.ALL);
  expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();
  expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();
  expect(taskRunner.getRunningTasks()).andReturn(Collections.EMPTY_LIST).anyTimes();
  expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.<Task>of()).anyTimes();
  expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes();
  expect(taskQueue.add(capture(captured))).andReturn(true).times(4);
  taskRunner.registerListener(anyObject(TaskRunnerListener.class),anyObject(Executor.class));
  replayAll();
  supervisor.start();
  supervisor.runInternal();
  verifyAll();
  List<Task> tasks=captured.getValues();
  reset(taskStorage,taskClient,taskQueue);
  expect(taskStorage.getActiveTasks()).andReturn(tasks).anyTimes();
  for (  Task task : tasks) {
    expect(taskStorage.getStatus(task.getId())).andReturn(Optional.of(TaskStatus.running(task.getId()))).anyTimes();
    expect(taskStorage.getTask(task.getId())).andReturn(Optional.of(task)).anyTimes();
    expect(taskClient.getStatusAsync(task.getId())).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.NOT_STARTED));
    expect(taskClient.getStartTimeAsync(task.getId())).andReturn(Futures.<DateTime>immediateFailedFuture(new RuntimeException()));
    taskQueue.shutdown(task.getId());
  }
  replay(taskStorage,taskClient,taskQueue);
  supervisor.runInternal();
  verifyAll();
}

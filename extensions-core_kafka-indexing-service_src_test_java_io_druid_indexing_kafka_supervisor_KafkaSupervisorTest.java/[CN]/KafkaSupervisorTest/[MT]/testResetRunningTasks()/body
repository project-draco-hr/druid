{
  final TaskLocation location1=new TaskLocation("testHost",1234);
  final TaskLocation location2=new TaskLocation("testHost2",145);
  final DateTime startTime=new DateTime();
  supervisor=getSupervisor(2,1,true,"PT1H",null);
  addSomeEvents(1);
  Task id1=createKafkaIndexTask("id1",DATASOURCE,"sequenceName-0",new KafkaPartitions("topic",ImmutableMap.of(0,0L,1,0L,2,0L)),new KafkaPartitions("topic",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null);
  Task id2=createKafkaIndexTask("id2",DATASOURCE,"sequenceName-0",new KafkaPartitions("topic",ImmutableMap.of(0,10L,1,20L,2,30L)),new KafkaPartitions("topic",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null);
  Task id3=createKafkaIndexTask("id3",DATASOURCE,"sequenceName-0",new KafkaPartitions("topic",ImmutableMap.of(0,10L,1,20L,2,30L)),new KafkaPartitions("topic",ImmutableMap.of(0,Long.MAX_VALUE,1,Long.MAX_VALUE,2,Long.MAX_VALUE)),null);
  Collection workItems=new ArrayList<>();
  workItems.add(new TestTaskRunnerWorkItem(id1.getId(),null,location1));
  workItems.add(new TestTaskRunnerWorkItem(id2.getId(),null,location2));
  expect(taskMaster.getTaskQueue()).andReturn(Optional.of(taskQueue)).anyTimes();
  expect(taskMaster.getTaskRunner()).andReturn(Optional.of(taskRunner)).anyTimes();
  expect(taskRunner.getRunningTasks()).andReturn(workItems).anyTimes();
  expect(taskStorage.getActiveTasks()).andReturn(ImmutableList.of(id1,id2,id3)).anyTimes();
  expect(taskStorage.getStatus("id1")).andReturn(Optional.of(TaskStatus.running("id1"))).anyTimes();
  expect(taskStorage.getStatus("id2")).andReturn(Optional.of(TaskStatus.running("id2"))).anyTimes();
  expect(taskStorage.getStatus("id3")).andReturn(Optional.of(TaskStatus.running("id3"))).anyTimes();
  expect(taskStorage.getTask("id1")).andReturn(Optional.of(id1)).anyTimes();
  expect(taskStorage.getTask("id2")).andReturn(Optional.of(id2)).anyTimes();
  expect(taskStorage.getTask("id3")).andReturn(Optional.of(id3)).anyTimes();
  expect(indexerMetadataStorageCoordinator.getDataSourceMetadata(DATASOURCE)).andReturn(new KafkaDataSourceMetadata(null)).anyTimes();
  expect(taskClient.getStatusAsync("id1")).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.PUBLISHING));
  expect(taskClient.getStatusAsync("id2")).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.READING));
  expect(taskClient.getStatusAsync("id3")).andReturn(Futures.immediateFuture(KafkaIndexTask.Status.READING));
  expect(taskClient.getStartTimeAsync("id2")).andReturn(Futures.immediateFuture(startTime));
  expect(taskClient.getStartTimeAsync("id3")).andReturn(Futures.immediateFuture(startTime));
  expect(taskClient.getCurrentOffsets("id1",true)).andReturn(ImmutableMap.of(0,10L,1,20L,2,30L));
  taskRunner.registerListener(anyObject(TaskRunnerListener.class),anyObject(Executor.class));
  replayAll();
  supervisor.start();
  supervisor.runInternal();
  verifyAll();
  reset(taskQueue,indexerMetadataStorageCoordinator);
  expect(indexerMetadataStorageCoordinator.deleteDataSourceMetadata(DATASOURCE)).andReturn(true);
  taskQueue.shutdown("id2");
  taskQueue.shutdown("id3");
  replay(taskQueue,indexerMetadataStorageCoordinator);
  supervisor.resetInternal();
  verifyAll();
}

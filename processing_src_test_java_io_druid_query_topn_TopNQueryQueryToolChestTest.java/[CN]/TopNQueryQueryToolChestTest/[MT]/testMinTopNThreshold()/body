{
  TopNQueryConfig config=new TopNQueryConfig();
  final TopNQueryQueryToolChest chest=new TopNQueryQueryToolChest(config,QueryRunnerTestHelper.NoopIntervalChunkingQueryRunnerDecorator());
  QueryRunnerFactory factory=new TopNQueryRunnerFactory(TestQueryRunners.getPool(),chest,QueryRunnerTestHelper.NOOP_QUERYWATCHER);
  QueryRunner<Result<TopNResultValue>> runner=QueryRunnerTestHelper.makeQueryRunner(factory,new IncrementalIndexSegment(TestIndex.getIncrementalTestIndex(),segmentId),null);
  Map<String,Object> context=Maps.newHashMap();
  context.put("minTopNThreshold",500);
  TopNQueryBuilder builder=new TopNQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).dimension(QueryRunnerTestHelper.placementishDimension).metric(QueryRunnerTestHelper.indexMetric).intervals(QueryRunnerTestHelper.fullOnInterval).aggregators(QueryRunnerTestHelper.commonAggregators);
  TopNQuery query1=builder.threshold(10).context(null).build();
  MockQueryRunner mockRunner=new MockQueryRunner(runner);
  new TopNQueryQueryToolChest.ThresholdAdjustingQueryRunner(mockRunner,config).run(query1,ImmutableMap.<String,Object>of());
  Assert.assertEquals(1000,mockRunner.query.getThreshold());
  TopNQuery query2=builder.threshold(10).context(context).build();
  new TopNQueryQueryToolChest.ThresholdAdjustingQueryRunner(mockRunner,config).run(query2,ImmutableMap.<String,Object>of());
  Assert.assertEquals(500,mockRunner.query.getThreshold());
  TopNQuery query3=builder.threshold(2000).context(context).build();
  new TopNQueryQueryToolChest.ThresholdAdjustingQueryRunner(mockRunner,config).run(query3,ImmutableMap.<String,Object>of());
  Assert.assertEquals(2000,mockRunner.query.getThreshold());
}

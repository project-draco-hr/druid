{
  stopping=true;
  for (  Map.Entry<Integer,ListeningExecutorService> entry : exec.entrySet()) {
    try {
      entry.getValue().shutdown();
    }
 catch (    SecurityException ex) {
      log.wtf(ex,"I can't control my own threads!");
    }
  }
  for (  ThreadPoolTaskRunnerWorkItem item : runningItems) {
    final Task task=item.getTask();
    final long start=System.currentTimeMillis();
    final boolean graceful;
    final long elapsed;
    boolean error=false;
    if (taskConfig.isRestoreTasksOnRestart() && task.canRestore()) {
      graceful=true;
      log.info("Starting graceful shutdown of task[%s].",task.getId());
      try {
        task.stopGracefully();
        final TaskStatus taskStatus=item.getResult().get(new Interval(new DateTime(start),taskConfig.getGracefulShutdownTimeout()).toDurationMillis(),TimeUnit.MILLISECONDS);
        log.info("Graceful shutdown of task[%s] finished in %,dms.",task.getId(),System.currentTimeMillis() - start);
      }
 catch (      Exception e) {
        log.makeAlert(e,"Graceful task shutdown failed: %s",task.getDataSource()).addData("taskId",task.getId()).addData("dataSource",task.getDataSource()).emit();
        log.warn(e,"Graceful shutdown of task[%s] aborted with exception.",task.getId());
        error=true;
      }
    }
 else {
      graceful=false;
    }
    elapsed=System.currentTimeMillis() - start;
    final ServiceMetricEvent.Builder metricBuilder=ServiceMetricEvent.builder().setDimension("task",task.getId()).setDimension("dataSource",task.getDataSource()).setDimension("graceful",String.valueOf(graceful)).setDimension("error",String.valueOf(error));
    emitter.emit(metricBuilder.build("task/interrupt/count",1L));
    emitter.emit(metricBuilder.build("task/interrupt/elapsed",elapsed));
  }
  for (  Map.Entry<Integer,ListeningExecutorService> entry : exec.entrySet()) {
    try {
      entry.getValue().shutdownNow();
    }
 catch (    SecurityException ex) {
      log.wtf(ex,"I can't control my own threads!");
    }
  }
}

{
  final TaskToolbox toolbox=toolboxFactory.build(task);
  final Object taskPriorityObj=task.getContextValue(TaskThreadPriority.CONTEXT_KEY);
  int taskPriority=0;
  if (taskPriorityObj != null) {
    if (taskPriorityObj instanceof Number) {
      taskPriority=((Number)taskPriorityObj).intValue();
    }
 else     if (taskPriorityObj instanceof String) {
      try {
        taskPriority=Integer.parseInt(taskPriorityObj.toString());
      }
 catch (      NumberFormatException e) {
        log.error(e,"Error parsing task priority [%s] for task [%s]",taskPriorityObj,task.getId());
      }
    }
  }
  if (!exec.containsKey(taskPriority)) {
    final ListeningExecutorService executorService=buildExecutorService(taskPriority);
    if (exec.putIfAbsent(taskPriority,executorService) != null) {
      executorService.shutdownNow();
    }
  }
  final ListenableFuture<TaskStatus> statusFuture=exec.get(taskPriority).submit(new ThreadPoolTaskRunnerCallable(task,location,toolbox));
  final ThreadPoolTaskRunnerWorkItem taskRunnerWorkItem=new ThreadPoolTaskRunnerWorkItem(task,location,statusFuture);
  runningItems.add(taskRunnerWorkItem);
  Futures.addCallback(statusFuture,new FutureCallback<TaskStatus>(){
    @Override public void onSuccess(    TaskStatus result){
      runningItems.remove(taskRunnerWorkItem);
    }
    @Override public void onFailure(    Throwable t){
      runningItems.remove(taskRunnerWorkItem);
    }
  }
);
  return statusFuture;
}

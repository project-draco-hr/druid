{
  curator.start();
  curator.create().forPath("/somewhere");
  Announcer announcer=new Announcer(curator,exec);
  final byte[] billy="billy".getBytes();
  final String testPath1="/test1";
  final String testPath2="/somewhere/test2";
  announcer.announce(testPath1,billy);
  Assert.assertNull(curator.checkExists().forPath(testPath1));
  Assert.assertNull(curator.checkExists().forPath(testPath2));
  announcer.start();
  Assert.assertArrayEquals(billy,curator.getData().decompressed().forPath(testPath1));
  Assert.assertNull(curator.checkExists().forPath(testPath2));
  announcer.announce(testPath2,billy);
  Assert.assertArrayEquals(billy,curator.getData().decompressed().forPath(testPath1));
  Assert.assertArrayEquals(billy,curator.getData().decompressed().forPath(testPath2));
  final CountDownLatch latch=new CountDownLatch(1);
  curator.getCuratorListenable().addListener(new CuratorListener(){
    @Override public void eventReceived(    CuratorFramework client,    CuratorEvent event) throws Exception {
      if (event.getType() == CuratorEventType.CREATE && event.getPath().equals(testPath1)) {
        latch.countDown();
      }
    }
  }
);
  curator.delete().forPath(testPath1);
  Assert.assertTrue(timing.awaitLatch(latch));
  Assert.assertArrayEquals(billy,curator.getData().decompressed().forPath(testPath1));
  Assert.assertArrayEquals(billy,curator.getData().decompressed().forPath(testPath2));
  announcer.unannounce(testPath1);
  Assert.assertNull(curator.checkExists().forPath(testPath1));
  Assert.assertArrayEquals(billy,curator.getData().decompressed().forPath(testPath2));
  announcer.stop();
  Assert.assertNull(curator.checkExists().forPath(testPath1));
  Assert.assertNull(curator.checkExists().forPath(testPath2));
}

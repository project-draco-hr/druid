{
  final Task indexTask=new IndexTask(null,null,new IndexTask.IndexIngestionSpec(new DataSchema("foo",null,new AggregatorFactory[]{new DoubleSumAggregatorFactory("met","met")},new UniformGranularitySpec(Granularity.DAY,null,ImmutableList.of(new Interval("2010-01-01/P2D"))),mapper),new IndexTask.IndexIOConfig(new MockFirehoseFactory(false)),new IndexTask.IndexTuningConfig(10000,10,-1,indexSpec,null)),mapper,null);
  final long startTime=System.currentTimeMillis();
  tq.start();
  ts.insert(indexTask,TaskStatus.running(indexTask.getId()));
  while (tsqa.getStatus(indexTask.getId()).get().isRunnable()) {
    if (System.currentTimeMillis() > startTime + 10 * 1000) {
      throw new ISE("Where did the task go?!: %s",indexTask.getId());
    }
    Thread.sleep(100);
  }
  final TaskStatus status=ts.getStatus(indexTask.getId()).get();
  final List<DataSegment> publishedSegments=byIntervalOrdering.sortedCopy(mdc.getPublished());
  final List<DataSegment> loggedSegments=byIntervalOrdering.sortedCopy(tsqa.getInsertedSegments(indexTask.getId()));
  Assert.assertEquals("statusCode",TaskStatus.Status.SUCCESS,status.getStatusCode());
  Assert.assertEquals("segments logged vs published",loggedSegments,publishedSegments);
  Assert.assertEquals("num segments published",2,mdc.getPublished().size());
  Assert.assertEquals("num segments nuked",0,mdc.getNuked().size());
  Assert.assertEquals("segment1 datasource","foo",publishedSegments.get(0).getDataSource());
  Assert.assertEquals("segment1 interval",new Interval("2010-01-01/P1D"),publishedSegments.get(0).getInterval());
  Assert.assertEquals("segment1 dimensions",ImmutableList.of("dim1","dim2"),publishedSegments.get(0).getDimensions());
  Assert.assertEquals("segment1 metrics",ImmutableList.of("met"),publishedSegments.get(0).getMetrics());
  Assert.assertEquals("segment2 datasource","foo",publishedSegments.get(1).getDataSource());
  Assert.assertEquals("segment2 interval",new Interval("2010-01-02/P1D"),publishedSegments.get(1).getInterval());
  Assert.assertEquals("segment2 dimensions",ImmutableList.of("dim1","dim2"),publishedSegments.get(1).getDimensions());
  Assert.assertEquals("segment2 metrics",ImmutableList.of("met"),publishedSegments.get(1).getMetrics());
}

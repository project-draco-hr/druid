{
  publishCountDown=new CountDownLatch(1);
  monitorScheduler.addMonitor(EasyMock.anyObject(Monitor.class));
  EasyMock.expectLastCall().atLeastOnce();
  monitorScheduler.removeMonitor(EasyMock.anyObject(Monitor.class));
  EasyMock.expectLastCall().anyTimes();
  EasyMock.replay(monitorScheduler,queryRunnerFactoryConglomerate);
  RealtimeIndexTask realtimeIndexTask=newRealtimeIndexTask();
  final String taskId=realtimeIndexTask.getId();
  taskQueue.start();
  taskQueue.add(realtimeIndexTask);
  publishCountDown.await();
  Assert.assertEquals(1,handOffCallbacks.size());
  Pair<Executor,Runnable> executorRunnablePair=Iterables.getOnlyElement(handOffCallbacks.values());
  executorRunnablePair.lhs.execute(executorRunnablePair.rhs);
  handOffCallbacks.clear();
  while (tsqa.getStatus(taskId).get().isRunnable()) {
    Thread.sleep(10);
  }
  Assert.assertTrue("Task should be in Success state",tsqa.getStatus(taskId).get().isSuccess());
  Assert.assertEquals(1,announcedSinks);
  Assert.assertEquals(1,pushedSegments);
  Assert.assertEquals(1,mdc.getPublished().size());
  DataSegment segment=mdc.getPublished().iterator().next();
  Assert.assertEquals("test_ds",segment.getDataSource());
  Assert.assertEquals(ImmutableList.of("dim1","dim2"),segment.getDimensions());
  Assert.assertEquals(new Interval(now.toString("YYYY-MM-dd") + "/" + now.plusDays(1).toString("YYYY-MM-dd")),segment.getInterval());
  Assert.assertEquals(ImmutableList.of("count"),segment.getMetrics());
  EasyMock.verify(monitorScheduler,queryRunnerFactoryConglomerate);
}

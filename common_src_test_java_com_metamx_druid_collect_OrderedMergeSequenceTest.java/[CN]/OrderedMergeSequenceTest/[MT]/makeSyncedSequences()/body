{
  final boolean[] done=new boolean[]{false,false};
  final ArrayList<Sequence<Integer>> sequences=Lists.newArrayList();
  sequences.add(new BaseSequence<Integer,Iterator<Integer>>(new BaseSequence.IteratorMaker<Integer,Iterator<Integer>>(){
    @Override public Iterator<Integer> make(){
      return Arrays.asList(1,2,3).iterator();
    }
    @Override public void cleanup(    Iterator<Integer> iterFromMake){
      done[0]=true;
    }
  }
));
  sequences.add(new BaseSequence<Integer,Iterator<Integer>>(new BaseSequence.IteratorMaker<Integer,Iterator<Integer>>(){
    @Override public Iterator<Integer> make(){
      return new IteratorShell<Integer>(Arrays.asList(4,5,6).iterator()){
        int count=0;
        @Override public boolean hasNext(){
          if (count >= 1) {
            Assert.assertTrue("First iterator not complete",done[0]);
          }
          return super.hasNext();
        }
        @Override public Integer next(){
          if (count >= 1) {
            Assert.assertTrue("First iterator not complete",done[0]);
          }
          ++count;
          return super.next();
        }
      }
;
    }
    @Override public void cleanup(    Iterator<Integer> iterFromMake){
      done[1]=true;
    }
  }
));
  sequences.add(new BaseSequence<Integer,Iterator<Integer>>(new BaseSequence.IteratorMaker<Integer,Iterator<Integer>>(){
    @Override public Iterator<Integer> make(){
      return new IteratorShell<Integer>(Arrays.asList(7,8,9).iterator()){
        int count=0;
        @Override public boolean hasNext(){
          if (count >= 1) {
            Assert.assertTrue("Second iterator not complete",done[1]);
          }
          Assert.assertTrue("First iterator not complete",done[0]);
          return super.hasNext();
        }
        @Override public Integer next(){
          if (count >= 1) {
            Assert.assertTrue("Second iterator not complete",done[1]);
          }
          Assert.assertTrue("First iterator not complete",done[0]);
          ++count;
          return super.next();
        }
      }
;
    }
    @Override public void cleanup(    Iterator<Integer> iterFromMake){
    }
  }
));
  return sequences;
}

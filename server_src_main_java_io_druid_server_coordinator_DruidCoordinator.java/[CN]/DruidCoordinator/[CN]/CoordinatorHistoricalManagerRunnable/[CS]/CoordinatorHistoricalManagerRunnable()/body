{
  super(ImmutableList.of(new DruidCoordinatorSegmentInfoLoader(DruidCoordinator.this),new DruidCoordinatorHelper(){
    @Override public DruidCoordinatorRuntimeParams run(    DruidCoordinatorRuntimeParams params){
      Iterable<DruidServer> servers=FunctionalIterable.create(serverInventoryView.getInventory()).filter(new Predicate<DruidServer>(){
        @Override public boolean apply(        DruidServer input){
          return input.getType().equalsIgnoreCase("historical");
        }
      }
);
      if (log.isDebugEnabled()) {
        log.debug("Servers");
        for (        DruidServer druidServer : servers) {
          log.debug("  %s",druidServer);
          log.debug("    -- DataSources");
          for (          DruidDataSource druidDataSource : druidServer.getDataSources()) {
            log.debug("    %s",druidDataSource);
          }
        }
      }
      final DruidCluster cluster=new DruidCluster();
      for (      DruidServer server : servers) {
        if (!loadManagementPeons.containsKey(server.getName())) {
          String basePath=ZKPaths.makePath(zkPaths.getLoadQueuePath(),server.getName());
          LoadQueuePeon loadQueuePeon=taskMaster.giveMePeon(basePath);
          log.info("Creating LoadQueuePeon for server[%s] at path[%s]",server.getName(),basePath);
          loadManagementPeons.put(server.getName(),loadQueuePeon);
        }
        cluster.add(new ServerHolder(server,loadManagementPeons.get(server.getName())));
      }
      SegmentReplicantLookup segmentReplicantLookup=SegmentReplicantLookup.make(cluster);
      final Set<String> disappeared=Sets.newHashSet(loadManagementPeons.keySet());
      for (      DruidServer server : servers) {
        disappeared.remove(server.getName());
      }
      for (      String name : disappeared) {
        log.info("Removing listener for server[%s] which is no longer there.",name);
        LoadQueuePeon peon=loadManagementPeons.remove(name);
        peon.stop();
      }
      return params.buildFromExisting().withDruidCluster(cluster).withDatabaseRuleManager(databaseRuleManager).withLoadManagementPeons(loadManagementPeons).withSegmentReplicantLookup(segmentReplicantLookup).withBalancerReferenceTimestamp(DateTime.now()).withDynamicConfigs(dynamicConfigs.get()).build();
    }
  }
,new DruidCoordinatorRuleRunner(DruidCoordinator.this),new DruidCoordinatorCleanup(DruidCoordinator.this),new DruidCoordinatorBalancer(DruidCoordinator.this),new DruidCoordinatorLogger()));
}

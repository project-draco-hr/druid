{
  try {
    final DataSegment segment=fromServer.getSegment(segmentName);
    if (segment == null) {
      throw new IAE("Unable to find segment [%s] on server [%s]",segmentName,fromServer.getName());
    }
    final LoadQueuePeon loadPeon=loadManagementPeons.get(toServer.getName());
    if (loadPeon == null) {
      throw new IAE("LoadQueuePeon hasn't been created yet for path [%s]",toServer.getName());
    }
    final LoadQueuePeon dropPeon=loadManagementPeons.get(fromServer.getName());
    if (dropPeon == null) {
      throw new IAE("LoadQueuePeon hasn't been created yet for path [%s]",fromServer.getName());
    }
    final ServerHolder toHolder=new ServerHolder(toServer,loadPeon);
    if (toHolder.getAvailableSize() < segment.getSize()) {
      throw new IAE("Not enough capacity on server [%s] for segment [%s]. Required: %,d, available: %,d.",toServer.getName(),segment,segment.getSize(),toHolder.getAvailableSize());
    }
    final String toLoadQueueSegPath=ZKPaths.makePath(ZKPaths.makePath(zkPaths.getLoadQueuePath(),toServer.getName()),segmentName);
    final String toServedSegPath=ZKPaths.makePath(ZKPaths.makePath(serverInventoryView.getInventoryManagerConfig().getInventoryPath(),toServer.getName()),segmentName);
    loadPeon.loadSegment(segment,new LoadPeonCallback(){
      @Override public void execute(){
        try {
          if (curator.checkExists().forPath(toServedSegPath) != null && curator.checkExists().forPath(toLoadQueueSegPath) == null && !dropPeon.getSegmentsToDrop().contains(segment)) {
            dropPeon.dropSegment(segment,callback);
          }
 else           if (callback != null) {
            callback.execute();
          }
        }
 catch (        Exception e) {
          throw Throwables.propagate(e);
        }
      }
    }
);
  }
 catch (  Exception e) {
    log.makeAlert(e,"Exception moving segment %s",segmentName).emit();
    if (callback != null) {
      callback.execute();
    }
  }
}

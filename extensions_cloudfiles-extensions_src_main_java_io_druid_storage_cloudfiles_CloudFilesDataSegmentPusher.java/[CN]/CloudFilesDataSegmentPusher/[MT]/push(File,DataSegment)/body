{
  final String segmentPath=CloudFilesUtils.buildCloudFilesPath(this.config.getBasePath(),inSegment);
  final File descriptorFile=File.createTempFile("descriptor",".json");
  final File zipOutFile=File.createTempFile("druid","index.zip");
  final long indexSize=CompressionUtils.zip(indexFilesDir,zipOutFile);
  log.info("Copying segment[%s] to CloudFiles at location[%s]",inSegment.getIdentifier(),segmentPath);
  try {
    return CloudFilesUtils.retryCloudFilesOperation(new Callable<DataSegment>(){
      @Override public DataSegment call() throws Exception {
        CloudFilesObject segmentData=new CloudFilesObject(segmentPath,zipOutFile,objectApi.getRegion(),objectApi.getContainer());
        log.info("Pushing %s.",segmentData.getPath());
        objectApi.put(segmentData);
        try (FileOutputStream stream=new FileOutputStream(descriptorFile)){
          stream.write(jsonMapper.writeValueAsBytes(inSegment));
        }
         CloudFilesObject descriptorData=new CloudFilesObject(segmentPath,descriptorFile,objectApi.getRegion(),objectApi.getContainer());
        log.info("Pushing %s.",descriptorData.getPath());
        objectApi.put(descriptorData);
        final DataSegment outSegment=inSegment.withSize(indexSize).withLoadSpec(ImmutableMap.<String,Object>of("type",CloudFilesStorageDruidModule.SCHEME,"region",segmentData.getRegion(),"container",segmentData.getContainer(),"path",segmentData.getPath())).withBinaryVersion(SegmentUtils.getVersionFromDir(indexFilesDir));
        return outSegment;
      }
    }
,this.config.getOperationMaxRetries());
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
 finally {
    log.info("Deleting zipped index File[%s]",zipOutFile);
    zipOutFile.delete();
    log.info("Deleting descriptor file[%s]",descriptorFile);
    descriptorFile.delete();
  }
}

{
  byte[] dimensionBytes=StringUtils.toUtf8(this.getDimension());
  byte[] lowerBytes=this.getLower() == null ? new byte[0] : StringUtils.toUtf8(this.getLower());
  byte[] upperBytes=this.getUpper() == null ? new byte[0] : StringUtils.toUtf8(this.getUpper());
  byte boundType=0x1;
  if (this.getLower() == null) {
    boundType=0x2;
  }
 else   if (this.getUpper() == null) {
    boundType=0x3;
  }
  byte lowerStrictByte=(this.isLowerStrict() == false) ? 0x0 : (byte)1;
  byte upperStrictByte=(this.isUpperStrict() == false) ? 0x0 : (byte)1;
  byte AlphaNumericByte=(this.isAlphaNumeric() == false) ? 0x0 : (byte)1;
  ByteBuffer boundCacheBuffer=ByteBuffer.allocate(8 + dimensionBytes.length + upperBytes.length+ lowerBytes.length);
  boundCacheBuffer.put(DimFilterCacheHelper.BOUND_CACHE_ID).put(boundType).put(upperStrictByte).put(lowerStrictByte).put(AlphaNumericByte).put(DimFilterCacheHelper.STRING_SEPARATOR).put(dimensionBytes).put(DimFilterCacheHelper.STRING_SEPARATOR).put(upperBytes).put(DimFilterCacheHelper.STRING_SEPARATOR).put(lowerBytes);
  return boundCacheBuffer.array();
}

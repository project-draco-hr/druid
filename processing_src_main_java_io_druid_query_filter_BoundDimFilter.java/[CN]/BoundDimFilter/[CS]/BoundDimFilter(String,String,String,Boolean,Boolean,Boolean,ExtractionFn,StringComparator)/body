{
  this.dimension=Preconditions.checkNotNull(dimension,"dimension can not be null");
  Preconditions.checkState((lower != null) || (upper != null),"lower and upper can not be null at the same time");
  this.upper=upper;
  this.lower=lower;
  this.lowerStrict=(lowerStrict == null) ? false : lowerStrict;
  this.upperStrict=(upperStrict == null) ? false : upperStrict;
  if (ordering == null) {
    if (alphaNumeric == null || !alphaNumeric) {
      this.ordering=StringComparators.LEXICOGRAPHIC;
    }
 else {
      this.ordering=StringComparators.ALPHANUMERIC;
    }
  }
 else {
    this.ordering=ordering;
    if (alphaNumeric != null) {
      boolean orderingIsAlphanumeric=this.ordering.equals(StringComparators.ALPHANUMERIC);
      Preconditions.checkState(alphaNumeric == orderingIsAlphanumeric,"mismatch between alphanumeric and ordering property");
    }
  }
  this.extractionFn=extractionFn;
  this.longPredicateSupplier=makeLongPredicateSupplier();
}

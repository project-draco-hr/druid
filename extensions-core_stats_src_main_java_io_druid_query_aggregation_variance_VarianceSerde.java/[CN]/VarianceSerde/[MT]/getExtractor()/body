{
  return new ComplexMetricExtractor(){
    @Override public Class<VarianceAggregatorCollector> extractedClass(){
      return VarianceAggregatorCollector.class;
    }
    @Override public VarianceAggregatorCollector extractValue(    InputRow inputRow,    String metricName){
      Object rawValue=inputRow.getRaw(metricName);
      if (rawValue instanceof VarianceAggregatorCollector) {
        return (VarianceAggregatorCollector)rawValue;
      }
      VarianceAggregatorCollector collector=new VarianceAggregatorCollector();
      List<String> dimValues=inputRow.getDimension(metricName);
      if (dimValues != null && dimValues.size() > 0) {
        for (        String dimValue : dimValues) {
          float value=Float.parseFloat(dimValue);
          collector.add(value);
        }
      }
      return collector;
    }
  }
;
}

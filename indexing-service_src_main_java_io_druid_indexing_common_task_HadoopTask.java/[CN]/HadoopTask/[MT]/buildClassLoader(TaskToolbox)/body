{
  final List<String> finalHadoopDependencyCoordinates=hadoopDependencyCoordinates != null ? hadoopDependencyCoordinates : toolbox.getConfig().getDefaultHadoopCoordinates();
  final List<URL> extensionURLs=Lists.newArrayList();
  for (  final File extension : Initialization.getExtensionFilesToLoad(extensionsConfig)) {
    final ClassLoader extensionLoader=Initialization.getClassLoaderForExtension(extension);
    extensionURLs.addAll(Arrays.asList(((URLClassLoader)extensionLoader).getURLs()));
  }
  final List<URL> nonHadoopURLs=Lists.newArrayList();
  nonHadoopURLs.addAll(Arrays.asList(((URLClassLoader)HadoopIndexTask.class.getClassLoader()).getURLs()));
  final List<URL> driverURLs=Lists.newArrayList();
  driverURLs.addAll(nonHadoopURLs);
  for (  final File hadoopDependency : Initialization.getHadoopDependencyFilesToLoad(finalHadoopDependencyCoordinates,extensionsConfig)) {
    final ClassLoader hadoopLoader=Initialization.getClassLoaderForExtension(hadoopDependency);
    driverURLs.addAll(Arrays.asList(((URLClassLoader)hadoopLoader).getURLs()));
  }
  final URLClassLoader loader=new URLClassLoader(driverURLs.toArray(new URL[driverURLs.size()]),null);
  final List<URL> jobUrls=Lists.newArrayList();
  jobUrls.addAll(nonHadoopURLs);
  jobUrls.addAll(extensionURLs);
  System.setProperty("druid.hadoop.internal.classpath",Joiner.on(File.pathSeparator).join(jobUrls));
  return loader;
}

{
  final List<String> finalHadoopDependencyCoordinates=hadoopDependencyCoordinates != null ? hadoopDependencyCoordinates : toolbox.getConfig().getDefaultHadoopCoordinates();
  final List<URL> jobURLs=Lists.newArrayList(Arrays.asList(((URLClassLoader)HadoopIndexTask.class.getClassLoader()).getURLs()));
  for (  final File extension : Initialization.getExtensionFilesToLoad(extensionsConfig)) {
    final ClassLoader extensionLoader=Initialization.getClassLoaderForExtension(extension);
    jobURLs.addAll(Arrays.asList(((URLClassLoader)extensionLoader).getURLs()));
  }
  final List<URL> localClassLoaderURLs=new ArrayList<>(jobURLs);
  for (  final File hadoopDependency : Initialization.getHadoopDependencyFilesToLoad(finalHadoopDependencyCoordinates,extensionsConfig)) {
    final ClassLoader hadoopLoader=Initialization.getClassLoaderForExtension(hadoopDependency);
    localClassLoaderURLs.addAll(Arrays.asList(((URLClassLoader)hadoopLoader).getURLs()));
  }
  final ClassLoader classLoader=new URLClassLoader(localClassLoaderURLs.toArray(new URL[localClassLoaderURLs.size()]),null);
  final String hadoopContainerDruidClasspathJars;
  if (extensionsConfig.getHadoopContainerDruidClasspath() == null) {
    hadoopContainerDruidClasspathJars=Joiner.on(File.pathSeparator).join(jobURLs);
  }
 else {
    hadoopContainerDruidClasspathJars=Joiner.on(File.pathSeparator).join(Initialization.getURLsForClasspath(extensionsConfig.getHadoopContainerDruidClasspath()));
  }
  log.info("Hadoop Container Druid Classpath is set to [%s]",hadoopContainerDruidClasspathJars);
  System.setProperty("druid.hadoop.internal.classpath",hadoopContainerDruidClasspathJars);
  return classLoader;
}

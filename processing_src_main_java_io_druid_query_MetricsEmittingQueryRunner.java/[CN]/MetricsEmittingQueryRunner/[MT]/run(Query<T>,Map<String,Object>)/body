{
  final ServiceMetricEvent.Builder builder=builderFn.apply(query);
  for (  Map.Entry<String,String> userDimension : userDimensions.entrySet()) {
    builder.setDimension(userDimension.getKey(),userDimension.getValue());
  }
  return new Sequence<T>(){
    @Override public <OutType>OutType accumulate(    OutType outType,    Accumulator<OutType,T> accumulator){
      OutType retVal;
      long startTime=System.currentTimeMillis();
      try {
        retVal=queryRunner.run(query,responseContext).accumulate(outType,accumulator);
      }
 catch (      RuntimeException e) {
        builder.setDimension(DruidMetrics.STATUS,"failed");
        throw e;
      }
catch (      Error e) {
        builder.setDimension(DruidMetrics.STATUS,"failed");
        throw e;
      }
 finally {
        long timeTaken=System.currentTimeMillis() - startTime;
        emitter.emit(builder.build(metricName,timeTaken));
        if (creationTime > 0) {
          emitter.emit(builder.build("query/wait/time",startTime - creationTime));
        }
      }
      return retVal;
    }
    @Override public <OutType>Yielder<OutType> toYielder(    OutType initValue,    YieldingAccumulator<OutType,T> accumulator){
      Yielder<OutType> retVal;
      long startTime=System.currentTimeMillis();
      try {
        retVal=queryRunner.run(query,responseContext).toYielder(initValue,accumulator);
      }
 catch (      RuntimeException e) {
        builder.setDimension(DruidMetrics.STATUS,"failed");
        throw e;
      }
catch (      Error e) {
        builder.setDimension(DruidMetrics.STATUS,"failed");
        throw e;
      }
      return makeYielder(startTime,retVal,builder);
    }
    private <OutType>Yielder<OutType> makeYielder(    final long startTime,    final Yielder<OutType> yielder,    final ServiceMetricEvent.Builder builder){
      return new Yielder<OutType>(){
        @Override public OutType get(){
          return yielder.get();
        }
        @Override public Yielder<OutType> next(        OutType initValue){
          try {
            return makeYielder(startTime,yielder.next(initValue),builder);
          }
 catch (          RuntimeException e) {
            builder.setDimension(DruidMetrics.STATUS,"failed");
            throw e;
          }
catch (          Error e) {
            builder.setDimension(DruidMetrics.STATUS,"failed");
            throw e;
          }
        }
        @Override public boolean isDone(){
          return yielder.isDone();
        }
        @Override public void close() throws IOException {
          try {
            if (!isDone() && builder.getDimension(DruidMetrics.STATUS) == null) {
              builder.setDimension(DruidMetrics.STATUS,"short");
            }
            long timeTaken=System.currentTimeMillis() - startTime;
            emitter.emit(builder.build(metricName,timeTaken));
            if (creationTime > 0) {
              emitter.emit(builder.build("query/wait/time",startTime - creationTime));
            }
          }
  finally {
            yielder.close();
          }
        }
      }
;
    }
  }
;
}

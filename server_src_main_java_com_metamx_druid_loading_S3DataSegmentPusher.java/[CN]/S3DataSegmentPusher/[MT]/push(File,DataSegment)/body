{
  log.info("Uploading [%s] to S3",indexFilesDir);
  String outputKey=JOINER.join(config.getBaseKey().isEmpty() ? null : config.getBaseKey(),DataSegmentPusherUtil.getStorageDir(segment));
  final File zipOutFile=File.createTempFile("druid","index.zip");
  long indexSize=CompressionUtils.zip(indexFilesDir,zipOutFile);
  try {
    S3Object toPush=new S3Object(zipOutFile);
    final String outputBucket=config.getBucket();
    toPush.setBucketName(outputBucket);
    toPush.setKey(outputKey + "/index.zip");
    if (!config.getDisableAcl()) {
      toPush.setAcl(GSAccessControlList.REST_CANNED_BUCKET_OWNER_FULL_CONTROL);
    }
    log.info("Pushing %s.",toPush);
    s3Client.putObject(outputBucket,toPush);
    segment=segment.withSize(indexSize).withLoadSpec(ImmutableMap.<String,Object>of("type","s3_zip","bucket",outputBucket,"key",toPush.getKey())).withBinaryVersion(IndexIO.getVersionFromDir(indexFilesDir));
    File descriptorFile=File.createTempFile("druid","descriptor.json");
    Files.copy(ByteStreams.newInputStreamSupplier(jsonMapper.writeValueAsBytes(segment)),descriptorFile);
    S3Object descriptorObject=new S3Object(descriptorFile);
    descriptorObject.setBucketName(outputBucket);
    descriptorObject.setKey(outputKey + "/descriptor.json");
    if (!config.getDisableAcl()) {
      descriptorObject.setAcl(GSAccessControlList.REST_CANNED_BUCKET_OWNER_FULL_CONTROL);
    }
    log.info("Pushing %s",descriptorObject);
    s3Client.putObject(outputBucket,descriptorObject);
    log.info("Deleting zipped index File[%s]",zipOutFile);
    zipOutFile.delete();
    log.info("Deleting descriptor file[%s]",descriptorFile);
    descriptorFile.delete();
    return segment;
  }
 catch (  NoSuchAlgorithmException e) {
    throw new IOException(e);
  }
catch (  S3ServiceException e) {
    throw new IOException(e);
  }
}

{
  try {
    Job job=Job.getInstance(new Configuration(),String.format("%s-index-generator-%s",config.getDataSource(),config.getIntervals()));
    job.getConfiguration().set("io.sort.record.percent","0.23");
    JobHelper.injectSystemProperties(job);
    JobHelper.setInputFormat(job,config);
    job.setMapperClass(IndexGeneratorMapper.class);
    job.setMapOutputValueClass(BytesWritable.class);
    SortableBytes.useSortableBytesAsMapOutputKey(job);
    int numReducers=Iterables.size(config.getAllBuckets().get());
    if (numReducers == 0) {
      throw new RuntimeException("No buckets?? seems there is no data to index.");
    }
    job.setNumReduceTasks(numReducers);
    job.setPartitionerClass(IndexGeneratorPartitioner.class);
    setReducerClass(job);
    job.setOutputKeyClass(BytesWritable.class);
    job.setOutputValueClass(Text.class);
    job.setOutputFormatClass(IndexGeneratorOutputFormat.class);
    FileOutputFormat.setOutputPath(job,config.makeIntermediatePath());
    config.addJobProperties(job);
    config.addInputPaths(job);
    final String bitmapProperty="druid.processing.bitmap.type";
    final String bitmapType=HadoopDruidIndexerConfig.properties.getProperty(bitmapProperty);
    if (bitmapType != null) {
      for (      String property : new String[]{"mapreduce.reduce.java.opts","mapreduce.map.java.opts"}) {
        String value=Strings.nullToEmpty(job.getConfiguration().get(property));
        job.getConfiguration().set(property,String.format("-D%s=%s %s",bitmapProperty,bitmapType,value));
      }
    }
    config.intoConfiguration(job);
    JobHelper.setupClasspath(JobHelper.distributedClassPath(config.getWorkingPath()),job);
    job.submit();
    log.info("Job %s submitted, status available at %s",job.getJobName(),job.getTrackingURL());
    boolean success=job.waitForCompletion(true);
    Counter invalidRowCount=job.getCounters().findCounter(HadoopDruidIndexerConfig.IndexJobCounters.INVALID_ROW_COUNTER);
    jobStats.setInvalidRowCount(invalidRowCount.getValue());
    return success;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}

{
  if (toBeMerged == null || toBeMerged.size() == 0) {
    return null;
  }
  boolean foundSomeMetadata=false;
  Map<String,Object> mergedContainer=new HashMap<>();
  List<AggregatorFactory[]> aggregatorsToMerge=overrideMergedAggregators == null ? new ArrayList<AggregatorFactory[]>() : null;
  List<TimestampSpec> timestampSpecsToMerge=new ArrayList<>();
  List<QueryGranularity> gransToMerge=new ArrayList<>();
  List<Boolean> rollupToMerge=new ArrayList<>();
  for (  Metadata metadata : toBeMerged) {
    if (metadata != null) {
      foundSomeMetadata=true;
      if (aggregatorsToMerge != null) {
        aggregatorsToMerge.add(metadata.getAggregators());
      }
      if (timestampSpecsToMerge != null && metadata.getTimestampSpec() != null) {
        timestampSpecsToMerge.add(metadata.getTimestampSpec());
      }
      if (gransToMerge != null) {
        gransToMerge.add(metadata.getQueryGranularity());
      }
      if (rollupToMerge != null) {
        rollupToMerge.add(metadata.isRollup());
      }
      mergedContainer.putAll(metadata.container);
    }
 else {
      aggregatorsToMerge=null;
      timestampSpecsToMerge=null;
      gransToMerge=null;
      rollupToMerge=null;
    }
  }
  if (!foundSomeMetadata) {
    return null;
  }
  Metadata result=new Metadata();
  if (aggregatorsToMerge != null) {
    result.setAggregators(AggregatorFactory.mergeAggregators(aggregatorsToMerge));
  }
 else {
    result.setAggregators(overrideMergedAggregators);
  }
  if (timestampSpecsToMerge != null) {
    result.setTimestampSpec(TimestampSpec.mergeTimestampSpec(timestampSpecsToMerge));
  }
  if (gransToMerge != null) {
    result.setQueryGranularity(QueryGranularity.mergeQueryGranularities(gransToMerge));
  }
  Boolean rollup=null;
  if (rollupToMerge != null && !rollupToMerge.isEmpty()) {
    rollup=rollupToMerge.get(0);
    for (    Boolean r : rollupToMerge) {
      if (r == null) {
        rollup=null;
        break;
      }
 else       if (!r.equals(rollup)) {
        rollup=null;
        break;
      }
 else {
        rollup=r;
      }
    }
  }
  result.setRollup(rollup);
  result.container.putAll(mergedContainer);
  return result;
}

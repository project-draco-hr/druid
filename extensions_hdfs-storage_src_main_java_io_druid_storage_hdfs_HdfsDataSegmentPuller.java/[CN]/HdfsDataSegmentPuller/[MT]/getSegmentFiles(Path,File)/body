{
  final LocalFileSystem localFileSystem=new LocalFileSystem();
  try {
    final FileSystem fs=path.getFileSystem(config);
    if (fs.isDirectory(path)) {
      try {
        return RetryUtils.retry(new Callable<FileUtils.FileCopyResult>(){
          @Override public FileUtils.FileCopyResult call() throws Exception {
            if (!fs.exists(path)) {
              throw new SegmentLoadingException("No files found at [%s]",path.toString());
            }
            final RemoteIterator<LocatedFileStatus> children=fs.listFiles(path,false);
            final ArrayList<FileUtils.FileCopyResult> localChildren=new ArrayList<>();
            final FileUtils.FileCopyResult result=new FileUtils.FileCopyResult();
            while (children.hasNext()) {
              final LocatedFileStatus child=children.next();
              final Path childPath=child.getPath();
              final String fname=childPath.getName();
              if (fs.isDirectory(childPath)) {
                log.warn("[%s] is a child directory, skipping",childPath.toString());
              }
 else {
                final File outFile=new File(outDir,fname);
                fs.copyToLocalFile(childPath,new Path(outFile.toURI()));
                result.addFile(outFile);
              }
            }
            log.info("Copied %d bytes from [%s] to [%s]",result.size(),path.toString(),outDir.getAbsolutePath());
            return result;
          }
        }
,shouldRetryPredicate(),DEFAULT_RETRY_COUNT);
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
    }
 else     if (CompressionUtils.isZip(path.getName())) {
      final FileUtils.FileCopyResult result=CompressionUtils.unzip(new ByteSource(){
        @Override public InputStream openStream() throws IOException {
          return getInputStream(path);
        }
      }
,outDir,shouldRetryPredicate(),false);
      log.info("Unzipped %d bytes from [%s] to [%s]",result.size(),path.toString(),outDir.getAbsolutePath());
      return result;
    }
 else     if (CompressionUtils.isGz(path.getName())) {
      final String fname=path.getName();
      final File outFile=new File(outDir,CompressionUtils.getGzBaseName(fname));
      final FileUtils.FileCopyResult result=CompressionUtils.gunzip(new ByteSource(){
        @Override public InputStream openStream() throws IOException {
          return getInputStream(path);
        }
      }
,outFile);
      log.info("Gunzipped %d bytes from [%s] to [%s]",result.size(),path.toString(),outFile.getAbsolutePath());
      return result;
    }
 else {
      throw new SegmentLoadingException("Do not know how to handle file type at [%s]",path.toString());
    }
  }
 catch (  IOException e) {
    throw new SegmentLoadingException(e,"Error loading [%s]",path.toString());
  }
}

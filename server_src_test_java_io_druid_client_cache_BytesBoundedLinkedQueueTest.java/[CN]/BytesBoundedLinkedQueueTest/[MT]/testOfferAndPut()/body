{
  final BlockingQueue<TestObject> q=getQueue(10);
  try {
    q.offer(null);
    Assert.fail();
  }
 catch (  NullPointerException success) {
  }
  final TestObject obj=new TestObject(2);
  while (q.remainingCapacity() > 0) {
    Assert.assertTrue(q.offer(obj,delayMS,TimeUnit.MILLISECONDS));
  }
  Assert.assertEquals(0,q.remainingCapacity());
  Assert.assertFalse(q.offer(obj,delayMS,TimeUnit.MILLISECONDS));
  Assert.assertFalse(q.offer(obj));
  final CyclicBarrier barrier=new CyclicBarrier(2);
  Future<Boolean> future=exec.submit(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      barrier.await();
      Assert.assertTrue(q.offer(obj,delayMS,TimeUnit.MILLISECONDS));
      Assert.assertEquals(q.remainingCapacity(),0);
      barrier.await();
      q.put(obj);
      return true;
    }
  }
);
  barrier.await();
  q.take();
  barrier.await();
  q.take();
  Assert.assertTrue(future.get());
}

{
  return new ComplexMetricExtractor(){
    @Override public Class<HyperLogLogCollector> extractedClass(){
      return HyperLogLogCollector.class;
    }
    @Override public HyperLogLogCollector extractValue(    InputRow inputRow,    String metricName){
      Object rawValue=inputRow.getRaw(metricName);
      if (rawValue instanceof HyperLogLogCollector) {
        return (HyperLogLogCollector)inputRow.getRaw(metricName);
      }
 else {
        HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();
        List<String> dimValues=inputRow.getDimension(metricName);
        if (dimValues == null) {
          return collector;
        }
        for (        String dimensionValue : dimValues) {
          collector.add(hashFn.hashBytes(dimensionValue == null ? NULL_BYTES : dimensionValue.getBytes(Charsets.UTF_8)).asBytes());
        }
        return collector;
      }
    }
  }
;
}

{
  Map<Integer,Long> startPartitions=taskGroups.get(groupId).partitionOffsets;
  Map<Integer,Long> endPartitions=new HashMap<>();
  for (  Integer partition : startPartitions.keySet()) {
    endPartitions.put(partition,Long.MAX_VALUE);
  }
  String sequenceName=generateSequenceName(groupId);
  Map<String,String> consumerProperties=Maps.newHashMap(ioConfig.getConsumerProperties());
  DateTime minimumMessageTime=taskGroups.get(groupId).minimumMessageTime.orNull();
  KafkaIOConfig kafkaIOConfig=new KafkaIOConfig(sequenceName,new KafkaPartitions(ioConfig.getTopic(),startPartitions),new KafkaPartitions(ioConfig.getTopic(),endPartitions),consumerProperties,true,false,minimumMessageTime);
  for (int i=0; i < replicas; i++) {
    String taskId=Joiner.on("_").join(sequenceName,getRandomId());
    KafkaIndexTask indexTask=new KafkaIndexTask(taskId,new TaskResource(sequenceName,1),spec.getDataSchema(),taskTuningConfig,kafkaIOConfig,ImmutableMap.<String,Object>of(),null);
    Optional<TaskQueue> taskQueue=taskMaster.getTaskQueue();
    if (taskQueue.isPresent()) {
      try {
        taskQueue.get().add(indexTask);
      }
 catch (      EntryExistsException e) {
        log.error("Tried to add task [%s] but it already exists",indexTask.getId());
      }
    }
 else {
      log.error("Failed to get task queue because I'm not the leader!");
    }
  }
}

{
  for (  Map.Entry<Integer,List<TaskGroup>> pendingGroupList : pendingCompletionTaskGroups.entrySet()) {
    boolean stopTasksInTaskGroup=false;
    Integer groupId=pendingGroupList.getKey();
    Iterator<TaskGroup> iTaskGroup=pendingGroupList.getValue().iterator();
    while (iTaskGroup.hasNext()) {
      boolean foundSuccess=false, entireTaskGroupFailed=false;
      TaskGroup group=iTaskGroup.next();
      if (stopTasksInTaskGroup) {
        stopTasksInGroup(group);
        iTaskGroup.remove();
        continue;
      }
      Iterator<Map.Entry<String,TaskData>> iTask=group.tasks.entrySet().iterator();
      while (iTask.hasNext()) {
        Map.Entry<String,TaskData> task=iTask.next();
        if (task.getValue().status.isFailure()) {
          iTask.remove();
          if (group.tasks.isEmpty()) {
            entireTaskGroupFailed=true;
            break;
          }
        }
        if (task.getValue().status.isSuccess()) {
          log.info("Task [%s] completed successfully, stopping tasks %s",task.getKey(),group.tasks.keySet());
          stopTasksInGroup(group);
          foundSuccess=true;
          iTaskGroup.remove();
          break;
        }
      }
      if ((!foundSuccess && group.completionTimeout.isBeforeNow()) || entireTaskGroupFailed) {
        if (entireTaskGroupFailed) {
          log.warn("All tasks in group [%d] failed to publish, killing all tasks for these partitions",groupId);
        }
 else {
          log.makeAlert("No task in [%s] succeeded before the completion timeout elapsed [%s]!",group.tasks.keySet(),ioConfig.getCompletionTimeout()).emit();
        }
        partitionGroups.remove(groupId);
        stopTasksInGroup(group);
        stopTasksInTaskGroup=true;
        stopTasksInGroup(taskGroups.remove(groupId));
        iTaskGroup.remove();
      }
    }
  }
}

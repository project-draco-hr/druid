{
  final List<ListenableFuture<Boolean>> futures=Lists.newArrayList();
  final List<String> futureTaskIds=Lists.newArrayList();
  for (  TaskGroup group : taskGroups.values()) {
    for (    Map.Entry<String,TaskData> entry : group.tasks.entrySet()) {
      final String taskId=entry.getKey();
      final TaskData taskData=entry.getValue();
      if (taskData.startTime == null) {
        futureTaskIds.add(taskId);
        futures.add(Futures.transform(taskClient.getStartTimeAsync(taskId),new Function<DateTime,Boolean>(){
          @Nullable @Override public Boolean apply(          @Nullable DateTime startTime){
            if (startTime == null) {
              return false;
            }
            taskData.startTime=startTime;
            long millisRemaining=ioConfig.getTaskDuration().getMillis() - (System.currentTimeMillis() - taskData.startTime.getMillis());
            if (millisRemaining > 0) {
              scheduledExec.schedule(buildRunTask(),millisRemaining + MAX_RUN_FREQUENCY_MILLIS,TimeUnit.MILLISECONDS);
            }
            return true;
          }
        }
,workerExec));
      }
      taskData.status=taskStorage.getStatus(taskId).get();
    }
  }
  for (  List<TaskGroup> taskGroups : pendingCompletionTaskGroups.values()) {
    for (    TaskGroup group : taskGroups) {
      for (      Map.Entry<String,TaskData> entry : group.tasks.entrySet()) {
        entry.getValue().status=taskStorage.getStatus(entry.getKey()).get();
      }
    }
  }
  List<Boolean> results=Futures.successfulAsList(futures).get();
  for (int i=0; i < results.size(); i++) {
    if (results.get(i) == null) {
      String taskId=futureTaskIds.get(i);
      log.warn("Task [%s] failed to return start time, killing task",taskId);
      killTask(taskId);
    }
  }
}

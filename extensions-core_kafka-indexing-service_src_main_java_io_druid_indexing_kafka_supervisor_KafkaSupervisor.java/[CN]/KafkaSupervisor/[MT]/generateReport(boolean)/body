{
  int numPartitions=0;
  for (  Map<Integer,Long> partitionGroup : partitionGroups.values()) {
    numPartitions+=partitionGroup.size();
  }
  KafkaSupervisorReport report=new KafkaSupervisorReport(dataSource,DateTime.now(),ioConfig.getTopic(),numPartitions,ioConfig.getReplicas(),ioConfig.getTaskDuration().getMillis() / 1000);
  List<TaskReportData> taskReports=Lists.newArrayList();
  List<ListenableFuture<Map<Integer,Long>>> futures=Lists.newArrayList();
  try {
    for (    TaskGroup taskGroup : taskGroups.values()) {
      for (      Map.Entry<String,TaskData> entry : taskGroup.tasks.entrySet()) {
        String taskId=entry.getKey();
        DateTime startTime=entry.getValue().startTime;
        Long remainingSeconds=null;
        if (startTime != null) {
          remainingSeconds=Math.max(0,ioConfig.getTaskDuration().getMillis() - (DateTime.now().getMillis() - startTime.getMillis())) / 1000;
        }
        taskReports.add(new TaskReportData(taskId,(includeOffsets ? taskGroup.partitionOffsets : null),null,startTime,remainingSeconds,TaskReportData.TaskType.ACTIVE));
        if (includeOffsets) {
          futures.add(taskClient.getCurrentOffsetsAsync(taskId,false));
        }
      }
    }
    for (    List<TaskGroup> taskGroups : pendingCompletionTaskGroups.values()) {
      for (      TaskGroup taskGroup : taskGroups) {
        for (        Map.Entry<String,TaskData> entry : taskGroup.tasks.entrySet()) {
          String taskId=entry.getKey();
          DateTime startTime=entry.getValue().startTime;
          Long remainingSeconds=null;
          if (taskGroup.completionTimeout != null) {
            remainingSeconds=Math.max(0,taskGroup.completionTimeout.getMillis() - DateTime.now().getMillis()) / 1000;
          }
          taskReports.add(new TaskReportData(taskId,(includeOffsets ? taskGroup.partitionOffsets : null),null,startTime,remainingSeconds,TaskReportData.TaskType.PUBLISHING));
          if (includeOffsets) {
            futures.add(taskClient.getCurrentOffsetsAsync(taskId,false));
          }
        }
      }
    }
    List<Map<Integer,Long>> results=Futures.successfulAsList(futures).get();
    for (int i=0; i < taskReports.size(); i++) {
      TaskReportData reportData=taskReports.get(i);
      if (includeOffsets) {
        reportData.setCurrentOffsets(results.get(i));
      }
      report.addTask(reportData);
    }
  }
 catch (  Exception e) {
    log.warn(e,"Failed to generate status report");
  }
  return report;
}

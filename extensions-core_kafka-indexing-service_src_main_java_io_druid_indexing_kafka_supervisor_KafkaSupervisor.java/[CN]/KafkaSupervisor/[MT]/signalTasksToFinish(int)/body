{
  final TaskGroup taskGroup=taskGroups.get(groupId);
  Iterator<Map.Entry<String,TaskData>> i=taskGroup.tasks.entrySet().iterator();
  while (i.hasNext()) {
    Map.Entry<String,TaskData> taskEntry=i.next();
    String taskId=taskEntry.getKey();
    TaskData task=taskEntry.getValue();
    if (task.status.isSuccess()) {
      return Futures.transform(stopTasksInGroup(taskGroup),new Function<Void,Map<Integer,Long>>(){
        @Nullable @Override public Map<Integer,Long> apply(        @Nullable Void input){
          return null;
        }
      }
,workerExec);
    }
    if (task.status.isRunnable()) {
      if (taskInfoProvider.getTaskLocation(taskId).equals(TaskLocation.unknown())) {
        log.info("Killing task [%s] which hasn't been assigned to a worker",taskId);
        killTask(taskId);
        i.remove();
      }
    }
  }
  final List<ListenableFuture<Map<Integer,Long>>> pauseFutures=Lists.newArrayList();
  final List<String> pauseTaskIds=ImmutableList.copyOf(taskGroup.tasks.keySet());
  for (  final String taskId : pauseTaskIds) {
    pauseFutures.add(taskClient.pauseAsync(taskId));
  }
  return Futures.transform(Futures.successfulAsList(pauseFutures),new Function<List<Map<Integer,Long>>,Map<Integer,Long>>(){
    @Nullable @Override public Map<Integer,Long> apply(    List<Map<Integer,Long>> input){
      final Map<Integer,Long> endOffsets=new HashMap<>();
      for (int i=0; i < input.size(); i++) {
        Map<Integer,Long> result=input.get(i);
        if (result == null || result.isEmpty()) {
          String taskId=pauseTaskIds.get(i);
          log.warn("Task [%s] failed to respond to [pause] in a timely manner, killing task",taskId);
          killTask(taskId);
          taskGroup.tasks.remove(taskId);
        }
 else {
          for (          Map.Entry<Integer,Long> offset : result.entrySet()) {
            if (!endOffsets.containsKey(offset.getKey()) || endOffsets.get(offset.getKey()).compareTo(offset.getValue()) < 0) {
              endOffsets.put(offset.getKey(),offset.getValue());
            }
          }
        }
      }
      final List<ListenableFuture<Boolean>> setEndOffsetFutures=Lists.newArrayList();
      final List<String> setEndOffsetTaskIds=ImmutableList.copyOf(taskGroup.tasks.keySet());
      if (setEndOffsetTaskIds.isEmpty()) {
        log.info("All tasks in taskGroup [%d] have failed, tasks will be re-created",groupId);
        return null;
      }
      log.info("Setting endOffsets for tasks in taskGroup [%d] to %s and resuming",groupId,endOffsets);
      for (      final String taskId : setEndOffsetTaskIds) {
        setEndOffsetFutures.add(taskClient.setEndOffsetsAsync(taskId,endOffsets,true));
      }
      try {
        List<Boolean> results=Futures.successfulAsList(setEndOffsetFutures).get();
        for (int i=0; i < results.size(); i++) {
          if (results.get(i) == null || !results.get(i)) {
            String taskId=setEndOffsetTaskIds.get(i);
            log.warn("Task [%s] failed to respond to [set end offsets] in a timely manner, killing task",taskId);
            killTask(taskId);
            taskGroup.tasks.remove(taskId);
          }
        }
      }
 catch (      Exception e) {
        Throwables.propagate(e);
      }
      if (taskGroup.tasks.isEmpty()) {
        log.info("All tasks in taskGroup [%d] have failed, tasks will be re-created",groupId);
        return null;
      }
      return endOffsets;
    }
  }
,workerExec);
}

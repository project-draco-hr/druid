{
  final int threads=5;
  ListeningExecutorService executorService=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(threads));
  final CountDownLatch latch=new CountDownLatch(threads);
  Collection<ListenableFuture<?>> futures=new ArrayList<>();
  for (int i=0; i < threads; ++i) {
    final int loopNum=i;
    ListenableFuture<?> future=executorService.submit(new Runnable(){
      @Override public void run(){
        try {
          latch.countDown();
          latch.await();
          for (int j=0; j < 10; ++j) {
            testDelete(String.format("ns-%d",loopNum));
          }
        }
 catch (        InterruptedException e) {
          throw Throwables.propagate(e);
        }
      }
    }
);
  }
  Futures.allAsList(futures).get();
  executorService.shutdown();
}

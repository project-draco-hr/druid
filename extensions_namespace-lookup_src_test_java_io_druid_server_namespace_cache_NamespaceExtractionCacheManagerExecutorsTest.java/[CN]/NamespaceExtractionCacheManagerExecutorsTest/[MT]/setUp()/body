{
  lifecycle=new Lifecycle();
  manager=new OnHeapNamespaceExtractionCacheManager(lifecycle,fnCache,new NoopServiceEmitter(),ImmutableMap.<Class<? extends ExtractionNamespace>,ExtractionNamespaceFunctionFactory<?>>of(URIExtractionNamespace.class,new URIExtractionNamespaceFunctionFactory(ImmutableMap.<String,SearchableVersionedDataFinder>of("file",new LocalFileTimestampVersionFinder()))));
  tmpFile=Files.createTempFile(tmpDir,"druidTestURIExtractionNS",".dat").toFile();
  tmpFile.deleteOnExit();
  final ObjectMapper mapper=new DefaultObjectMapper();
  try (OutputStream ostream=new FileOutputStream(tmpFile)){
    try (OutputStreamWriter out=new OutputStreamWriter(ostream)){
      out.write(mapper.writeValueAsString(ImmutableMap.<String,String>of("foo","bar")));
    }
   }
   factory=new URIExtractionNamespaceFunctionFactory(ImmutableMap.<String,SearchableVersionedDataFinder>of("file",new LocalFileTimestampVersionFinder())){
    public Callable<String> getCachePopulator(    final URIExtractionNamespace extractionNamespace,    final String lastVersion,    final Map<String,String> cache){
      final Callable<String> superCallable=super.getCachePopulator(extractionNamespace,lastVersion,cache);
      return new Callable<String>(){
        @Override public String call() throws Exception {
          superCallable.call();
          return String.format("%d",System.currentTimeMillis());
        }
      }
;
    }
  }
;
}

{
  return new Deserializer(){
    @Override public void read(    ByteBuffer buffer,    ColumnBuilder builder,    ColumnConfig columnConfig){
      final VERSION rVersion=VERSION.fromByte(buffer.get());
      final int rFlags;
      if (rVersion.compareTo(VERSION.COMPRESSED) >= 0) {
        rFlags=buffer.getInt();
      }
 else {
        rFlags=rVersion.equals(VERSION.UNCOMPRESSED_MULTI_VALUE) ? Feature.MULTI_VALUE.getMask() : NO_FLAGS;
      }
      final boolean hasMultipleValues=Feature.MULTI_VALUE.isSet(rFlags) || Feature.MULTI_VALUE_V3.isSet(rFlags);
      final GenericIndexed<String> rDictionary=GenericIndexed.read(buffer,GenericIndexed.STRING_STRATEGY);
      builder.setType(ValueType.STRING);
      final WritableSupplier<IndexedInts> rSingleValuedColumn;
      final WritableSupplier<IndexedMultivalue<IndexedInts>> rMultiValuedColumn;
      if (hasMultipleValues) {
        rMultiValuedColumn=readMultiValuedColum(rVersion,buffer,rFlags);
        rSingleValuedColumn=null;
      }
 else {
        rSingleValuedColumn=readSingleValuedColumn(rVersion,buffer);
        rMultiValuedColumn=null;
      }
      builder.setHasMultipleValues(hasMultipleValues).setDictionaryEncodedColumn(new DictionaryEncodedColumnSupplier(rDictionary,rSingleValuedColumn,rMultiValuedColumn,columnConfig.columnCacheSizeBytes()));
      GenericIndexed<ImmutableBitmap> rBitmaps=GenericIndexed.read(buffer,bitmapSerdeFactory.getObjectStrategy());
      builder.setBitmapIndex(new BitmapIndexColumnPartSupplier(bitmapSerdeFactory.getBitmapFactory(),rBitmaps,rDictionary));
      ImmutableRTree rSpatialIndex=null;
      if (buffer.hasRemaining()) {
        rSpatialIndex=ByteBufferSerializer.read(buffer,new IndexedRTree.ImmutableRTreeObjectStrategy(bitmapSerdeFactory.getBitmapFactory()));
        builder.setSpatialIndex(new SpatialIndexColumnPartSupplier(rSpatialIndex));
      }
    }
    private WritableSupplier<IndexedInts> readSingleValuedColumn(    VERSION version,    ByteBuffer buffer){
switch (version) {
case UNCOMPRESSED_SINGLE_VALUE:
        return VSizeIndexedInts.readFromByteBuffer(buffer).asWritableSupplier();
case COMPRESSED:
      return CompressedVSizeIntsIndexedSupplier.fromByteBuffer(buffer,byteOrder);
  }
  throw new IAE("Unsupported single-value version[%s]",version);
}
private WritableSupplier<IndexedMultivalue<IndexedInts>> readMultiValuedColum(VERSION version,ByteBuffer buffer,int flags){
switch (version) {
case UNCOMPRESSED_MULTI_VALUE:
    return VSizeIndexed.readFromByteBuffer(buffer).asWritableSupplier();
case COMPRESSED:
  if (Feature.MULTI_VALUE.isSet(flags)) {
    return CompressedVSizeIndexedSupplier.fromByteBuffer(buffer,byteOrder);
  }
 else   if (Feature.MULTI_VALUE_V3.isSet(flags)) {
    return CompressedVSizeIndexedV3Supplier.fromByteBuffer(buffer,byteOrder);
  }
 else {
    throw new IAE("Unrecognized multi-value flag[%d]",flags);
  }
}
throw new IAE("Unsupported multi-value version[%s]",version);
}
}
;
}

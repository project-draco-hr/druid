{
  final VERSION rVersion=VERSION.fromByte(buffer.get());
  final int rFlags;
  if (rVersion.compareTo(VERSION.COMPRESSED) >= 0) {
    rFlags=buffer.getInt();
  }
 else {
    rFlags=rVersion.equals(VERSION.UNCOMPRESSED_MULTI_VALUE) ? Feature.MULTI_VALUE.getMask() : NO_FLAGS;
  }
  final boolean hasMultipleValues=Feature.MULTI_VALUE.isSet(rFlags);
  if (rVersion.equals(VERSION.COMPRESSED) && hasMultipleValues) {
    throw new IAE("Compressed dictionary encoded columns currently do not support multi-value columns");
  }
  final GenericIndexed<String> rDictionary=GenericIndexed.read(buffer,GenericIndexed.STRING_STRATEGY);
  builder.setType(ValueType.STRING);
  final WritableSupplier<IndexedInts> rSingleValuedColumn;
  final WritableSupplier<IndexedMultivalue<IndexedInts>> rMultiValuedColumn;
  if (rVersion.compareTo(VERSION.COMPRESSED) >= 0) {
    rSingleValuedColumn=CompressedVSizeIntsIndexedSupplier.fromByteBuffer(buffer,byteOrder);
    rMultiValuedColumn=null;
  }
 else {
    Pair<WritableSupplier<IndexedInts>,VSizeIndexed> cols=readUncompressed(rVersion,buffer);
    rSingleValuedColumn=cols.lhs;
    rMultiValuedColumn=cols.rhs == null ? null : cols.rhs.asWritableSupplier();
  }
  builder.setHasMultipleValues(hasMultipleValues).setDictionaryEncodedColumn(new DictionaryEncodedColumnSupplier(rDictionary,rSingleValuedColumn,rMultiValuedColumn,columnConfig.columnCacheSizeBytes()));
  GenericIndexed<ImmutableBitmap> rBitmaps=GenericIndexed.read(buffer,bitmapSerdeFactory.getObjectStrategy());
  builder.setBitmapIndex(new BitmapIndexColumnPartSupplier(bitmapSerdeFactory.getBitmapFactory(),rBitmaps,rDictionary));
  ImmutableRTree rSpatialIndex=null;
  if (buffer.hasRemaining()) {
    rSpatialIndex=ByteBufferSerializer.read(buffer,new IndexedRTree.ImmutableRTreeObjectStrategy(bitmapSerdeFactory.getBitmapFactory()));
    builder.setSpatialIndex(new SpatialIndexColumnPartSupplier(rSpatialIndex));
  }
  return new DictionaryEncodedColumnPartSerde(rVersion,rFlags,rDictionary,rSingleValuedColumn,rMultiValuedColumn,bitmapSerdeFactory,rBitmaps,rSpatialIndex,byteOrder);
}

{
  ConfigurationObjectFactory factory=Config.createFactory(new Properties());
  DruidProcessingConfig config=factory.build(DruidProcessingConfig.class);
  Assert.assertEquals(1024 * 1024 * 1024,config.intermediateComputeSizeBytes());
  Assert.assertEquals(Integer.MAX_VALUE,config.poolCacheMaxCount());
  if (Runtime.getRuntime().availableProcessors() == 1) {
    Assert.assertTrue(config.getNumThreads() == 1);
  }
 else {
    Assert.assertTrue(config.getNumThreads() < Runtime.getRuntime().availableProcessors());
  }
  Assert.assertEquals(0,config.columnCacheSizeBytes());
  Assert.assertFalse(config.isFifo());
  Properties props=new Properties();
  props.setProperty("druid.processing.buffer.sizeBytes","1");
  props.setProperty("druid.processing.buffer.poolCacheMaxCount","1");
  props.setProperty("druid.processing.numThreads","5");
  props.setProperty("druid.processing.columnCache.sizeBytes","1");
  props.setProperty("druid.processing.fifo","true");
  factory=Config.createFactory(props);
  config=factory.buildWithReplacements(DruidProcessingConfig.class,ImmutableMap.of("base_path","druid.processing"));
  Assert.assertEquals(1,config.intermediateComputeSizeBytes());
  Assert.assertEquals(1,config.poolCacheMaxCount());
  Assert.assertEquals(5,config.getNumThreads());
  Assert.assertEquals(1,config.columnCacheSizeBytes());
  Assert.assertTrue(config.isFifo());
}

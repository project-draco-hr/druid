{
  final Interval gap=segment1.getInterval().gap(segment2.getInterval());
  final double baseCost=Math.min(segment1.getSize(),segment2.getSize());
  double recencyPenalty=1;
  double dataSourcePenalty=1;
  double gapPenalty=1;
  if (segment1.getDataSource().equals(segment2.getDataSource())) {
    dataSourcePenalty=2;
  }
  double segment1diff=referenceTimestamp - segment1.getInterval().getEndMillis();
  double segment2diff=referenceTimestamp - segment2.getInterval().getEndMillis();
  if (segment1diff < SEVEN_DAYS_IN_MILLIS && segment2diff < SEVEN_DAYS_IN_MILLIS) {
    recencyPenalty=(2 - segment1diff / SEVEN_DAYS_IN_MILLIS) * (2 - segment2diff / SEVEN_DAYS_IN_MILLIS);
  }
  if (gap == null) {
    gapPenalty=2;
  }
 else {
    long gapMillis=gap.toDurationMillis();
    if (gapMillis < THIRTY_DAYS_IN_MILLIS) {
      gapPenalty=2 - gapMillis / THIRTY_DAYS_IN_MILLIS;
    }
  }
  final double cost=baseCost * recencyPenalty * dataSourcePenalty* gapPenalty;
  return cost;
}

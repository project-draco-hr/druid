{
  IncrementalIndex index=new IncrementalIndex(0,QueryGranularity.MINUTE,new AggregatorFactory[]{new CountAggregatorFactory("cnt")});
  index.add(new MapBasedInputRow(new DateTime().minus(1).getMillis(),Lists.newArrayList("billy"),ImmutableMap.<String,Object>of("billy","hi")));
  index.add(new MapBasedInputRow(new DateTime().minus(1).getMillis(),Lists.newArrayList("sally"),ImmutableMap.<String,Object>of("sally","bo")));
  GroupByQueryEngine engine=makeGroupByQueryEngine();
  final Sequence<Row> rows=engine.process(GroupByQuery.builder().setDataSource("test").setGranularity(QueryGranularity.ALL).setInterval(new Interval(0,new DateTime().getMillis())).addDimension("billy").addDimension("sally").addAggregator(new LongSumAggregatorFactory("cnt","cnt")).build(),new IncrementalIndexStorageAdapter(index));
  final ArrayList<Row> results=Sequences.toList(rows,Lists.<Row>newArrayList());
  Assert.assertEquals(2,results.size());
  MapBasedRow row=(MapBasedRow)results.get(0);
  Assert.assertEquals(ImmutableMap.of("billy","hi","cnt",1l),row.getEvent());
  row=(MapBasedRow)results.get(1);
  Assert.assertEquals(ImmutableMap.of("sally","bo","cnt",1l),row.getEvent());
}

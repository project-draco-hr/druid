{
  final List<TaskStatus> recentlyFinishedTasks;
  if (authConfig.isEnabled()) {
    final Map<Pair<Resource,Action>,Access> resourceAccessMap=new HashMap<>();
    final AuthorizationInfo authorizationInfo=(AuthorizationInfo)req.getAttribute(AuthConfig.DRUID_AUTH_TOKEN);
    recentlyFinishedTasks=ImmutableList.copyOf(Iterables.filter(taskStorageQueryAdapter.getRecentlyFinishedTaskStatuses(),new Predicate<TaskStatus>(){
      @Override public boolean apply(      TaskStatus input){
        final String taskId=input.getId();
        final Optional<Task> optionalTask=taskStorageQueryAdapter.getTask(taskId);
        if (!optionalTask.isPresent()) {
          throw new WebApplicationException(Response.serverError().entity(String.format("No task information found for task with id: [%s]",taskId)).build());
        }
        Resource resource=new Resource(optionalTask.get().getDataSource(),ResourceType.DATASOURCE);
        Action action=Action.READ;
        Pair<Resource,Action> key=new Pair<>(resource,action);
        if (resourceAccessMap.containsKey(key)) {
          return resourceAccessMap.get(key).isAllowed();
        }
 else {
          Access access=authorizationInfo.isAuthorized(key.lhs,key.rhs);
          resourceAccessMap.put(key,access);
          return access.isAllowed();
        }
      }
    }
));
  }
 else {
    recentlyFinishedTasks=taskStorageQueryAdapter.getRecentlyFinishedTaskStatuses();
  }
  final List<TaskResponseObject> completeTasks=Lists.transform(recentlyFinishedTasks,new Function<TaskStatus,TaskResponseObject>(){
    @Override public TaskResponseObject apply(    TaskStatus taskStatus){
      return new TaskResponseObject(taskStatus.getId(),new DateTime(0),new DateTime(0),Optional.of(taskStatus),TaskLocation.unknown());
    }
  }
);
  return Response.ok(completeTasks).build();
}

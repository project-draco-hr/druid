{
  final Map<Pair<Resource,Action>,Access> resourceAccessMap=new HashMap<>();
  final AuthorizationInfo authorizationInfo=(AuthorizationInfo)req.getAttribute(AuthConfig.DRUID_AUTH_TOKEN);
  return Collections2.filter(collectionToFilter,new Predicate<TaskRunnerWorkItem>(){
    @Override public boolean apply(    TaskRunnerWorkItem input){
      final String taskId=input.getTaskId();
      final Optional<Task> optionalTask=taskStorageQueryAdapter.getTask(taskId);
      if (!optionalTask.isPresent()) {
        throw new WebApplicationException(Response.serverError().entity(String.format("No task information found for task with id: [%s]",taskId)).build());
      }
      Resource resource=new Resource(optionalTask.get().getDataSource(),ResourceType.DATASOURCE);
      Action action=Action.READ;
      Pair<Resource,Action> key=new Pair<>(resource,action);
      if (resourceAccessMap.containsKey(key)) {
        return resourceAccessMap.get(key).isAllowed();
      }
 else {
        Access access=authorizationInfo.isAuthorized(key.lhs,key.rhs);
        resourceAccessMap.put(key,access);
        return access.isAllowed();
      }
    }
  }
);
}

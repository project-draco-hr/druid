{
  final ExtractionNamespace extractionNamespace=new ExtractionNamespace(){
    @Override public long getPollMs(){
      return 0;
    }
  }
;
  EasyMock.expect(cacheManager.scheduleAndWait(EasyMock.anyString(),EasyMock.eq(extractionNamespace),EasyMock.eq(60000L))).andReturn(true).once();
  EasyMock.expect(cacheManager.getVersion(EasyMock.anyString())).andReturn("0").once();
  EasyMock.expect(cacheManager.getCacheMap(EasyMock.anyString())).andReturn(new ConcurrentHashMap<String,String>(ImmutableMap.of("foo","bar"))).once();
  EasyMock.expect(cacheManager.getVersion(EasyMock.anyString())).andReturn("1").once();
  EasyMock.expect(cacheManager.getVersion(EasyMock.anyString())).andReturn("2").once();
  EasyMock.expect(cacheManager.getCacheMap(EasyMock.anyString())).andReturn(new ConcurrentHashMap<String,String>()).once();
  EasyMock.expect(cacheManager.getVersion(EasyMock.anyString())).andReturn("2").once();
  EasyMock.expect(cacheManager.checkedDelete(EasyMock.anyString())).andReturn(true).once();
  EasyMock.replay(cacheManager);
  final NamespaceLookupExtractorFactory namespaceLookupExtractorFactory=new NamespaceLookupExtractorFactory(extractionNamespace,cacheManager);
  Assert.assertTrue(namespaceLookupExtractorFactory.start());
  final LookupExtractor extractor=namespaceLookupExtractorFactory.get();
  Assert.assertNull(extractor.apply("foo"));
  Assert.assertNotNull(extractor.getCacheKey());
  Assert.assertTrue(namespaceLookupExtractorFactory.close());
  EasyMock.verify(cacheManager);
}

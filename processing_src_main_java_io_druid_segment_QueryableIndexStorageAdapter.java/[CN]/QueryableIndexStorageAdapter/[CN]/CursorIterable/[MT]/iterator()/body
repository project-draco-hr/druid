{
  final Offset baseOffset=offset.clone();
  final Map<String,GenericColumn> genericColumnCache=Maps.newHashMap();
  final Map<String,ComplexColumn> complexColumnCache=Maps.newHashMap();
  final Map<String,Object> objectColumnCache=Maps.newHashMap();
  final GenericColumn timestamps=index.getTimeColumn().getGenericColumn();
  final FunctionalIterator<Cursor> retVal=FunctionalIterator.create(gran.iterable(interval.getStartMillis(),interval.getEndMillis()).iterator()).transform(new Function<Long,Cursor>(){
    @Override public Cursor apply(    final Long input){
      final long timeStart=Math.max(interval.getStartMillis(),input);
      while (baseOffset.withinBounds() && timestamps.getLongSingleValueRow(baseOffset.getOffset()) < timeStart) {
        baseOffset.increment();
      }
      final Offset offset=new TimestampCheckingOffset(baseOffset,timestamps,Math.min(interval.getEndMillis(),gran.next(input)));
      return new Cursor(){
        private final Offset initOffset=offset.clone();
        private final DateTime myBucket=gran.toDateTime(input);
        private Offset cursorOffset=offset;
        @Override public DateTime getTime(){
          return myBucket;
        }
        @Override public void advance(){
          cursorOffset.increment();
        }
        @Override public boolean isDone(){
          return !cursorOffset.withinBounds();
        }
        @Override public void reset(){
          cursorOffset=initOffset.clone();
        }
        @Override public TimestampColumnSelector makeTimestampColumnSelector(){
          return new TimestampColumnSelector(){
            @Override public long getTimestamp(){
              return index.getTimeColumn().getGenericColumn().getLongSingleValueRow(cursorOffset.getOffset());
            }
          }
;
        }
        @Override public DimensionSelector makeDimensionSelector(        String dimension){
          final String dimensionName=dimension.toLowerCase();
          final Column columnDesc=index.getColumn(dimensionName);
          if (columnDesc == null) {
            return null;
          }
          final DictionaryEncodedColumn column=columnDesc.getDictionaryEncoding();
          if (column == null) {
            return null;
          }
 else           if (columnDesc.getCapabilities().hasMultipleValues()) {
            return new DimensionSelector(){
              @Override public IndexedInts getRow(){
                return column.getMultiValueRow(cursorOffset.getOffset());
              }
              @Override public int getValueCardinality(){
                return column.getCardinality();
              }
              @Override public String lookupName(              int id){
                final String retVal=column.lookupName(id);
                return retVal == null ? "" : retVal;
              }
              @Override public int lookupId(              String name){
                return column.lookupId(name);
              }
            }
;
          }
 else {
            return new DimensionSelector(){
              @Override public IndexedInts getRow(){
                return new SingleIndexedInts(column.getSingleValueRow(cursorOffset.getOffset()));
              }
              @Override public int getValueCardinality(){
                return column.getCardinality();
              }
              @Override public String lookupName(              int id){
                return column.lookupName(id);
              }
              @Override public int lookupId(              String name){
                return column.lookupId(name);
              }
            }
;
          }
        }
        @Override public FloatColumnSelector makeFloatColumnSelector(        String columnName){
          final String metricName=columnName.toLowerCase();
          GenericColumn cachedMetricVals=genericColumnCache.get(metricName);
          if (cachedMetricVals == null) {
            Column holder=index.getColumn(metricName);
            if (holder != null && holder.getCapabilities().getType() == ValueType.FLOAT) {
              cachedMetricVals=holder.getGenericColumn();
              genericColumnCache.put(metricName,cachedMetricVals);
            }
          }
          if (cachedMetricVals == null) {
            return new FloatColumnSelector(){
              @Override public float get(){
                return 0.0f;
              }
            }
;
          }
          final GenericColumn metricVals=cachedMetricVals;
          return new FloatColumnSelector(){
            @Override public float get(){
              return metricVals.getFloatSingleValueRow(cursorOffset.getOffset());
            }
          }
;
        }
        @Override public ObjectColumnSelector makeObjectColumnSelector(        String column){
          final String columnName=column.toLowerCase();
          Object cachedColumnVals=objectColumnCache.get(columnName);
          if (cachedColumnVals == null) {
            Column holder=index.getColumn(columnName);
            if (holder != null) {
              final ColumnCapabilities capabilities=holder.getCapabilities();
              if (capabilities.hasMultipleValues()) {
                throw new UnsupportedOperationException("makeObjectColumnSelector does not support multivalued columns");
              }
              if (capabilities.isDictionaryEncoded()) {
                cachedColumnVals=holder.getDictionaryEncoding();
              }
 else               if (capabilities.getType() == ValueType.COMPLEX) {
                cachedColumnVals=holder.getComplexColumn();
              }
 else {
                cachedColumnVals=holder.getGenericColumn();
              }
            }
            if (cachedColumnVals != null) {
              objectColumnCache.put(columnName,cachedColumnVals);
            }
          }
          if (cachedColumnVals == null) {
            return null;
          }
          if (cachedColumnVals instanceof GenericColumn) {
            final GenericColumn columnVals=(GenericColumn)cachedColumnVals;
            final ValueType type=columnVals.getType();
            if (type == ValueType.FLOAT) {
              return new ObjectColumnSelector<Float>(){
                @Override public Class classOfObject(){
                  return Float.TYPE;
                }
                @Override public Float get(){
                  return columnVals.getFloatSingleValueRow(cursorOffset.getOffset());
                }
              }
;
            }
            if (type == ValueType.LONG) {
              return new ObjectColumnSelector<Long>(){
                @Override public Class classOfObject(){
                  return Long.TYPE;
                }
                @Override public Long get(){
                  return columnVals.getLongSingleValueRow(cursorOffset.getOffset());
                }
              }
;
            }
            if (type == ValueType.STRING) {
              return new ObjectColumnSelector<String>(){
                @Override public Class classOfObject(){
                  return String.class;
                }
                @Override public String get(){
                  return columnVals.getStringSingleValueRow(cursorOffset.getOffset());
                }
              }
;
            }
          }
          if (cachedColumnVals instanceof DictionaryEncodedColumn) {
            final DictionaryEncodedColumn columnVals=(DictionaryEncodedColumn)cachedColumnVals;
            return new ObjectColumnSelector<String>(){
              @Override public Class classOfObject(){
                return String.class;
              }
              @Override public String get(){
                return columnVals.lookupName(columnVals.getSingleValueRow(cursorOffset.getOffset()));
              }
            }
;
          }
          final ComplexColumn columnVals=(ComplexColumn)cachedColumnVals;
          return new ObjectColumnSelector(){
            @Override public Class classOfObject(){
              return columnVals.getClazz();
            }
            @Override public Object get(){
              return columnVals.getRowValue(cursorOffset.getOffset());
            }
          }
;
        }
      }
;
    }
  }
);
  return MoreIterators.after(retVal,new Runnable(){
    @Override public void run(){
      Closeables.closeQuietly(timestamps);
      for (      GenericColumn column : genericColumnCache.values()) {
        Closeables.closeQuietly(column);
      }
      for (      ComplexColumn complexColumn : complexColumnCache.values()) {
        Closeables.closeQuietly(complexColumn);
      }
      for (      Object column : complexColumnCache.values()) {
        if (column instanceof Closeable) {
          Closeables.closeQuietly((Closeable)column);
        }
      }
    }
  }
);
}

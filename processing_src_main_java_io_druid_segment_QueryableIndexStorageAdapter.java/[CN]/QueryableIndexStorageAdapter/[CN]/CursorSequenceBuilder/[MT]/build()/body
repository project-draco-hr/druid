{
  final Offset baseOffset=offset.clone();
  final Map<String,DictionaryEncodedColumn> dictionaryColumnCache=Maps.newHashMap();
  final Map<String,GenericColumn> genericColumnCache=Maps.newHashMap();
  final Map<String,ComplexColumn> complexColumnCache=Maps.newHashMap();
  final Map<String,Object> objectColumnCache=Maps.newHashMap();
  final GenericColumn timestamps=index.getColumn(Column.TIME_COLUMN_NAME).getGenericColumn();
  Iterable<Long> iterable=gran.iterable(interval.getStartMillis(),interval.getEndMillis());
  if (descending) {
    iterable=Lists.reverse(ImmutableList.copyOf(iterable));
  }
  return Sequences.withBaggage(Sequences.map(Sequences.simple(iterable),new Function<Long,Cursor>(){
    @Override public Cursor apply(    final Long input){
      final long timeStart=Math.max(interval.getStartMillis(),input);
      final long timeEnd=Math.min(interval.getEndMillis(),gran.next(input));
      if (descending) {
        for (; baseOffset.withinBounds(); baseOffset.increment()) {
          if (timestamps.getLongSingleValueRow(baseOffset.getOffset()) < timeEnd) {
            break;
          }
        }
      }
 else {
        for (; baseOffset.withinBounds(); baseOffset.increment()) {
          if (timestamps.getLongSingleValueRow(baseOffset.getOffset()) >= timeStart) {
            break;
          }
        }
      }
      final Offset offset=descending ? new DescendingTimestampCheckingOffset(baseOffset,timestamps,timeStart,minDataTimestamp >= timeStart) : new AscendingTimestampCheckingOffset(baseOffset,timestamps,timeEnd,maxDataTimestamp < timeEnd);
      final Offset initOffset=offset.clone();
      final DateTime myBucket=gran.toDateTime(input);
      final CursorOffsetHolder cursorOffsetHolder=new CursorOffsetHolder();
abstract class QueryableIndexBaseCursor implements Cursor {
        Offset cursorOffset;
        @Override public DimensionSelector makeDimensionSelector(        DimensionSpec dimensionSpec){
          return dimensionSpec.decorate(makeDimensionSelectorUndecorated(dimensionSpec));
        }
        private DimensionSelector makeDimensionSelectorUndecorated(        DimensionSpec dimensionSpec){
          final String dimension=dimensionSpec.getDimension();
          final ExtractionFn extractionFn=dimensionSpec.getExtractionFn();
          final Column columnDesc=index.getColumn(dimension);
          if (columnDesc == null) {
            return NULL_DIMENSION_SELECTOR;
          }
          if (dimension.equals(Column.TIME_COLUMN_NAME)) {
            return new SingleScanTimeDimSelector(makeLongColumnSelector(dimension),extractionFn,descending);
          }
          DictionaryEncodedColumn cachedColumn=dictionaryColumnCache.get(dimension);
          if (cachedColumn == null) {
            cachedColumn=columnDesc.getDictionaryEncoding();
            dictionaryColumnCache.put(dimension,cachedColumn);
          }
          final DictionaryEncodedColumn column=cachedColumn;
          if (column == null) {
            return NULL_DIMENSION_SELECTOR;
          }
 else           if (columnDesc.getCapabilities().hasMultipleValues()) {
            return new DimensionSelector(){
              @Override public IndexedInts getRow(){
                return column.getMultiValueRow(cursorOffset.getOffset());
              }
              @Override public int getValueCardinality(){
                return column.getCardinality();
              }
              @Override public String lookupName(              int id){
                final String value=column.lookupName(id);
                return extractionFn == null ? value : extractionFn.apply(value);
              }
              @Override public int lookupId(              String name){
                if (extractionFn != null) {
                  throw new UnsupportedOperationException("cannot perform lookup when applying an extraction function");
                }
                return column.lookupId(name);
              }
            }
;
          }
 else {
            return new DimensionSelector(){
              @Override public IndexedInts getRow(){
                return new IndexedInts(){
                  @Override public int size(){
                    return 1;
                  }
                  @Override public int get(                  int index){
                    return column.getSingleValueRow(cursorOffset.getOffset());
                  }
                  @Override public Iterator<Integer> iterator(){
                    return Iterators.singletonIterator(column.getSingleValueRow(cursorOffset.getOffset()));
                  }
                  @Override public void fill(                  int index,                  int[] toFill){
                    throw new UnsupportedOperationException("fill not supported");
                  }
                  @Override public void close() throws IOException {
                  }
                }
;
              }
              @Override public int getValueCardinality(){
                return column.getCardinality();
              }
              @Override public String lookupName(              int id){
                final String value=column.lookupName(id);
                return extractionFn == null ? value : extractionFn.apply(value);
              }
              @Override public int lookupId(              String name){
                if (extractionFn != null) {
                  throw new UnsupportedOperationException("cannot perform lookup when applying an extraction function");
                }
                return column.lookupId(name);
              }
            }
;
          }
        }
        @Override public FloatColumnSelector makeFloatColumnSelector(        String columnName){
          GenericColumn cachedMetricVals=genericColumnCache.get(columnName);
          if (cachedMetricVals == null) {
            Column holder=index.getColumn(columnName);
            if (holder != null && (holder.getCapabilities().getType() == ValueType.FLOAT || holder.getCapabilities().getType() == ValueType.LONG)) {
              cachedMetricVals=holder.getGenericColumn();
              genericColumnCache.put(columnName,cachedMetricVals);
            }
          }
          if (cachedMetricVals == null) {
            return new FloatColumnSelector(){
              @Override public float get(){
                return 0.0f;
              }
            }
;
          }
          final GenericColumn metricVals=cachedMetricVals;
          return new FloatColumnSelector(){
            @Override public float get(){
              return metricVals.getFloatSingleValueRow(cursorOffset.getOffset());
            }
          }
;
        }
        @Override public LongColumnSelector makeLongColumnSelector(        String columnName){
          GenericColumn cachedMetricVals=genericColumnCache.get(columnName);
          if (cachedMetricVals == null) {
            Column holder=index.getColumn(columnName);
            if (holder != null && (holder.getCapabilities().getType() == ValueType.LONG || holder.getCapabilities().getType() == ValueType.FLOAT)) {
              cachedMetricVals=holder.getGenericColumn();
              genericColumnCache.put(columnName,cachedMetricVals);
            }
          }
          if (cachedMetricVals == null) {
            return new LongColumnSelector(){
              @Override public long get(){
                return 0L;
              }
            }
;
          }
          final GenericColumn metricVals=cachedMetricVals;
          return new LongColumnSelector(){
            @Override public long get(){
              return metricVals.getLongSingleValueRow(cursorOffset.getOffset());
            }
          }
;
        }
        @Override public ObjectColumnSelector makeObjectColumnSelector(        String column){
          Object cachedColumnVals=objectColumnCache.get(column);
          if (cachedColumnVals == null) {
            Column holder=index.getColumn(column);
            if (holder != null) {
              final ColumnCapabilities capabilities=holder.getCapabilities();
              if (capabilities.isDictionaryEncoded()) {
                cachedColumnVals=holder.getDictionaryEncoding();
              }
 else               if (capabilities.getType() == ValueType.COMPLEX) {
                cachedColumnVals=holder.getComplexColumn();
              }
 else {
                cachedColumnVals=holder.getGenericColumn();
              }
            }
            if (cachedColumnVals != null) {
              objectColumnCache.put(column,cachedColumnVals);
            }
          }
          if (cachedColumnVals == null) {
            return null;
          }
          if (cachedColumnVals instanceof GenericColumn) {
            final GenericColumn columnVals=(GenericColumn)cachedColumnVals;
            final ValueType type=columnVals.getType();
            if (columnVals.hasMultipleValues()) {
              throw new UnsupportedOperationException("makeObjectColumnSelector does not support multi-value GenericColumns");
            }
            if (type == ValueType.FLOAT) {
              return new ObjectColumnSelector<Float>(){
                @Override public Class classOfObject(){
                  return Float.TYPE;
                }
                @Override public Float get(){
                  return columnVals.getFloatSingleValueRow(cursorOffset.getOffset());
                }
              }
;
            }
            if (type == ValueType.LONG) {
              return new ObjectColumnSelector<Long>(){
                @Override public Class classOfObject(){
                  return Long.TYPE;
                }
                @Override public Long get(){
                  return columnVals.getLongSingleValueRow(cursorOffset.getOffset());
                }
              }
;
            }
            if (type == ValueType.STRING) {
              return new ObjectColumnSelector<String>(){
                @Override public Class classOfObject(){
                  return String.class;
                }
                @Override public String get(){
                  return columnVals.getStringSingleValueRow(cursorOffset.getOffset());
                }
              }
;
            }
          }
          if (cachedColumnVals instanceof DictionaryEncodedColumn) {
            final DictionaryEncodedColumn columnVals=(DictionaryEncodedColumn)cachedColumnVals;
            if (columnVals.hasMultipleValues()) {
              return new ObjectColumnSelector<Object>(){
                @Override public Class classOfObject(){
                  return Object.class;
                }
                @Override public Object get(){
                  final IndexedInts multiValueRow=columnVals.getMultiValueRow(cursorOffset.getOffset());
                  if (multiValueRow.size() == 0) {
                    return null;
                  }
 else                   if (multiValueRow.size() == 1) {
                    return columnVals.lookupName(multiValueRow.get(0));
                  }
 else {
                    final String[] strings=new String[multiValueRow.size()];
                    for (int i=0; i < multiValueRow.size(); i++) {
                      strings[i]=columnVals.lookupName(multiValueRow.get(i));
                    }
                    return strings;
                  }
                }
              }
;
            }
 else {
              return new ObjectColumnSelector<String>(){
                @Override public Class classOfObject(){
                  return String.class;
                }
                @Override public String get(){
                  return columnVals.lookupName(columnVals.getSingleValueRow(cursorOffset.getOffset()));
                }
              }
;
            }
          }
          final ComplexColumn columnVals=(ComplexColumn)cachedColumnVals;
          return new ObjectColumnSelector(){
            @Override public Class classOfObject(){
              return columnVals.getClazz();
            }
            @Override public Object get(){
              return columnVals.getRowValue(cursorOffset.getOffset());
            }
          }
;
        }
      }
      if (postFilter == null) {
        return new QueryableIndexBaseCursor(){
{
            reset();
          }
          @Override public DateTime getTime(){
            return myBucket;
          }
          @Override public void advance(){
            if (Thread.interrupted()) {
              throw new QueryInterruptedException(new InterruptedException());
            }
            cursorOffset.increment();
          }
          @Override public void advanceTo(          int offset){
            int count=0;
            while (count < offset && !isDone()) {
              advance();
              count++;
            }
          }
          @Override public boolean isDone(){
            return !cursorOffset.withinBounds();
          }
          @Override public void reset(){
            cursorOffset=initOffset.clone();
            cursorOffsetHolder.set(cursorOffset);
          }
        }
;
      }
 else {
        return new QueryableIndexBaseCursor(){
          CursorOffsetHolderValueMatcherFactory valueMatcherFactory=new CursorOffsetHolderValueMatcherFactory(this);
          RowOffsetMatcherFactory rowOffsetMatcherFactory=new CursorOffsetHolderRowOffsetMatcherFactory(cursorOffsetHolder,descending);
          final ValueMatcher filterMatcher;
{
            if (postFilter instanceof BooleanFilter) {
              filterMatcher=((BooleanFilter)postFilter).makeMatcher(bitmapIndexSelector,valueMatcherFactory,rowOffsetMatcherFactory);
            }
 else {
              if (postFilter.supportsBitmapIndex(bitmapIndexSelector)) {
                filterMatcher=rowOffsetMatcherFactory.makeRowOffsetMatcher(postFilter.getBitmapIndex(bitmapIndexSelector));
              }
 else {
                filterMatcher=postFilter.makeMatcher(valueMatcherFactory);
              }
            }
          }
{
            reset();
          }
          @Override public DateTime getTime(){
            return myBucket;
          }
          @Override public void advance(){
            if (Thread.interrupted()) {
              throw new QueryInterruptedException(new InterruptedException());
            }
            cursorOffset.increment();
            while (!isDone()) {
              if (Thread.interrupted()) {
                throw new QueryInterruptedException(new InterruptedException());
              }
              if (filterMatcher.matches()) {
                return;
              }
 else {
                cursorOffset.increment();
              }
            }
          }
          @Override public void advanceTo(          int offset){
            int count=0;
            while (count < offset && !isDone()) {
              advance();
              count++;
            }
          }
          @Override public boolean isDone(){
            return !cursorOffset.withinBounds();
          }
          @Override public void reset(){
            cursorOffset=initOffset.clone();
            cursorOffsetHolder.set(cursorOffset);
            if (!isDone()) {
              if (filterMatcher.matches()) {
                return;
              }
 else {
                advance();
              }
            }
          }
        }
;
      }
    }
  }
),new Closeable(){
    @Override public void close() throws IOException {
      CloseQuietly.close(timestamps);
      for (      DictionaryEncodedColumn column : dictionaryColumnCache.values()) {
        CloseQuietly.close(column);
      }
      for (      GenericColumn column : genericColumnCache.values()) {
        CloseQuietly.close(column);
      }
      for (      ComplexColumn complexColumn : complexColumnCache.values()) {
        CloseQuietly.close(complexColumn);
      }
      for (      Object column : objectColumnCache.values()) {
        if (column instanceof Closeable) {
          CloseQuietly.close((Closeable)column);
        }
      }
    }
  }
);
}

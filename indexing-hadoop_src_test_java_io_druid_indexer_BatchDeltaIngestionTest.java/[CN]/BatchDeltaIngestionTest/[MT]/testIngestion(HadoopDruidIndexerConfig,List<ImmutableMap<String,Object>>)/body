{
  IndexGeneratorJob job=new LegacyIndexGeneratorJob(config);
  JobHelper.runJobs(ImmutableList.<Jobby>of(job),config);
  File segmentFolder=new File(String.format("%s/%s/%s_%s/%s/0",config.getSchema().getIOConfig().getSegmentOutputPath(),config.getSchema().getDataSchema().getDataSource(),interval.getStart().toString(),interval.getEnd().toString(),config.getSchema().getTuningConfig().getVersion()));
  Assert.assertTrue(segmentFolder.exists());
  File descriptor=new File(segmentFolder,"descriptor.json");
  File indexZip=new File(segmentFolder,"index.zip");
  Assert.assertTrue(descriptor.exists());
  Assert.assertTrue(indexZip.exists());
  DataSegment dataSegment=mapper.readValue(descriptor,DataSegment.class);
  Assert.assertEquals("website",dataSegment.getDataSource());
  Assert.assertEquals(config.getSchema().getTuningConfig().getVersion(),dataSegment.getVersion());
  Assert.assertEquals(interval,dataSegment.getInterval());
  Assert.assertEquals("local",dataSegment.getLoadSpec().get("type"));
  Assert.assertEquals(indexZip.getCanonicalPath(),dataSegment.getLoadSpec().get("path"));
  Assert.assertEquals("host",dataSegment.getDimensions().get(0));
  Assert.assertEquals("visited_sum",dataSegment.getMetrics().get(0));
  Assert.assertEquals("unique_hosts",dataSegment.getMetrics().get(1));
  Assert.assertEquals(Integer.valueOf(9),dataSegment.getBinaryVersion());
  HashBasedNumberedShardSpec spec=(HashBasedNumberedShardSpec)dataSegment.getShardSpec();
  Assert.assertEquals(0,spec.getPartitionNum());
  Assert.assertEquals(1,spec.getPartitions());
  File tmpUnzippedSegmentDir=temporaryFolder.newFolder();
  new LocalDataSegmentPuller().getSegmentFiles(dataSegment,tmpUnzippedSegmentDir);
  QueryableIndex index=IndexIO.loadIndex(tmpUnzippedSegmentDir);
  StorageAdapter adapter=new QueryableIndexStorageAdapter(index);
  Firehose firehose=new IngestSegmentFirehose(ImmutableList.of(adapter),ImmutableList.of("host"),ImmutableList.of("visited_sum","unique_hosts"),null,interval,QueryGranularity.NONE);
  List<InputRow> rows=Lists.newArrayList();
  while (firehose.hasMore()) {
    rows.add(firehose.nextRow());
  }
  verifyRows(expectedRowsGenerated,rows);
}

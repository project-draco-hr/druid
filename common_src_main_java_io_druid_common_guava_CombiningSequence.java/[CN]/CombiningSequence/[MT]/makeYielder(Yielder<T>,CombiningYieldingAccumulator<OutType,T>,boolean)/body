{
  final Yielder<T> finalYielder;
  final OutType retVal;
  final boolean finalFinalValue;
  if (!yielder.isDone()) {
    retVal=combiningAccumulator.getRetVal();
    finalYielder=yielder.next(yielder.get());
    finalFinalValue=false;
  }
 else {
    if (!finalValue && combiningAccumulator.accumulatedSomething()) {
      combiningAccumulator.accumulateLastValue();
      retVal=combiningAccumulator.getRetVal();
      finalFinalValue=true;
      if (!combiningAccumulator.yielded()) {
        return Yielders.done(retVal,yielder);
      }
 else {
        finalYielder=Yielders.done(null,yielder);
      }
    }
 else {
      return Yielders.done(combiningAccumulator.getRetVal(),yielder);
    }
  }
  return new Yielder<OutType>(){
    @Override public OutType get(){
      return retVal;
    }
    @Override public Yielder<OutType> next(    OutType initValue){
      combiningAccumulator.reset();
      return makeYielder(finalYielder,combiningAccumulator,finalFinalValue);
    }
    @Override public boolean isDone(){
      return false;
    }
    @Override public void close() throws IOException {
      finalYielder.close();
    }
  }
;
}

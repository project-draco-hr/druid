{
  ApproximateHistogramAggregatorFactory aggFactory=new ApproximateHistogramAggregatorFactory("apphisto","index",10,5,Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY);
  GroupByQuery query=new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.allGran).setDimensions(Arrays.<DimensionSpec>asList(new LegacyDimensionSpec(QueryRunnerTestHelper.providerDimension))).setInterval(QueryRunnerTestHelper.fullOnInterval).setAggregatorSpecs(Lists.<AggregatorFactory>newArrayList(Iterables.concat(QueryRunnerTestHelper.commonAggregators,Lists.newArrayList(new MaxAggregatorFactory("maxIndex","index"),new MinAggregatorFactory("minIndex","index"),aggFactory)))).setPostAggregatorSpecs(Arrays.<PostAggregator>asList(QueryRunnerTestHelper.addRowsIndexConstant,QueryRunnerTestHelper.dependentPostAgg,new QuantilePostAggregator("quantile","apphisto",0.5f))).build();
  List<Row> expectedResults=Arrays.<Row>asList();
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"approx-histo");
}

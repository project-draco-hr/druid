{
  ApproximateHistogramAggregatorFactory aggFactory=new ApproximateHistogramAggregatorFactory("apphisto","index",10,5,Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY);
  GroupByQuery query=new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.allGran).setDimensions(Arrays.<DimensionSpec>asList(new DefaultDimensionSpec(QueryRunnerTestHelper.marketDimension,"marketalias"))).setInterval(QueryRunnerTestHelper.fullOnInterval).setLimitSpec(new DefaultLimitSpec(Lists.newArrayList(new OrderByColumnSpec("marketalias",OrderByColumnSpec.Direction.DESCENDING)),1)).setAggregatorSpecs(Lists.newArrayList(QueryRunnerTestHelper.rowsCount,aggFactory)).setPostAggregatorSpecs(Arrays.<PostAggregator>asList(new QuantilePostAggregator("quantile","apphisto",0.5f))).build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("1970-01-01T00:00:00.000Z","marketalias","upfront","rows",186L,"quantile",880.9881f,"apphisto",new Histogram(new float[]{214.97299194335938f,545.9906005859375f,877.0081787109375f,1208.0257568359375f,1539.0433349609375f,1870.06103515625f},new double[]{0.0,67.53287506103516,72.22068786621094,31.984678268432617,14.261756896972656})));
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"approx-histo");
}

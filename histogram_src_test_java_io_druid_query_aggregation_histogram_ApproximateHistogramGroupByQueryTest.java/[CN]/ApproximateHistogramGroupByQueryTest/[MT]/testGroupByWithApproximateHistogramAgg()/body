{
  ApproximateHistogramAggregatorFactory aggFactory=new ApproximateHistogramAggregatorFactory("apphisto","index",10,5,Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY);
  GroupByQuery query=new GroupByQuery.Builder().setDataSource(QueryRunnerTestHelper.dataSource).setGranularity(QueryRunnerTestHelper.allGran).setDimensions(Arrays.<DimensionSpec>asList(new LegacyDimensionSpec(QueryRunnerTestHelper.marketDimension))).setInterval(QueryRunnerTestHelper.fullOnInterval).setLimitSpec(new DefaultLimitSpec(Lists.newArrayList(new OrderByColumnSpec(QueryRunnerTestHelper.marketDimension,OrderByColumnSpec.Direction.ASCENDING)),1)).setAggregatorSpecs(Lists.newArrayList(Iterables.concat(QueryRunnerTestHelper.commonAggregators,Lists.newArrayList(new MaxAggregatorFactory("maxIndex","index"),new MinAggregatorFactory("minIndex","index"),aggFactory)))).setPostAggregatorSpecs(Arrays.asList(QueryRunnerTestHelper.addRowsIndexConstant,QueryRunnerTestHelper.dependentPostAgg,new QuantilePostAggregator("quantile","apphisto",0.5f))).build();
  List<Row> expectedResults=Arrays.asList(GroupByQueryRunnerTestHelper.createExpectedRow("1970-01-01T00:00:00.000Z","market","spot","rows",837L,"addRowsIndexConstant",96444.5703125,"dependentPostAgg",97282.5703125,"index",95606.5703125,"maxIndex",277.2735290527344,"minIndex",59.02102279663086,"quantile",101.78856f,"uniques",QueryRunnerTestHelper.UNIQUES_9,"apphisto",new Histogram(new float[]{4.457897186279297f,59.02102279663086f,113.58415222167969f,168.14727783203125f,222.7104034423828f,277.2735290527344f},new double[]{0.0,462.4309997558594,357.5404968261719,15.022850036621094,2.0056631565093994})));
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"approx-histo");
}

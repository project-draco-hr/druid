{
  numBytes.addAndGet(key.remaining() + value.length);
  Iterator<Map.Entry<ByteBuffer,byte[]>> it=entrySet().iterator();
  List<ByteBuffer> keysToRemove=new ArrayList<>();
  long totalEvictionSize=0L;
  while (numBytes.get() - totalEvictionSize > sizeInBytes && it.hasNext()) {
    evictionCount.incrementAndGet();
    if (logEvictions && evictionCount.get() % logEvictionCount == 0) {
      log.info("Evicting %,dth element.  Size[%,d], numBytes[%,d], averageSize[%,d]",evictionCount,size(),numBytes.get(),numBytes.get() / size());
    }
    Map.Entry<ByteBuffer,byte[]> next=it.next();
    totalEvictionSize+=next.getKey().remaining() + next.getValue().length;
    keysToRemove.add(next.getKey());
  }
  for (  ByteBuffer keyToRemove : keysToRemove) {
    remove(keyToRemove);
  }
  return super.put(key,value);
}

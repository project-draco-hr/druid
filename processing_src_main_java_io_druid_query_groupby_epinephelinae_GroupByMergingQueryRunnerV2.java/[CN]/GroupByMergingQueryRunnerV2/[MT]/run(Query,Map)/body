{
  final GroupByQuery query=(GroupByQuery)queryParam;
  final boolean forceChainedExecution=query.getContextBoolean(CTX_KEY_MERGE_RUNNERS_USING_CHAINED_EXECUTION,false);
  final GroupByQuery queryForRunners=query.withOverriddenContext(ImmutableMap.<String,Object>of(CTX_KEY_MERGE_RUNNERS_USING_CHAINED_EXECUTION,true));
  if (BaseQuery.getContextBySegment(query,false) || forceChainedExecution) {
    return new ChainedExecutionQueryRunner(exec,queryWatcher,queryables).run(query,responseContext);
  }
  final AggregatorFactory[] combiningAggregatorFactories=new AggregatorFactory[query.getAggregatorSpecs().size()];
  for (int i=0; i < query.getAggregatorSpecs().size(); i++) {
    combiningAggregatorFactories[i]=query.getAggregatorSpecs().get(i).getCombiningFactory();
  }
  final GroupByMergingKeySerdeFactory keySerdeFactory=new GroupByMergingKeySerdeFactory(query.getDimensions().size(),config.getMaxMergingDictionarySize() / concurrencyHint);
  final GroupByMergingColumnSelectorFactory columnSelectorFactory=new GroupByMergingColumnSelectorFactory();
  final File temporaryStorageDirectory=new File(System.getProperty("java.io.tmpdir"),String.format("druid-groupBy-%s_%s",UUID.randomUUID(),query.getId()));
  final LimitedTemporaryStorage temporaryStorage=new LimitedTemporaryStorage(temporaryStorageDirectory,config.getMaxOnDiskStorage());
  final long startTime=System.currentTimeMillis();
  final Number timeout=query.getContextValue(QueryContextKeys.TIMEOUT,null);
  final long timeoutAt=timeout == null ? -1L : startTime + timeout.longValue();
  final ReferenceCountingResourceHolder<ByteBuffer> mergeBufferHolder;
  try {
    mergeBufferHolder=mergeBufferPool.take(timeout != null && timeout.longValue() > 0 ? timeout.longValue() : -1);
  }
 catch (  InterruptedException e) {
    CloseQuietly.close(temporaryStorage);
    Thread.currentThread().interrupt();
    throw Throwables.propagate(e);
  }
  final long processingStartTime=System.currentTimeMillis();
  try {
    return new ResourceClosingSequence<>(new BaseSequence<>(new BaseSequence.IteratorMaker<Row,CloseableGrouperIterator<GroupByMergingKey,Row>>(){
      @Override public CloseableGrouperIterator<GroupByMergingKey,Row> make(){
        final Grouper<GroupByMergingKey> grouper=new ConcurrentGrouper<>(mergeBufferHolder.get(),concurrencyHint,temporaryStorage,spillMapper,config.getBufferGrouperMaxSize(),GroupByStrategyV2.getBufferGrouperInitialBuckets(config,query),keySerdeFactory,columnSelectorFactory,combiningAggregatorFactories);
        final Accumulator<Grouper<GroupByMergingKey>,Row> accumulator=new Accumulator<Grouper<GroupByMergingKey>,Row>(){
          @Override public Grouper<GroupByMergingKey> accumulate(          final Grouper<GroupByMergingKey> theGrouper,          final Row row){
            if (theGrouper == null) {
              return null;
            }
            final long timestamp=row.getTimestampFromEpoch();
            final String[] dimensions=new String[query.getDimensions().size()];
            for (int i=0; i < dimensions.length; i++) {
              final Object dimValue=row.getRaw(query.getDimensions().get(i).getOutputName());
              dimensions[i]=Strings.nullToEmpty((String)dimValue);
            }
            columnSelectorFactory.setRow(row);
            final boolean didAggregate=theGrouper.aggregate(new GroupByMergingKey(timestamp,dimensions));
            if (!didAggregate) {
              return null;
            }
            columnSelectorFactory.setRow(null);
            return theGrouper;
          }
        }
;
        final int priority=BaseQuery.getContextPriority(query,0);
        final ReferenceCountingResourceHolder<Grouper<GroupByMergingKey>> grouperHolder=new ReferenceCountingResourceHolder<>(grouper,new Closeable(){
          @Override public void close() throws IOException {
            grouper.close();
          }
        }
);
        try {
          ListenableFuture<List<Boolean>> futures=Futures.allAsList(Lists.newArrayList(Iterables.transform(queryables,new Function<QueryRunner<Row>,ListenableFuture<Boolean>>(){
            @Override public ListenableFuture<Boolean> apply(            final QueryRunner<Row> input){
              if (input == null) {
                throw new ISE("Null queryRunner! Looks to be some segment unmapping action happening");
              }
              final Releaser bufferReleaser=mergeBufferHolder.increment();
              try {
                final Releaser grouperReleaser=grouperHolder.increment();
                try {
                  return exec.submit(new AbstractPrioritizedCallable<Boolean>(priority){
                    @Override public Boolean call() throws Exception {
                      try {
                        final Object retVal=input.run(queryForRunners,responseContext).accumulate(grouper,accumulator);
                        return retVal == grouper;
                      }
 catch (                      QueryInterruptedException e) {
                        throw e;
                      }
catch (                      Exception e) {
                        log.error(e,"Exception with one of the sequences!");
                        throw Throwables.propagate(e);
                      }
 finally {
                        grouperReleaser.close();
                        bufferReleaser.close();
                      }
                    }
                  }
);
                }
 catch (                Exception e) {
                  grouperReleaser.close();
                  throw e;
                }
              }
 catch (              Exception e) {
                bufferReleaser.close();
                throw e;
              }
            }
          }
)));
          waitForFutureCompletion(query,futures,timeoutAt - processingStartTime);
        }
 catch (        Exception e) {
          grouperHolder.close();
          throw e;
        }
        return new CloseableGrouperIterator<>(grouper,true,new Function<Grouper.Entry<GroupByMergingKey>,Row>(){
          @Override public Row apply(          Grouper.Entry<GroupByMergingKey> entry){
            Map<String,Object> theMap=Maps.newLinkedHashMap();
            for (int i=0; i < entry.getKey().getDimensions().length; i++) {
              theMap.put(query.getDimensions().get(i).getOutputName(),Strings.emptyToNull(entry.getKey().getDimensions()[i]));
            }
            for (int i=0; i < entry.getValues().length; i++) {
              theMap.put(query.getAggregatorSpecs().get(i).getName(),entry.getValues()[i]);
            }
            return new MapBasedRow(query.getGranularity().toDateTime(entry.getKey().getTimestamp()),theMap);
          }
        }
,new Closeable(){
          @Override public void close() throws IOException {
            grouperHolder.close();
          }
        }
);
      }
      @Override public void cleanup(      CloseableGrouperIterator<GroupByMergingKey,Row> iterFromMake){
        iterFromMake.close();
      }
    }
),new Closeable(){
      @Override public void close() throws IOException {
        mergeBufferHolder.close();
        CloseQuietly.close(temporaryStorage);
      }
    }
);
  }
 catch (  Exception e) {
    mergeBufferHolder.close();
    CloseQuietly.close(temporaryStorage);
    throw e;
  }
}

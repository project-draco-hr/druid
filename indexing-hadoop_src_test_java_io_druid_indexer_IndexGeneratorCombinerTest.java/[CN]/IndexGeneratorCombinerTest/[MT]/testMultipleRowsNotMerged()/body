{
  long timestamp=System.currentTimeMillis();
  Bucket bucket=new Bucket(0,new DateTime(timestamp),0);
  SortableBytes keySortableBytes=new SortableBytes(bucket.toGroupKey(),new byte[0]);
  BytesWritable key=keySortableBytes.toBytesWritable();
  InputRow row1=new MapBasedInputRow(timestamp,ImmutableList.<String>of("host","keywords"),ImmutableMap.<String,Object>of("host","host1","keywords",Arrays.asList("foo","bar"),"visited",10));
  InputRow row2=new MapBasedInputRow(timestamp,ImmutableList.<String>of("host","keywords"),ImmutableMap.<String,Object>of("host","host2","keywords",Arrays.asList("foo","bar"),"visited",5));
  List<BytesWritable> rows=Lists.newArrayList(new BytesWritable(InputRowSerde.toBytes(row1,aggregators,true)),new BytesWritable(InputRowSerde.toBytes(row2,aggregators,true)));
  Reducer.Context context=EasyMock.createNiceMock(Reducer.Context.class);
  Capture<BytesWritable> captureKey1=Capture.newInstance();
  Capture<BytesWritable> captureVal1=Capture.newInstance();
  Capture<BytesWritable> captureKey2=Capture.newInstance();
  Capture<BytesWritable> captureVal2=Capture.newInstance();
  context.write(EasyMock.capture(captureKey1),EasyMock.capture(captureVal1));
  context.write(EasyMock.capture(captureKey2),EasyMock.capture(captureVal2));
  EasyMock.replay(context);
  combiner.reduce(key,rows,context);
  EasyMock.verify(context);
  Assert.assertTrue(captureKey1.getValue() == key);
  Assert.assertTrue(captureKey2.getValue() == key);
  InputRow capturedRow1=InputRowSerde.fromBytes(captureVal1.getValue().getBytes(),aggregators);
  Assert.assertEquals(Arrays.asList("host","keywords"),capturedRow1.getDimensions());
  Assert.assertEquals(Arrays.asList("host1"),capturedRow1.getDimension("host"));
  Assert.assertEquals(Arrays.asList("bar","foo"),capturedRow1.getDimension("keywords"));
  Assert.assertEquals(10,capturedRow1.getLongMetric("visited_sum"));
  Assert.assertEquals(1.0,(Double)HyperUniquesAggregatorFactory.estimateCardinality(capturedRow1.getRaw("unique_hosts")),0.001);
  InputRow capturedRow2=InputRowSerde.fromBytes(captureVal2.getValue().getBytes(),aggregators);
  Assert.assertEquals(Arrays.asList("host","keywords"),capturedRow2.getDimensions());
  Assert.assertEquals(Arrays.asList("host2"),capturedRow2.getDimension("host"));
  Assert.assertEquals(Arrays.asList("bar","foo"),capturedRow2.getDimension("keywords"));
  Assert.assertEquals(5,capturedRow2.getLongMetric("visited_sum"));
  Assert.assertEquals(1.0,(Double)HyperUniquesAggregatorFactory.estimateCardinality(capturedRow2.getRaw("unique_hosts")),0.001);
}

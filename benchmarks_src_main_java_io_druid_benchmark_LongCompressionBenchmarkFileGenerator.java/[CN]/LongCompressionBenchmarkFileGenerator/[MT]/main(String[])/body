{
  if (args.length >= 1) {
    dirPath=args[0];
  }
  BenchmarkColumnSchema enumeratedSchema=BenchmarkColumnSchema.makeEnumerated("",ValueType.LONG,true,1,0d,ImmutableList.<Object>of(0,1,2,3,4),ImmutableList.of(0.95,0.001,0.0189,0.03,0.0001));
  BenchmarkColumnSchema zipfLowSchema=BenchmarkColumnSchema.makeZipf("",ValueType.LONG,true,1,0d,-1,1000,1d);
  BenchmarkColumnSchema zipfHighSchema=BenchmarkColumnSchema.makeZipf("",ValueType.LONG,true,1,0d,-1,1000,3d);
  BenchmarkColumnSchema sequentialSchema=BenchmarkColumnSchema.makeSequential("",ValueType.LONG,true,1,0d,1470187671,2000000000);
  BenchmarkColumnSchema uniformSchema=BenchmarkColumnSchema.makeDiscreteUniform("",ValueType.LONG,true,1,0d,0,1000);
  Map<String,BenchmarkColumnValueGenerator> generators=new HashMap<>();
  generators.put("enumerate",new BenchmarkColumnValueGenerator(enumeratedSchema,1));
  generators.put("zipfLow",new BenchmarkColumnValueGenerator(zipfLowSchema,1));
  generators.put("zipfHigh",new BenchmarkColumnValueGenerator(zipfHighSchema,1));
  generators.put("sequential",new BenchmarkColumnValueGenerator(sequentialSchema,1));
  generators.put("uniform",new BenchmarkColumnValueGenerator(uniformSchema,1));
  File dir=new File(dirPath);
  dir.mkdir();
  for (  Map.Entry<String,BenchmarkColumnValueGenerator> entry : generators.entrySet()) {
    final File dataFile=new File(dir,entry.getKey());
    dataFile.delete();
    try (Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(dataFile)))){
      for (int i=0; i < ROW_NUM; i++) {
        writer.write((long)entry.getValue().generateRowValue() + "\n");
      }
    }
   }
  for (  Map.Entry<String,BenchmarkColumnValueGenerator> entry : generators.entrySet()) {
    for (    CompressedObjectStrategy.CompressionStrategy compression : compressions) {
      for (      CompressionFactory.LongEncodingStrategy encoding : encodings) {
        String name=entry.getKey() + "-" + compression.toString()+ "-"+ encoding.toString();
        System.out.print(name + ": ");
        File compFile=new File(dir,name);
        compFile.delete();
        File dataFile=new File(dir,entry.getKey());
        TmpFileIOPeon iopeon=new TmpFileIOPeon(true);
        LongSupplierSerializer writer=CompressionFactory.getLongSerializer(iopeon,"long",ByteOrder.nativeOrder(),encoding,compression);
        BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(dataFile)));
        try (FileChannel output=FileChannel.open(compFile.toPath(),StandardOpenOption.CREATE_NEW,StandardOpenOption.WRITE)){
          writer.open();
          String line;
          while ((line=br.readLine()) != null) {
            writer.add(Long.parseLong(line));
          }
          final ByteArrayOutputStream baos=new ByteArrayOutputStream();
          writer.closeAndConsolidate(new ByteSink(){
            @Override public OutputStream openStream() throws IOException {
              return baos;
            }
          }
);
          output.write(ByteBuffer.wrap(baos.toByteArray()));
        }
  finally {
          iopeon.cleanup();
          br.close();
        }
        System.out.print(compFile.length() / 1024 + "\n");
      }
    }
  }
}

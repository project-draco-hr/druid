{
  this.warehose=warehose;
  this.smileMapper=smileMapper;
  this.httpClient=httpClient;
  this.baseView=baseView;
  this.clients=Maps.newConcurrentMap();
  this.selectors=Maps.newHashMap();
  this.timelines=Maps.newHashMap();
  ExecutorService exec=Execs.singleThreaded("BrokerServerView-%s");
  baseView.registerSegmentCallback(exec,new ServerView.SegmentCallback(){
    @Override public ServerView.CallbackAction segmentAdded(    DruidServer server,    DataSegment segment){
      serverAddedSegment(server,segment);
      return ServerView.CallbackAction.CONTINUE;
    }
    @Override public ServerView.CallbackAction segmentRemoved(    final DruidServer server,    DataSegment segment){
      serverRemovedSegment(server,segment);
      return ServerView.CallbackAction.CONTINUE;
    }
  }
);
  baseView.registerServerCallback(exec,new ServerView.ServerCallback(){
    @Override public ServerView.CallbackAction serverRemoved(    DruidServer server){
      removeServer(server);
      return ServerView.CallbackAction.CONTINUE;
    }
  }
);
}

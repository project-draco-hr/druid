{
  final Offset baseOffset=offset.clone();
  final Map<String,Object> metricHolderCache=Maps.newHashMap();
  final IndexedLongs timestamps=index.getReadOnlyTimestamps();
  final FunctionalIterator<Cursor> retVal=FunctionalIterator.create(gran.iterable(interval.getStartMillis(),interval.getEndMillis()).iterator()).transform(new Function<Long,Cursor>(){
    @Override public Cursor apply(    final Long input){
      final long timeStart=Math.max(interval.getStartMillis(),input);
      while (baseOffset.withinBounds() && timestamps.get(baseOffset.getOffset()) < timeStart) {
        baseOffset.increment();
      }
      final Offset offset=new TimestampCheckingOffset(baseOffset,timestamps,Math.min(interval.getEndMillis(),gran.next(timeStart)));
      return new Cursor(){
        private final Offset initOffset=offset.clone();
        private final DateTime myBucket=gran.toDateTime(input);
        private Offset cursorOffset=offset;
        @Override public DateTime getTime(){
          return myBucket;
        }
        @Override public void advance(){
          cursorOffset.increment();
        }
        @Override public boolean isDone(){
          return !cursorOffset.withinBounds();
        }
        @Override public void reset(){
          cursorOffset=initOffset.clone();
        }
        @Override public DimensionSelector makeDimensionSelector(        String dimension){
          final String dimensionName=dimension.toLowerCase();
          final Indexed<? extends IndexedInts> rowVals=index.getDimColumn(dimensionName);
          final Indexed<String> dimValueLookup=index.getDimValueLookup(dimensionName);
          if (rowVals == null) {
            return null;
          }
          return new DimensionSelector(){
            @Override public IndexedInts getRow(){
              return rowVals.get(cursorOffset.getOffset());
            }
            @Override public int getValueCardinality(){
              return dimValueLookup.size();
            }
            @Override public String lookupName(            int id){
              final String retVal=dimValueLookup.get(id);
              return retVal == null ? "" : retVal;
            }
            @Override public int lookupId(            String name){
              return ("".equals(name)) ? dimValueLookup.indexOf(null) : dimValueLookup.indexOf(name);
            }
          }
;
        }
        @Override public FloatMetricSelector makeFloatMetricSelector(        String metric){
          final String metricName=metric.toLowerCase();
          IndexedFloats cachedMetricVals=(IndexedFloats)metricHolderCache.get(metricName);
          if (cachedMetricVals == null) {
            MetricHolder holder=index.getMetricHolder(metricName);
            if (holder != null) {
              cachedMetricVals=holder.getFloatType();
              metricHolderCache.put(metricName,cachedMetricVals);
            }
          }
          if (cachedMetricVals == null) {
            return new FloatMetricSelector(){
              @Override public float get(){
                return 0.0f;
              }
            }
;
          }
          final IndexedFloats metricVals=cachedMetricVals;
          return new FloatMetricSelector(){
            @Override public float get(){
              return metricVals.get(cursorOffset.getOffset());
            }
          }
;
        }
        @Override public ComplexMetricSelector makeComplexMetricSelector(        String metric){
          final String metricName=metric.toLowerCase();
          Indexed cachedMetricVals=(Indexed)metricHolderCache.get(metricName);
          if (cachedMetricVals == null) {
            MetricHolder holder=index.getMetricHolder(metricName);
            if (holder != null) {
              cachedMetricVals=holder.getComplexType();
              metricHolderCache.put(metricName,cachedMetricVals);
            }
          }
          if (cachedMetricVals == null) {
            return null;
          }
          final Indexed metricVals=cachedMetricVals;
          return new ComplexMetricSelector(){
            @Override public Class classOfObject(){
              return metricVals.getClazz();
            }
            @Override public Object get(){
              return metricVals.get(cursorOffset.getOffset());
            }
          }
;
        }
      }
;
    }
  }
);
  return MoreIterators.after(retVal,new Runnable(){
    @Override public void run(){
      Closeables.closeQuietly(timestamps);
      for (      Object object : metricHolderCache.values()) {
        if (object instanceof Closeable) {
          Closeables.closeQuietly((Closeable)object);
        }
      }
    }
  }
);
}

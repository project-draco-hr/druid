{
  final Map<String,Object> metricCacheMap=Maps.newHashMap();
  final IndexedLongs timestamps=index.getReadOnlyTimestamps();
  final FunctionalIterator<Cursor> retVal=FunctionalIterator.create(gran.iterable(interval.getStartMillis(),interval.getEndMillis()).iterator()).transform(new Function<Long,Cursor>(){
    private int currRow=0;
    @Override public Cursor apply(    final Long input){
      final long timeStart=Math.max(interval.getStartMillis(),input);
      while (currRow < timestamps.size() && timestamps.get(currRow) < timeStart) {
        ++currRow;
      }
      return new Cursor(){
        private final DateTime myBucket=gran.toDateTime(input);
        private final long nextBucket=Math.min(gran.next(myBucket.getMillis()),interval.getEndMillis());
        private final int initRow=currRow;
        @Override public DateTime getTime(){
          return myBucket;
        }
        @Override public void advance(){
          ++currRow;
        }
        @Override public boolean isDone(){
          return currRow >= timestamps.size() || timestamps.get(currRow) >= nextBucket;
        }
        @Override public void reset(){
          currRow=initRow;
        }
        @Override public DimensionSelector makeDimensionSelector(        final String dimensionName){
          final Indexed<? extends IndexedInts> rowVals=index.getDimColumn(dimensionName);
          final Indexed<String> dimValueLookup=index.getDimValueLookup(dimensionName);
          if (rowVals == null) {
            return null;
          }
          return new DimensionSelector(){
            @Override public IndexedInts getRow(){
              return rowVals.get(currRow);
            }
            @Override public int getValueCardinality(){
              return dimValueLookup.size();
            }
            @Override public String lookupName(            int id){
              final String retVal=dimValueLookup.get(id);
              return retVal == null ? "" : retVal;
            }
            @Override public int lookupId(            String name){
              return ("".equals(name)) ? dimValueLookup.indexOf(null) : dimValueLookup.indexOf(name);
            }
          }
;
        }
        @Override public FloatMetricSelector makeFloatMetricSelector(        String metricName){
          IndexedFloats cachedMetricVals=(IndexedFloats)metricCacheMap.get(metricName);
          if (cachedMetricVals == null) {
            final MetricHolder metricHolder=index.getMetricHolder(metricName);
            if (metricHolder != null) {
              cachedMetricVals=metricHolder.getFloatType();
              if (cachedMetricVals != null) {
                metricCacheMap.put(metricName,cachedMetricVals);
              }
            }
          }
          if (cachedMetricVals == null) {
            return new FloatMetricSelector(){
              @Override public float get(){
                return 0.0f;
              }
            }
;
          }
          final IndexedFloats metricVals=cachedMetricVals;
          return new FloatMetricSelector(){
            @Override public float get(){
              return metricVals.get(currRow);
            }
          }
;
        }
        @Override public ComplexMetricSelector makeComplexMetricSelector(        String metricName){
          Indexed cachedMetricVals=(Indexed)metricCacheMap.get(metricName);
          if (cachedMetricVals == null) {
            final MetricHolder metricHolder=index.getMetricHolder(metricName);
            if (metricHolder != null) {
              cachedMetricVals=metricHolder.getComplexType();
              if (cachedMetricVals != null) {
                metricCacheMap.put(metricName,cachedMetricVals);
              }
            }
          }
          if (cachedMetricVals == null) {
            return null;
          }
          final Indexed metricVals=cachedMetricVals;
          return new ComplexMetricSelector(){
            @Override public Class classOfObject(){
              return metricVals.getClazz();
            }
            @Override public Object get(){
              return metricVals.get(currRow);
            }
          }
;
        }
      }
;
    }
  }
);
  return MoreIterators.after(retVal,new Runnable(){
    @Override public void run(){
      Closeables.closeQuietly(timestamps);
      for (      Object object : metricCacheMap.values()) {
        if (object instanceof Closeable) {
          Closeables.closeQuietly((Closeable)object);
        }
      }
    }
  }
);
}

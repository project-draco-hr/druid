{
  final int combinedHistSize=200;
  final int histSize=50;
  final int numRand=10000;
  ApproximateHistogram h=new ApproximateHistogram(combinedHistSize);
  Random rand=new Random(0);
  long tFold=0;
  int count=5000000;
  Float[] randNums=new Float[numRand];
  for (int i=0; i < numRand; i++) {
    randNums[i]=(float)rand.nextGaussian();
  }
  List<ApproximateHistogram> randHist=Lists.newLinkedList();
  Iterator<ApproximateHistogram> it=Iterators.cycle(randHist);
  for (int k=0; k < numRand; ++k) {
    ApproximateHistogram tmp=new ApproximateHistogram(histSize);
    for (int i=0; i < 20; ++i) {
      tmp.offer((float)(rand.nextGaussian() + (double)k));
    }
    randHist.add(tmp);
  }
  float[] mergeBufferP=new float[combinedHistSize * 2];
  long[] mergeBufferB=new long[combinedHistSize * 2];
  float[] mergeBufferD=new float[combinedHistSize * 2];
  for (int i=0; i < count; ++i) {
    ApproximateHistogram tmp=it.next();
    long t0=System.nanoTime();
    h.foldFast(tmp,mergeBufferP,mergeBufferB);
    tFold+=System.nanoTime() - t0;
  }
  System.out.println(String.format("Average folds per second : %f",(double)count / (double)tFold * 1e9));
}

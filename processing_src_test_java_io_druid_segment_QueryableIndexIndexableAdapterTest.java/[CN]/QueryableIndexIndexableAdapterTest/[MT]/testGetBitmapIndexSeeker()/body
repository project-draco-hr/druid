{
  final long timestamp=System.currentTimeMillis();
  IncrementalIndex toPersist=IncrementalIndexTest.createIndex(null);
  IncrementalIndexTest.populateIndex(timestamp,toPersist);
  final File tempDir=temporaryFolder.newFolder();
  final IndexableAdapter incrementalAdapter=new IncrementalIndexAdapter(toPersist.getInterval(),toPersist,INDEX_SPEC.getBitmapSerdeFactory().getBitmapFactory());
  QueryableIndex index=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist,tempDir,null,INDEX_SPEC)));
  IndexableAdapter adapter=new QueryableIndexIndexableAdapter(index);
  BitmapIndexSeeker bitmapIndexSeeker=adapter.getBitmapIndexSeeker("dim1");
  IndexedInts indexedInts0=bitmapIndexSeeker.seek("0");
  Assert.assertEquals(0,indexedInts0.size());
  IndexedInts indexedInts1=bitmapIndexSeeker.seek("1");
  Assert.assertEquals(1,indexedInts1.size());
  try {
    bitmapIndexSeeker.seek("4");
    Assert.assertFalse("Only support access in order",true);
  }
 catch (  ISE ise) {
    Assert.assertTrue("Only support access in order",true);
  }
  IndexedInts indexedInts2=bitmapIndexSeeker.seek("2");
  Assert.assertEquals(0,indexedInts2.size());
  IndexedInts indexedInts3=bitmapIndexSeeker.seek("3");
  Assert.assertEquals(1,indexedInts3.size());
  IndexedInts indexedInts4=bitmapIndexSeeker.seek("4");
  Assert.assertEquals(0,indexedInts4.size());
}

{
  final ListeningExecutorService executorService=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(concurrentThreads,new ThreadFactoryBuilder().setDaemon(false).setNameFormat("indexible-writes-benchmark-reader-%d").build()));
  final AtomicInteger index=new AtomicInteger(0);
  final AtomicInteger queryableIndex=new AtomicInteger(0);
  List<ListenableFuture<?>> futures=new LinkedList<>();
  final Integer loops=totalIndexSize / concurrentThreads;
  final AtomicBoolean done=new AtomicBoolean(false);
  final CountDownLatch start=new CountDownLatch(1);
  for (int i=0; i < concurrentThreads; ++i) {
    futures.add(executorService.submit(new Runnable(){
      @Override public void run(){
        try {
          start.await();
        }
 catch (        InterruptedException e) {
          throw Throwables.propagate(e);
        }
        final Random rndGen=new Random();
        while (!done.get()) {
          Integer idx=rndGen.nextInt(queryableIndex.get() + 1);
          Assert.assertEquals(idx,concurrentIndexible.get(idx));
        }
      }
    }
));
  }
{
    final Integer idx=index.getAndIncrement();
    concurrentIndexible.set(idx,idx);
    start.countDown();
  }
  for (int i=1; i < totalIndexSize; ++i) {
    final Integer idx=index.getAndIncrement();
    concurrentIndexible.set(idx,idx);
    queryableIndex.incrementAndGet();
  }
  done.set(true);
  Futures.allAsList(futures).get();
  executorService.shutdown();
  Assert.assertTrue(String.format("Index too small %d, expected %d across %d loops",index.get(),totalIndexSize,loops),index.get() >= totalIndexSize);
  for (int i=0; i < index.get(); ++i) {
    Assert.assertEquals(i,concurrentIndexible.get(i).intValue());
  }
  concurrentIndexible.clear();
  futures.clear();
}

{
  IncrementalIndex toPersist1=getIndexD3();
  IncrementalIndex toPersist2=getIndexD3();
  IncrementalIndex toPersist3=getIndexD3();
  final File tmpDir=temporaryFolder.newFolder();
  final File tmpDir2=temporaryFolder.newFolder();
  final File tmpDir3=temporaryFolder.newFolder();
  final File tmpDirMerged=temporaryFolder.newFolder();
  QueryableIndex index1=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist1,tmpDir,indexSpec)));
  QueryableIndex index2=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist2,tmpDir2,indexSpec)));
  QueryableIndex index3=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist3,tmpDir3,indexSpec)));
  final QueryableIndex merged=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.mergeQueryableIndex(Arrays.asList(index1,index2,index3),new AggregatorFactory[]{new CountAggregatorFactory("count")},tmpDirMerged,indexSpec)));
  final IndexableAdapter adapter=new QueryableIndexIndexableAdapter(merged);
  Iterable<Rowboat> boats=adapter.getRows();
  List<Rowboat> boatList=new ArrayList<>();
  for (  Rowboat boat : boats) {
    boatList.add(boat);
  }
  Assert.assertEquals(ImmutableList.of("d3","d1","d2"),ImmutableList.copyOf(adapter.getDimensionNames()));
  Assert.assertEquals(3,boatList.size());
  Assert.assertArrayEquals(new int[][]{{1},{1},{3}},boatList.get(0).getDims());
  Assert.assertArrayEquals(new Object[]{3L},boatList.get(0).getMetrics());
  Assert.assertArrayEquals(new int[][]{{2},{3},{1}},boatList.get(1).getDims());
  Assert.assertArrayEquals(new Object[]{3L},boatList.get(1).getMetrics());
  Assert.assertArrayEquals(new int[][]{{3},{2},{2}},boatList.get(2).getDims());
  Assert.assertArrayEquals(new Object[]{3L},boatList.get(2).getMetrics());
}

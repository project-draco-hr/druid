{
  IncrementalIndex index1=IncrementalIndexTest.createIndex(new AggregatorFactory[]{new LongSumAggregatorFactory("A","A")});
  closer.closeLater(index1);
  long timestamp=System.currentTimeMillis();
  index1.add(new MapBasedInputRow(timestamp,Arrays.asList("dim1","dim2"),ImmutableMap.<String,Object>of("dim1","1","dim2","2","A",5)));
  IncrementalIndex index2=IncrementalIndexTest.createIndex(new AggregatorFactory[]{new LongSumAggregatorFactory("A","A"),new LongSumAggregatorFactory("C","C")});
  index2.add(new MapBasedInputRow(timestamp,Arrays.asList("dim1","dim2"),ImmutableMap.<String,Object>of("dim1","1","dim2","2","A",5,"C",6)));
  closer.closeLater(index2);
  Interval interval=new Interval(0,new DateTime().getMillis());
  RoaringBitmapFactory factory=new RoaringBitmapFactory();
  ArrayList<IndexableAdapter> toMerge=Lists.<IndexableAdapter>newArrayList(new IncrementalIndexAdapter(interval,index1,factory),new IncrementalIndexAdapter(interval,index2,factory));
  final File tmpDirMerged=temporaryFolder.newFolder();
  File merged=INDEX_MERGER.merge(toMerge,new AggregatorFactory[]{new LongSumAggregatorFactory("A","A"),new LongSumAggregatorFactory("C","C")},tmpDirMerged,indexSpec);
  final QueryableIndexStorageAdapter adapter=new QueryableIndexStorageAdapter(closer.closeLater(INDEX_IO.loadIndex(merged)));
  Assert.assertEquals(ImmutableSet.of("A","C"),ImmutableSet.copyOf(adapter.getAvailableMetrics()));
}

{
  IncrementalIndexSchema schema=new IncrementalIndexSchema.Builder().withDimensionsSpec(new DimensionsSpec(DimensionsSpec.getDefaultSchemas(Arrays.asList("dimA","dimB","dimC")),null,null)).withMinTimestamp(0L).withQueryGranularity(QueryGranularity.NONE).withMetrics(new AggregatorFactory[]{new CountAggregatorFactory("count")}).build();
  IncrementalIndex toPersist1=new OnheapIncrementalIndex(schema,true,1000);
  IncrementalIndex toPersist2=new OnheapIncrementalIndex(schema,true,1000);
  IncrementalIndex toPersist3=new OnheapIncrementalIndex(schema,true,1000);
  addDimValuesToIndex(toPersist1,"dimA",Arrays.asList("1","2"));
  addDimValuesToIndex(toPersist2,"dimA",Arrays.asList("1","2"));
  addDimValuesToIndex(toPersist3,"dimC",Arrays.asList("1","2"));
  final File tmpDir=temporaryFolder.newFolder();
  final File tmpDir2=temporaryFolder.newFolder();
  final File tmpDir3=temporaryFolder.newFolder();
  final File tmpDirMerged=temporaryFolder.newFolder();
  QueryableIndex index1=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist1,tmpDir,indexSpec)));
  QueryableIndex index2=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist2,tmpDir2,indexSpec)));
  QueryableIndex index3=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist3,tmpDir3,indexSpec)));
  final QueryableIndex merged=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.mergeQueryableIndex(Arrays.asList(index1,index2,index3),new AggregatorFactory[]{new CountAggregatorFactory("count")},tmpDirMerged,indexSpec)));
  final QueryableIndexIndexableAdapter adapter=new QueryableIndexIndexableAdapter(merged);
  final List<Rowboat> boatList=ImmutableList.copyOf(adapter.getRows());
  Assert.assertEquals(ImmutableList.of("dimA","dimC"),ImmutableList.copyOf(adapter.getDimensionNames()));
  Assert.assertEquals(4,boatList.size());
  Assert.assertArrayEquals(new int[][]{{0},{1}},boatList.get(0).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList.get(0).getMetrics());
  Assert.assertArrayEquals(new int[][]{{0},{2}},boatList.get(1).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList.get(1).getMetrics());
  Assert.assertArrayEquals(new int[][]{{1},{0}},boatList.get(2).getDims());
  Assert.assertArrayEquals(new Object[]{2L},boatList.get(2).getMetrics());
  Assert.assertArrayEquals(new int[][]{{2},{0}},boatList.get(3).getDims());
  Assert.assertArrayEquals(new Object[]{2L},boatList.get(3).getMetrics());
  checkBitmapIndex(Lists.newArrayList(0,1),adapter.getBitmapIndex("dimA",""));
  checkBitmapIndex(Lists.newArrayList(2),adapter.getBitmapIndex("dimA","1"));
  checkBitmapIndex(Lists.newArrayList(3),adapter.getBitmapIndex("dimA","2"));
  checkBitmapIndex(new ArrayList<Integer>(),adapter.getBitmapIndex("dimB",""));
  checkBitmapIndex(Lists.newArrayList(2,3),adapter.getBitmapIndex("dimC",""));
  checkBitmapIndex(Lists.newArrayList(0),adapter.getBitmapIndex("dimC","1"));
  checkBitmapIndex(Lists.newArrayList(1),adapter.getBitmapIndex("dimC","2"));
}

{
  IncrementalIndex toPersistA=getSingleDimIndex("dimA",Arrays.asList("1","2"));
  IncrementalIndex toPersistB=getSingleDimIndex("dimB",Arrays.asList("1","2","3"));
  IncrementalIndex toPersistBA=getSingleDimIndex("dimB",Arrays.asList("1","2","3"));
  addDimValuesToIndex(toPersistBA,"dimA",Arrays.asList("1","2"));
  IncrementalIndex toPersistBA2=new OnheapIncrementalIndex(0L,QueryGranularities.NONE,new AggregatorFactory[]{new CountAggregatorFactory("count")},1000);
  toPersistBA2.add(new MapBasedInputRow(1,Arrays.asList("dimB","dimA"),ImmutableMap.<String,Object>of("dimB","1","dimA","")));
  toPersistBA2.add(new MapBasedInputRow(1,Arrays.asList("dimB","dimA"),ImmutableMap.<String,Object>of("dimB","","dimA","1")));
  IncrementalIndex toPersistC=getSingleDimIndex("dimA",Arrays.asList("1","2"));
  addDimValuesToIndex(toPersistC,"dimC",Arrays.asList("1","2","3"));
  final File tmpDirA=temporaryFolder.newFolder();
  final File tmpDirB=temporaryFolder.newFolder();
  final File tmpDirBA=temporaryFolder.newFolder();
  final File tmpDirBA2=temporaryFolder.newFolder();
  final File tmpDirC=temporaryFolder.newFolder();
  final File tmpDirMerged=temporaryFolder.newFolder();
  final File tmpDirMerged2=temporaryFolder.newFolder();
  QueryableIndex indexA=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersistA,tmpDirA,indexSpec)));
  QueryableIndex indexB=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersistB,tmpDirB,indexSpec)));
  QueryableIndex indexBA=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersistBA,tmpDirBA,indexSpec)));
  QueryableIndex indexBA2=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersistBA2,tmpDirBA2,indexSpec)));
  QueryableIndex indexC=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersistC,tmpDirC,indexSpec)));
  final QueryableIndex merged=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.mergeQueryableIndex(Arrays.asList(indexA,indexB,indexBA,indexBA2),new AggregatorFactory[]{new CountAggregatorFactory("count")},tmpDirMerged,indexSpec)));
  final QueryableIndex merged2=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.mergeQueryableIndex(Arrays.asList(indexA,indexB,indexBA,indexC),new AggregatorFactory[]{new CountAggregatorFactory("count")},tmpDirMerged2,indexSpec)));
  final QueryableIndexIndexableAdapter adapter=new QueryableIndexIndexableAdapter(merged);
  final List<Rowboat> boatList=ImmutableList.copyOf(adapter.getRows());
  final QueryableIndexIndexableAdapter adapter2=new QueryableIndexIndexableAdapter(merged2);
  final List<Rowboat> boatList2=ImmutableList.copyOf(adapter2.getRows());
  Assert.assertEquals(ImmutableList.of("dimB","dimA"),ImmutableList.copyOf(adapter.getDimensionNames()));
  Assert.assertEquals(5,boatList.size());
  Assert.assertArrayEquals(new int[][]{{0},{1}},boatList.get(0).getDims());
  Assert.assertArrayEquals(new Object[]{3L},boatList.get(0).getMetrics());
  Assert.assertArrayEquals(new int[][]{{0},{2}},boatList.get(1).getDims());
  Assert.assertArrayEquals(new Object[]{2L},boatList.get(1).getMetrics());
  Assert.assertArrayEquals(new int[][]{{1},{0}},boatList.get(2).getDims());
  Assert.assertArrayEquals(new Object[]{3L},boatList.get(2).getMetrics());
  Assert.assertArrayEquals(new int[][]{{2},{0}},boatList.get(3).getDims());
  Assert.assertArrayEquals(new Object[]{2L},boatList.get(3).getMetrics());
  Assert.assertArrayEquals(new int[][]{{3},{0}},boatList.get(4).getDims());
  Assert.assertArrayEquals(new Object[]{2L},boatList.get(4).getMetrics());
  checkBitmapIndex(Lists.newArrayList(2,3,4),adapter.getBitmapIndex("dimA",""));
  checkBitmapIndex(Lists.newArrayList(0),adapter.getBitmapIndex("dimA","1"));
  checkBitmapIndex(Lists.newArrayList(1),adapter.getBitmapIndex("dimA","2"));
  checkBitmapIndex(Lists.newArrayList(0,1),adapter.getBitmapIndex("dimB",""));
  checkBitmapIndex(Lists.newArrayList(2),adapter.getBitmapIndex("dimB","1"));
  checkBitmapIndex(Lists.newArrayList(3),adapter.getBitmapIndex("dimB","2"));
  checkBitmapIndex(Lists.newArrayList(4),adapter.getBitmapIndex("dimB","3"));
  Assert.assertEquals(ImmutableList.of("dimA","dimB","dimC"),ImmutableList.copyOf(adapter2.getDimensionNames()));
  Assert.assertEquals(12,boatList2.size());
  Assert.assertArrayEquals(new int[][]{{0},{0},{1}},boatList2.get(0).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList2.get(0).getMetrics());
  Assert.assertArrayEquals(new int[][]{{0},{0},{2}},boatList2.get(1).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList2.get(1).getMetrics());
  Assert.assertArrayEquals(new int[][]{{0},{0},{3}},boatList2.get(2).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList2.get(2).getMetrics());
  Assert.assertArrayEquals(new int[][]{{0},{1},{0}},boatList2.get(3).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList2.get(3).getMetrics());
  Assert.assertArrayEquals(new int[][]{{0},{2},{0}},boatList2.get(4).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList2.get(4).getMetrics());
  Assert.assertArrayEquals(new int[][]{{0},{3},{0}},boatList2.get(5).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList2.get(5).getMetrics());
  Assert.assertArrayEquals(new int[][]{{1},{0},{0}},boatList2.get(6).getDims());
  Assert.assertArrayEquals(new Object[]{3L},boatList2.get(6).getMetrics());
  Assert.assertArrayEquals(new int[][]{{2},{0},{0}},boatList2.get(7).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList2.get(7).getMetrics());
  Assert.assertArrayEquals(new int[][]{{0},{1},{0}},boatList2.get(8).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList2.get(8).getMetrics());
  Assert.assertArrayEquals(new int[][]{{0},{2},{0}},boatList2.get(9).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList2.get(9).getMetrics());
  Assert.assertArrayEquals(new int[][]{{0},{3},{0}},boatList2.get(10).getDims());
  Assert.assertArrayEquals(new Object[]{1L},boatList2.get(10).getMetrics());
  Assert.assertArrayEquals(new int[][]{{2},{0},{0}},boatList2.get(11).getDims());
  Assert.assertArrayEquals(new Object[]{2L},boatList2.get(11).getMetrics());
  checkBitmapIndex(Lists.newArrayList(0,1,2,3,4,5,8,9,10),adapter2.getBitmapIndex("dimA",""));
  checkBitmapIndex(Lists.newArrayList(6),adapter2.getBitmapIndex("dimA","1"));
  checkBitmapIndex(Lists.newArrayList(7,11),adapter2.getBitmapIndex("dimA","2"));
  checkBitmapIndex(Lists.newArrayList(0,1,2,6,7,11),adapter2.getBitmapIndex("dimB",""));
  checkBitmapIndex(Lists.newArrayList(3,8),adapter2.getBitmapIndex("dimB","1"));
  checkBitmapIndex(Lists.newArrayList(4,9),adapter2.getBitmapIndex("dimB","2"));
  checkBitmapIndex(Lists.newArrayList(5,10),adapter2.getBitmapIndex("dimB","3"));
  checkBitmapIndex(Lists.newArrayList(3,4,5,6,7,8,9,10,11),adapter2.getBitmapIndex("dimC",""));
  checkBitmapIndex(Lists.newArrayList(0),adapter2.getBitmapIndex("dimC","1"));
  checkBitmapIndex(Lists.newArrayList(1),adapter2.getBitmapIndex("dimC","2"));
  checkBitmapIndex(Lists.newArrayList(2),adapter2.getBitmapIndex("dimC","3"));
}

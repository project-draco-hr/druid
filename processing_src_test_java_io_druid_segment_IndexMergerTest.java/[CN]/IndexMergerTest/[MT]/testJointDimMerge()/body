{
  IncrementalIndex toPersistA=new OnheapIncrementalIndex(0L,QueryGranularity.NONE,new AggregatorFactory[]{new CountAggregatorFactory("count")},1000);
  toPersistA.add(new MapBasedInputRow(1,Arrays.asList("d1","d2","d3","d4","d5","d6","d7","d8","d9"),ImmutableMap.<String,Object>of("d1","","d2","","d3","310","d7","","d9","910")));
  toPersistA.add(new MapBasedInputRow(2,Arrays.asList("d1","d2","d3","d4","d5","d6","d7","d8","d9"),ImmutableMap.<String,Object>of("d2","210","d3","311","d7","710","d8","810","d9","911")));
  IncrementalIndex toPersistB=new OnheapIncrementalIndex(0L,QueryGranularity.NONE,new AggregatorFactory[]{new CountAggregatorFactory("count")},1000);
  toPersistB.add(new MapBasedInputRow(3,Arrays.asList("d4","d5","d6","d7","d8","d9"),ImmutableMap.<String,Object>of("d5","520","d6","620","d7","720","d8","820","d9","920")));
  toPersistB.add(new MapBasedInputRow(4,Arrays.asList("d4","d5","d6","d7","d8","d9"),ImmutableMap.<String,Object>of("d5","","d6","621","d7","","d8","821","d9","921")));
  final File tmpDirA=temporaryFolder.newFolder();
  final File tmpDirB=temporaryFolder.newFolder();
  final File tmpDirMerged=temporaryFolder.newFolder();
  QueryableIndex indexA=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersistA,tmpDirA,indexSpec)));
  QueryableIndex indexB=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersistB,tmpDirB,indexSpec)));
  final QueryableIndex merged=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.mergeQueryableIndex(Arrays.asList(indexA,indexB),new AggregatorFactory[]{new CountAggregatorFactory("count")},tmpDirMerged,indexSpec)));
  final IndexableAdapter adapter=new QueryableIndexIndexableAdapter(merged);
  Iterable<Rowboat> boats=adapter.getRows();
  List<Rowboat> boatList=new ArrayList<>();
  for (  Rowboat boat : boats) {
    boatList.add(boat);
  }
  Assert.assertEquals(ImmutableList.of("d2","d3","d5","d6","d7","d8","d9"),ImmutableList.copyOf(adapter.getDimensionNames()));
  Assert.assertEquals(4,boatList.size());
  Assert.assertArrayEquals(new int[][]{{0},{1},{0},{0},{0},{0},{0}},boatList.get(0).getDims());
  Assert.assertArrayEquals(new int[][]{{1},{2},{0},{0},{1},{1},{1}},boatList.get(1).getDims());
  Assert.assertArrayEquals(new int[][]{{0},{0},{1},{1},{2},{2},{2}},boatList.get(2).getDims());
  Assert.assertArrayEquals(new int[][]{{0},{0},{0},{2},{0},{3},{3}},boatList.get(3).getDims());
  checkBitmapIndex(Lists.newArrayList(0,2,3),adapter.getBitmapIndex("d2",""));
  checkBitmapIndex(Lists.newArrayList(1),adapter.getBitmapIndex("d2","210"));
  checkBitmapIndex(Lists.newArrayList(2,3),adapter.getBitmapIndex("d3",""));
  checkBitmapIndex(Lists.newArrayList(0),adapter.getBitmapIndex("d3","310"));
  checkBitmapIndex(Lists.newArrayList(1),adapter.getBitmapIndex("d3","311"));
  checkBitmapIndex(Lists.newArrayList(0,1,3),adapter.getBitmapIndex("d5",""));
  checkBitmapIndex(Lists.newArrayList(2),adapter.getBitmapIndex("d5","520"));
  checkBitmapIndex(Lists.newArrayList(0,1),adapter.getBitmapIndex("d6",""));
  checkBitmapIndex(Lists.newArrayList(2),adapter.getBitmapIndex("d6","620"));
  checkBitmapIndex(Lists.newArrayList(3),adapter.getBitmapIndex("d6","621"));
  checkBitmapIndex(Lists.newArrayList(0,3),adapter.getBitmapIndex("d7",""));
  checkBitmapIndex(Lists.newArrayList(1),adapter.getBitmapIndex("d7","710"));
  checkBitmapIndex(Lists.newArrayList(2),adapter.getBitmapIndex("d7","720"));
  checkBitmapIndex(Lists.newArrayList(0),adapter.getBitmapIndex("d8",""));
  checkBitmapIndex(Lists.newArrayList(1),adapter.getBitmapIndex("d8","810"));
  checkBitmapIndex(Lists.newArrayList(2),adapter.getBitmapIndex("d8","820"));
  checkBitmapIndex(Lists.newArrayList(3),adapter.getBitmapIndex("d8","821"));
  checkBitmapIndex(new ArrayList<Integer>(),adapter.getBitmapIndex("d9",""));
  checkBitmapIndex(Lists.newArrayList(0),adapter.getBitmapIndex("d9","910"));
  checkBitmapIndex(Lists.newArrayList(1),adapter.getBitmapIndex("d9","911"));
  checkBitmapIndex(Lists.newArrayList(2),adapter.getBitmapIndex("d9","920"));
  checkBitmapIndex(Lists.newArrayList(3),adapter.getBitmapIndex("d9","921"));
}

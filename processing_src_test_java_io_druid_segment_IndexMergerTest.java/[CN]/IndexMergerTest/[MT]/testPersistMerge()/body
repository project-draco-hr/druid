{
  final long timestamp=System.currentTimeMillis();
  IncrementalIndex toPersist1=IncrementalIndexTest.createIndex(true,null);
  IncrementalIndexTest.populateIndex(timestamp,toPersist1);
  IncrementalIndex toPersist2=new OnheapIncrementalIndex(0L,QueryGranularity.NONE,new AggregatorFactory[]{new CountAggregatorFactory("count")},1000);
  toPersist2.add(new MapBasedInputRow(timestamp,Arrays.asList("dim1","dim2"),ImmutableMap.<String,Object>of("dim1","1","dim2","2")));
  toPersist2.add(new MapBasedInputRow(timestamp,Arrays.asList("dim1","dim2"),ImmutableMap.<String,Object>of("dim1","5","dim2","6")));
  final File tempDir1=temporaryFolder.newFolder();
  final File tempDir2=temporaryFolder.newFolder();
  final File mergedDir=temporaryFolder.newFolder();
  QueryableIndex index1=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist1,tempDir1,null,indexSpec)));
  Assert.assertEquals(2,index1.getColumn(Column.TIME_COLUMN_NAME).getLength());
  Assert.assertEquals(Arrays.asList("dim1","dim2"),Lists.newArrayList(index1.getAvailableDimensions()));
  Assert.assertEquals(3,index1.getColumnNames().size());
  QueryableIndex index2=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist2,tempDir2,null,indexSpec)));
  Assert.assertEquals(2,index2.getColumn(Column.TIME_COLUMN_NAME).getLength());
  Assert.assertEquals(Arrays.asList("dim1","dim2"),Lists.newArrayList(index2.getAvailableDimensions()));
  Assert.assertEquals(3,index2.getColumnNames().size());
  QueryableIndex merged=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.mergeQueryableIndex(Arrays.asList(index1,index2),new AggregatorFactory[]{new CountAggregatorFactory("count")},mergedDir,indexSpec)));
  Assert.assertEquals(3,merged.getColumn(Column.TIME_COLUMN_NAME).getLength());
  Assert.assertEquals(Arrays.asList("dim1","dim2"),Lists.newArrayList(merged.getAvailableDimensions()));
  Assert.assertEquals(3,merged.getColumnNames().size());
  assertDimCompression(index2,indexSpec.getDimensionCompressionStrategy());
  assertDimCompression(index1,indexSpec.getDimensionCompressionStrategy());
  assertDimCompression(merged,indexSpec.getDimensionCompressionStrategy());
}

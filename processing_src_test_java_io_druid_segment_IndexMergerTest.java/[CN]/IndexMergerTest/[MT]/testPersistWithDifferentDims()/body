{
  IncrementalIndex toPersist=IncrementalIndexTest.createIndex(null);
  toPersist.add(new MapBasedInputRow(1,Arrays.asList("dim1","dim2"),ImmutableMap.<String,Object>of("dim1","1","dim2","2")));
  toPersist.add(new MapBasedInputRow(1,Arrays.asList("dim1"),ImmutableMap.<String,Object>of("dim1","3")));
  final File tempDir=temporaryFolder.newFolder();
  QueryableIndex index=closer.closeLater(INDEX_IO.loadIndex(INDEX_MERGER.persist(toPersist,tempDir,indexSpec)));
  Assert.assertEquals(2,index.getColumn(Column.TIME_COLUMN_NAME).getLength());
  Assert.assertEquals(Arrays.asList("dim1","dim2"),Lists.newArrayList(index.getAvailableDimensions()));
  Assert.assertEquals(3,index.getColumnNames().size());
  assertDimCompression(index,indexSpec.getDimensionCompressionStrategy());
  final IndexableAdapter adapter=new QueryableIndexIndexableAdapter(index);
  Iterable<Rowboat> boats=adapter.getRows();
  List<Rowboat> boatList=new ArrayList<>();
  for (  Rowboat boat : boats) {
    boatList.add(boat);
  }
  Assert.assertEquals(2,boatList.size());
  Assert.assertArrayEquals(new int[][]{{0},{1}},boatList.get(0).getDims());
  Assert.assertArrayEquals(new int[][]{{1},{0}},boatList.get(1).getDims());
  checkBitmapIndex(new ArrayList<Integer>(),adapter.getBitmapIndex("dim1",""));
  checkBitmapIndex(Lists.newArrayList(0),adapter.getBitmapIndex("dim1","1"));
  checkBitmapIndex(Lists.newArrayList(1),adapter.getBitmapIndex("dim1","3"));
  checkBitmapIndex(Lists.newArrayList(1),adapter.getBitmapIndex("dim2",""));
  checkBitmapIndex(Lists.newArrayList(0),adapter.getBitmapIndex("dim2","2"));
}

{
  curator.start();
  curator.blockUntilConnected();
  Announcer announcer=new Announcer(curator,exec);
  try {
    curator.inTransaction().create().forPath("/somewhere").and().commit();
    announcer.start();
    final byte[] billy="billy".getBytes();
    final String testPath1="/test1";
    final String testPath2="/somewhere/test2";
    final Set<String> paths=Sets.newHashSet(testPath1,testPath2);
    announcer.announce(testPath1,billy);
    announcer.announce(testPath2,billy);
    Assert.assertArrayEquals(billy,curator.getData().decompressed().forPath(testPath1));
    Assert.assertArrayEquals(billy,curator.getData().decompressed().forPath(testPath2));
    final CountDownLatch latch=new CountDownLatch(1);
    curator.getCuratorListenable().addListener(new CuratorListener(){
      @Override public void eventReceived(      CuratorFramework client,      CuratorEvent event) throws Exception {
        if (event.getType() == CuratorEventType.CREATE) {
          paths.remove(event.getPath());
          if (paths.isEmpty()) {
            latch.countDown();
          }
        }
      }
    }
);
    KillSession.kill(curator.getZookeeperClient().getZooKeeper(),server.getConnectString());
    Assert.assertTrue(timing.forWaiting().awaitLatch(latch));
    Assert.assertArrayEquals(billy,curator.getData().decompressed().forPath(testPath1));
    Assert.assertArrayEquals(billy,curator.getData().decompressed().forPath(testPath2));
    announcer.stop();
    while ((curator.checkExists().forPath(testPath1) != null) || (curator.checkExists().forPath(testPath2) != null)) {
      Thread.sleep(100);
    }
    Assert.assertNull(curator.checkExists().forPath(testPath1));
    Assert.assertNull(curator.checkExists().forPath(testPath2));
  }
  finally {
    announcer.stop();
  }
}

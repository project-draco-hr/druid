{
  super(log,config,yp);
  this.serverView=serverView;
  this.exec=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat("CIV-Execution-%d").build());
  setStrategy(new InventoryManagementStrategy<DruidServer>(){
    @Override public Class<DruidServer> getContainerClass(){
      return DruidServer.class;
    }
    @Override public Pair<String,PhoneBookPeon<?>> makeSubListener(    final DruidServer server){
      ClientInventoryManager.this.serverView.addServer(server);
      return Pair.<String,PhoneBookPeon<?>>of(server.getName(),new PhoneBookPeon<DataSegment>(){
        @Override public Class<DataSegment> getObjectClazz(){
          return DataSegment.class;
        }
        @Override public void newEntry(        String segmentId,        DataSegment segment){
          exec.execute(new AddSegmentRunnable(server,segment));
          server.addDataSegment(segmentId,segment);
        }
        @Override public void entryRemoved(        String segmentId){
          exec.execute(new RemoveSegmentRunnable(server,segmentId));
          server.removeDataSegment(segmentId);
        }
      }
);
    }
    @Override public void objectRemoved(    DruidServer server){
      ClientInventoryManager.this.serverView.removeServer(server);
    }
    @Override public boolean doesSerde(){
      return false;
    }
    @Override public DruidServer deserialize(    String name,    Map<String,String> properties){
      throw new UnsupportedOperationException();
    }
  }
);
}

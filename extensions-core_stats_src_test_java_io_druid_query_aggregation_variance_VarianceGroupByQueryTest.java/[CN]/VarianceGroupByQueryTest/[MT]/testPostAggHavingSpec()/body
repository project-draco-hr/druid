{
  VarianceTestHelper.RowBuilder expect=new VarianceTestHelper.RowBuilder(new String[]{"alias","rows","index","index_var","index_stddev"});
  List<Row> expectedResults=expect.add("2011-04-01","automotive",2L,269L,299.0009819048282,17.29164485827847).add("2011-04-01","mezzanine",6L,4420L,254083.76447001836,504.06722217380724).add("2011-04-01","premium",6L,4416L,252279.2020389339,502.27403082275106).build();
  GroupByQuery query=GroupByQuery.builder().setDataSource(VarianceTestHelper.dataSource).setInterval("2011-04-02/2011-04-04").setDimensions(Lists.<DimensionSpec>newArrayList(new DefaultDimensionSpec("quality","alias"))).setAggregatorSpecs(Arrays.asList(VarianceTestHelper.rowsCount,VarianceTestHelper.indexLongSum,VarianceTestHelper.indexVarianceAggr)).setPostAggregatorSpecs(ImmutableList.<PostAggregator>of(VarianceTestHelper.stddevOfIndexPostAggr)).setGranularity(new PeriodGranularity(new Period("P1M"),null,null)).setHavingSpec(new OrHavingSpec(ImmutableList.<HavingSpec>of(new GreaterThanHavingSpec(VarianceTestHelper.stddevOfIndexMetric,15L)))).build();
  Iterable<Row> results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
  query=query.withLimitSpec(new DefaultLimitSpec(Arrays.<OrderByColumnSpec>asList(OrderByColumnSpec.asc(VarianceTestHelper.stddevOfIndexMetric)),2));
  expectedResults=expect.add("2011-04-01","automotive",2L,269L,299.0009819048282,17.29164485827847).add("2011-04-01","premium",6L,4416L,252279.2020389339,502.27403082275106).build();
  results=GroupByQueryRunnerTestHelper.runQuery(factory,runner,query);
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

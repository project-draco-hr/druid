{
switch (event.getType()) {
case CHILD_ADDED:
synchronized (lock) {
      final ChildData child=event.getData();
      final String containerKey=ZKPaths.getNodeFromPath(child.getPath());
      final ContainerClass container=strategy.deserializeContainer(child.getData());
      if (containers.containsKey(containerKey)) {
        log.error("New node[%s] but there was already one.  That's not good, ignoring new one.",child.getPath());
      }
 else {
        final String inventoryPath=String.format("%s/%s",config.getInventoryPath(),containerKey);
        PathChildrenCache inventoryCache=cacheFactory.make(curatorFramework,inventoryPath);
        inventoryCache.getListenable().addListener(new InventoryCacheListener(containerKey,inventoryPath));
        containers.put(containerKey,new ContainerHolder(container,inventoryCache));
        log.info("Starting inventory cache for %s, inventoryPath %s",containerKey,inventoryPath);
        inventoryCache.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT);
        strategy.newContainer(container);
      }
      break;
    }
case CHILD_REMOVED:
synchronized (lock) {
    final ChildData child=event.getData();
    final String containerKey=ZKPaths.getNodeFromPath(child.getPath());
    final ContainerHolder removed=containers.remove(containerKey);
    if (removed == null) {
      log.warn("Container[%s] removed that wasn't a container!?",child.getPath());
      break;
    }
    log.info("Closing inventory cache for %s. Also removing listeners.",containerKey);
    removed.getCache().getListenable().clear();
    removed.getCache().close();
    strategy.deadContainer(removed.getContainer());
synchronized (removed) {
      markInventoryInitialized(removed);
    }
    break;
  }
case CHILD_UPDATED:
synchronized (lock) {
  final ChildData child=event.getData();
  final String containerKey=ZKPaths.getNodeFromPath(child.getPath());
  final ContainerClass container=strategy.deserializeContainer(child.getData());
  ContainerHolder oldContainer=containers.get(containerKey);
  if (oldContainer == null) {
    log.warn("Container update[%s], but the old container didn't exist!?  Ignoring.",child.getPath());
  }
 else {
synchronized (oldContainer) {
      oldContainer.setContainer(strategy.updateContainer(oldContainer.getContainer(),container));
    }
  }
  break;
}
case INITIALIZED:
synchronized (lock) {
for (ContainerHolder holder : containers.values()) {
synchronized (holder) {
    if (!holder.initialized) {
      uninitializedInventory.add(holder);
    }
  }
}
containersInitialized=true;
maybeDoneInitializing();
break;
}
}
}

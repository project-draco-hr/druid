{
  final ContextFactory contextFactory=ContextFactory.getGlobal();
  Context context=contextFactory.enterContext();
  context.setOptimizationLevel(9);
  final ScriptableObject scope=context.initStandardObjects();
  final Function fnAggregate=context.compileFunction(scope,aggregate,"aggregate",1,null);
  final Function fnReset=context.compileFunction(scope,reset,"reset",1,null);
  final Function fnCombine=context.compileFunction(scope,combine,"combine",1,null);
  Context.exit();
  return new JavaScriptAggregator.ScriptAggregator(){
    @Override public double aggregate(    final double current,    final ObjectColumnSelector[] selectorList){
      Context cx=Context.getCurrentContext();
      if (cx == null) {
        cx=contextFactory.enterContext();
      }
      final int size=selectorList.length;
      final Object[] args=new Object[size + 1];
      args[0]=current;
      for (int i=0; i < size; i++) {
        final ObjectColumnSelector selector=selectorList[i];
        if (selector != null) {
          args[i + 1]=selector.get();
        }
      }
      final Object res=fnAggregate.call(cx,scope,scope,args);
      return Context.toNumber(res);
    }
    @Override public double combine(    final double a,    final double b){
      final Object res=contextFactory.call(new ContextAction(){
        @Override public Object run(        final Context cx){
          return fnCombine.call(cx,scope,scope,new Object[]{a,b});
        }
      }
);
      return Context.toNumber(res);
    }
    @Override public double reset(){
      final Object res=contextFactory.call(new ContextAction(){
        @Override public Object run(        final Context cx){
          return fnReset.call(cx,scope,scope,new Object[]{});
        }
      }
);
      return Context.toNumber(res);
    }
    @Override public void close(){
      if (Context.getCurrentContext() != null) {
        Context.exit();
      }
    }
  }
;
}

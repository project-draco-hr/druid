{
  return ImmutableList.<Object>of(new Module(){
    @Override public void configure(    Binder binder){
      binder.bindConstant().annotatedWith(Names.named("serviceName")).to("druid/peon");
      binder.bindConstant().annotatedWith(Names.named("servicePort")).to(-1);
      PolyBind.createChoice(binder,"druid.indexer.task.chathandler.type",Key.get(ChatHandlerProvider.class),Key.get(NoopChatHandlerProvider.class));
      final MapBinder<String,ChatHandlerProvider> handlerProviderBinder=PolyBind.optionBinder(binder,Key.get(ChatHandlerProvider.class));
      handlerProviderBinder.addBinding("announce").to(ServiceAnnouncingChatHandlerProvider.class).in(LazySingleton.class);
      handlerProviderBinder.addBinding("noop").to(NoopChatHandlerProvider.class).in(LazySingleton.class);
      binder.bind(TaskToolboxFactory.class).in(LazySingleton.class);
      JsonConfigProvider.bind(binder,"druid.indexer.task",TaskConfig.class);
      JsonConfigProvider.bind(binder,"druid.peon.taskActionClient.retry",RetryPolicyConfig.class);
      configureTaskActionClient(binder);
      binder.bind(RetryPolicyFactory.class).in(LazySingleton.class);
      Binders.dataSegmentKillerBinder(binder);
      binder.bind(DataSegmentKiller.class).to(OmniDataSegmentKiller.class).in(LazySingleton.class);
      Binders.dataSegmentMoverBinder(binder);
      binder.bind(DataSegmentMover.class).to(OmniDataSegmentMover.class).in(LazySingleton.class);
      Binders.dataSegmentArchiverBinder(binder);
      binder.bind(DataSegmentArchiver.class).to(OmniDataSegmentArchiver.class).in(LazySingleton.class);
      binder.bind(ExecutorLifecycle.class).in(ManageLifecycle.class);
      binder.bind(ExecutorLifecycleConfig.class).toInstance(new ExecutorLifecycleConfig().setTaskFile(new File(taskAndStatusFile.get(0))).setStatusFile(new File(taskAndStatusFile.get(1))));
      binder.bind(TaskRunner.class).to(ThreadPoolTaskRunner.class);
      binder.bind(QuerySegmentWalker.class).to(ThreadPoolTaskRunner.class);
      binder.bind(ThreadPoolTaskRunner.class).in(ManageLifecycle.class);
      binder.bind(SegmentLoaderConfig.class).toInstance(new SegmentLoaderConfig().withLocations(Arrays.<StorageLocationConfig>asList()));
      binder.bind(JettyServerInitializer.class).to(QueryJettyServerInitializer.class);
      Jerseys.addResource(binder,QueryResource.class);
      Jerseys.addResource(binder,ChatHandlerResource.class);
      LifecycleModule.register(binder,QueryResource.class);
      binder.bind(NodeTypeConfig.class).toInstance(new NodeTypeConfig(nodeType));
      LifecycleModule.register(binder,Server.class);
    }
    private void configureTaskActionClient(    Binder binder){
      PolyBind.createChoice(binder,"druid.peon.mode",Key.get(TaskActionClientFactory.class),Key.get(RemoteTaskActionClientFactory.class));
      final MapBinder<String,TaskActionClientFactory> taskActionBinder=PolyBind.optionBinder(binder,Key.get(TaskActionClientFactory.class));
      taskActionBinder.addBinding("local").to(LocalTaskActionClientFactory.class).in(LazySingleton.class);
      binder.bind(TaskStorage.class).to(HeapMemoryTaskStorage.class).in(LazySingleton.class);
      binder.bind(TaskActionToolbox.class).in(LazySingleton.class);
      binder.bind(IndexerMetadataStorageCoordinator.class).to(IndexerSQLMetadataStorageCoordinator.class).in(LazySingleton.class);
      taskActionBinder.addBinding("remote").to(RemoteTaskActionClientFactory.class).in(LazySingleton.class);
    }
  }
,new IndexingServiceFirehoseModule());
}

{
  final QueryRunnerFactory<T,Query<T>> factory=conglomerate.findFactory(query);
  if (factory == null) {
    log.makeAlert("Unknown query type, [%s]",query.getClass()).addData("dataSource",query.getDataSource()).emit();
    return new NoopQueryRunner<T>();
  }
  final QueryToolChest<T,Query<T>> toolChest=factory.getToolchest();
  String dataSourceName=getDataSourceName(query.getDataSource());
  final VersionedIntervalTimeline<String,ReferenceCountingSegment> timeline=dataSources.get(dataSourceName);
  if (timeline == null) {
    return new NoopQueryRunner<T>();
  }
  final Function<Query<T>,ServiceMetricEvent.Builder> builderFn=getBuilderFn(toolChest);
  final AtomicLong cpuTimeAccumulator=new AtomicLong(0L);
  FunctionalIterable<QueryRunner<T>> queryRunners=FunctionalIterable.create(specs).transformCat(new Function<SegmentDescriptor,Iterable<QueryRunner<T>>>(){
    @Override @SuppressWarnings("unchecked") public Iterable<QueryRunner<T>> apply(    SegmentDescriptor input){
      final PartitionHolder<ReferenceCountingSegment> entry=timeline.findEntry(input.getInterval(),input.getVersion());
      if (entry == null) {
        return Arrays.<QueryRunner<T>>asList(new ReportTimelineMissingSegmentQueryRunner<T>(input));
      }
      final PartitionChunk<ReferenceCountingSegment> chunk=entry.getChunk(input.getPartitionNumber());
      if (chunk == null) {
        return Arrays.<QueryRunner<T>>asList(new ReportTimelineMissingSegmentQueryRunner<T>(input));
      }
      final ReferenceCountingSegment adapter=chunk.getObject();
      return Arrays.asList(buildAndDecorateQueryRunner(factory,toolChest,adapter,input,builderFn,cpuTimeAccumulator));
    }
  }
);
  return CPUTimeMetricQueryRunner.safeBuild(new FinalizeResultsQueryRunner<>(toolChest.mergeResults(factory.mergeRunners(exec,queryRunners)),toolChest),builderFn,emitter,cpuTimeAccumulator,true);
}

{
  objectMapper=new DefaultObjectMapper();
  objectMapper.registerSubtypes(LinearShardSpec.class);
  final Map<String,Object> parserMap=objectMapper.convertValue(new MapInputRowParser(new JSONParseSpec(new TimestampSpec("ts","auto",null),new DimensionsSpec(null,null,null))),Map.class);
  schema=new DataSchema(DATASOURCE,parserMap,new AggregatorFactory[]{new CountAggregatorFactory("count"),new LongSumAggregatorFactory("met","met")},new UniformGranularitySpec(Granularity.MINUTE,QueryGranularities.NONE,null),objectMapper);
  tuningConfig=new RealtimeTuningConfig(maxRowsInMemory,null,null,basePersistDirectory,null,null,null,null,null,null,0,0,null,null);
  metrics=new FireDepartmentMetrics();
  queryExecutor=Execs.singleThreaded("queryExecutor(%d)");
  indexIO=new IndexIO(objectMapper,new ColumnConfig(){
    @Override public int columnCacheSizeBytes(){
      return 0;
    }
  }
);
  indexMerger=new IndexMerger(objectMapper,indexIO);
  emitter=new ServiceEmitter("test","test",new LoggingEmitter(new Logger(AppenderatorTester.class),LoggingEmitter.Level.INFO,objectMapper));
  emitter.start();
  EmittingLogger.registerEmitter(emitter);
  dataSegmentPusher=new DataSegmentPusher(){
    @Deprecated @Override public String getPathForHadoop(    String dataSource){
      return getPathForHadoop();
    }
    @Override public String getPathForHadoop(){
      throw new UnsupportedOperationException();
    }
    @Override public DataSegment push(    File file,    DataSegment segment) throws IOException {
      pushedSegments.add(segment);
      return segment;
    }
  }
;
  appenderator=Appenderators.createRealtime(schema,tuningConfig,metrics,dataSegmentPusher,objectMapper,indexIO,indexMerger,new DefaultQueryRunnerFactoryConglomerate(ImmutableMap.<Class<? extends Query>,QueryRunnerFactory>of(TimeseriesQuery.class,new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(new IntervalChunkingQueryRunnerDecorator(queryExecutor,QueryRunnerTestHelper.NOOP_QUERYWATCHER,emitter)),new TimeseriesQueryEngine(),QueryRunnerTestHelper.NOOP_QUERYWATCHER))),new DataSegmentAnnouncer(){
    @Override public void announceSegment(    DataSegment segment) throws IOException {
    }
    @Override public void unannounceSegment(    DataSegment segment) throws IOException {
    }
    @Override public void announceSegments(    Iterable<DataSegment> segments) throws IOException {
    }
    @Override public void unannounceSegments(    Iterable<DataSegment> segments) throws IOException {
    }
    @Override public boolean isAnnounced(    DataSegment segment){
      return false;
    }
  }
,emitter,queryExecutor,MapCache.create(2048),new CacheConfig());
}

{
  final StorageAdapter adapter=segment.asStorageAdapter();
  if (adapter == null) {
    throw new ISE("Null storage adapter found. Probably trying to issue a query against a segment being memory unmapped.");
  }
  final Iterable<DimensionSpec> dims;
  if (query.getDimensions() == null || query.getDimensions().isEmpty()) {
    dims=DefaultDimensionSpec.toSpec(adapter.getAvailableDimensions());
  }
 else {
    dims=query.getDimensions();
  }
  final Iterable<String> metrics;
  if (query.getMetrics() == null || query.getMetrics().isEmpty()) {
    metrics=adapter.getAvailableMetrics();
  }
 else {
    metrics=query.getMetrics();
  }
  List<Interval> intervals=query.getQuerySegmentSpec().getIntervals();
  Preconditions.checkArgument(intervals.size() == 1,"Can only handle a single interval, got[%s]",intervals);
  final String segmentId=SegmentDesc.withInterval(segment.getIdentifier(),intervals.get(0));
  return QueryRunnerHelper.makeCursorBasedQuery(adapter,query.getQuerySegmentSpec().getIntervals(),Filters.toFilter(query.getDimensionsFilter()),query.isDescending(),query.getGranularity(),new Function<Cursor,Result<SelectResultValue>>(){
    @Override public Result<SelectResultValue> apply(    Cursor cursor){
      final SelectResultValueBuilder builder=new SelectResultValueBuilder(cursor.getTime(),query.getPagingSpec(),query.isDescending());
      final LongColumnSelector timestampColumnSelector=cursor.makeLongColumnSelector(Column.TIME_COLUMN_NAME);
      final Map<String,DimensionSelector> dimSelectors=Maps.newHashMap();
      for (      DimensionSpec dim : dims) {
        final DimensionSelector dimSelector=cursor.makeDimensionSelector(dim);
        dimSelectors.put(dim.getOutputName(),dimSelector);
      }
      final Map<String,ObjectColumnSelector> metSelectors=Maps.newHashMap();
      for (      String metric : metrics) {
        final ObjectColumnSelector metricSelector=cursor.makeObjectColumnSelector(metric);
        metSelectors.put(metric,metricSelector);
      }
      final PagingOffset offset=query.getPagingOffset(segmentId);
      cursor.advanceTo(offset.startDelta());
      int lastOffset=offset.startOffset();
      for (; !cursor.isDone() && offset.hasNext(); cursor.advance(), offset.next()) {
        final Map<String,Object> theEvent=Maps.newLinkedHashMap();
        theEvent.put(EventHolder.timestampKey,new DateTime(timestampColumnSelector.get()));
        for (        Map.Entry<String,DimensionSelector> dimSelector : dimSelectors.entrySet()) {
          final String dim=dimSelector.getKey();
          final DimensionSelector selector=dimSelector.getValue();
          if (selector == null) {
            theEvent.put(dim,null);
          }
 else {
            final IndexedInts vals=selector.getRow();
            if (vals.size() == 1) {
              final String dimVal=selector.lookupName(vals.get(0));
              theEvent.put(dim,dimVal);
            }
 else {
              List<String> dimVals=Lists.newArrayList();
              for (int i=0; i < vals.size(); ++i) {
                dimVals.add(selector.lookupName(vals.get(i)));
              }
              theEvent.put(dim,dimVals);
            }
          }
        }
        for (        Map.Entry<String,ObjectColumnSelector> metSelector : metSelectors.entrySet()) {
          final String metric=metSelector.getKey();
          final ObjectColumnSelector selector=metSelector.getValue();
          if (selector == null) {
            theEvent.put(metric,null);
          }
 else {
            theEvent.put(metric,selector.get());
          }
        }
        builder.addEntry(new EventHolder(segmentId,lastOffset=offset.current(),theEvent));
      }
      builder.finished(segmentId,lastOffset);
      return builder.build();
    }
  }
);
}

{
  return ImmutableList.<Module>of(new Module(){
    @Override public void configure(    Binder binder){
      binder.bindConstant().annotatedWith(Names.named("serviceName")).to(TieredBrokerConfig.DEFAULT_BROKER_SERVICE_NAME);
      binder.bindConstant().annotatedWith(Names.named("servicePort")).to(8082);
      binder.bind(QueryToolChestWarehouse.class).to(MapQueryToolChestWarehouse.class);
      binder.bind(CachingClusteredClient.class).in(LazySingleton.class);
      binder.bind(BrokerServerView.class).in(LazySingleton.class);
      binder.bind(TimelineServerView.class).to(BrokerServerView.class).in(LazySingleton.class);
      JsonConfigProvider.bind(binder,"druid.broker.cache",CacheConfig.class);
      binder.install(new CacheModule());
      JsonConfigProvider.bind(binder,"druid.broker.select",TierSelectorStrategy.class);
      JsonConfigProvider.bind(binder,"druid.broker.select.tier.custom",CustomTierSelectorStrategyConfig.class);
      JsonConfigProvider.bind(binder,"druid.broker.balancer",ServerSelectorStrategy.class);
      JsonConfigProvider.bind(binder,"druid.broker.retryPolicy",RetryQueryRunnerConfig.class);
      binder.bind(QuerySegmentWalker.class).to(ClientQuerySegmentWalker.class).in(LazySingleton.class);
      binder.bind(JettyServerInitializer.class).to(QueryJettyServerInitializer.class).in(LazySingleton.class);
      Jerseys.addResource(binder,QueryResource.class);
      Jerseys.addResource(binder,BrokerResource.class);
      Jerseys.addResource(binder,ClientInfoResource.class);
      LifecycleModule.register(binder,QueryResource.class);
      LifecycleModule.register(binder,DruidBroker.class);
      LifecycleModule.register(binder,LookupReferencesManager.class);
      MetricsModule.register(binder,CacheMonitor.class);
      LifecycleModule.register(binder,Server.class);
    }
  }
);
}

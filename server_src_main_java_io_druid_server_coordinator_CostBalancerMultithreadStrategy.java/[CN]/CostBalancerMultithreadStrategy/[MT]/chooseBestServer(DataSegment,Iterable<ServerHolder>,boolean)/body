{
  Pair<Double,ServerHolder> bestServer=Pair.of(Double.POSITIVE_INFINITY,null);
  ExecutorService service=Executors.newCachedThreadPool();
  List<Future<Pair<Double,ServerHolder>>> futures=Lists.newArrayList();
  for (  final ServerHolder server : serverHolders) {
    futures.add(service.submit(new CostCalculator(server,proposalSegment,includeCurrentServer)));
  }
  for (  Future<Pair<Double,ServerHolder>> f : futures) {
    try {
      Pair<Double,ServerHolder> server=f.get();
      if (server.lhs < bestServer.lhs) {
        bestServer=server;
      }
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
catch (    ExecutionException e) {
      e.printStackTrace();
    }
  }
  service.shutdown();
  return bestServer;
}

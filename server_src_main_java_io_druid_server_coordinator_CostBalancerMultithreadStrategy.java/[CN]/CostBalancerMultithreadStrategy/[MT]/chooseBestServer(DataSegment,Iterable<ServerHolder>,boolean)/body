{
  Pair<Double,ServerHolder> bestServer=Pair.of(Double.POSITIVE_INFINITY,null);
  ListeningExecutorService service=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(8));
  List<ListenableFuture<Pair<Double,ServerHolder>>> futures=Lists.newArrayList();
  for (  final ServerHolder server : serverHolders) {
    futures.add(service.submit(new Callable<Pair<Double,ServerHolder>>(){
      @Override public Pair<Double,ServerHolder> call() throws Exception {
        return Pair.of(computeCost(proposalSegment,server,includeCurrentServer),server);
      }
    }
));
  }
  final ListenableFuture<List<Pair<Double,ServerHolder>>> resultsFuture=Futures.allAsList(futures);
  try {
    for (    Pair<Double,ServerHolder> server : resultsFuture.get()) {
      if (server.lhs < bestServer.lhs) {
        bestServer=server;
      }
    }
  }
 catch (  Exception e) {
    log.makeAlert(e,"Cost Balancer Multithread strategy wasn't able to complete cost computation.").emit();
  }
  service.shutdown();
  return bestServer;
}

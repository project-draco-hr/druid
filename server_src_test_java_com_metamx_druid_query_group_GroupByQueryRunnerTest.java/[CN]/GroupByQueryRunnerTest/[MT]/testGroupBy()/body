{
  GroupByQuery query=GroupByQuery.builder().setDataSource(QueryRunnerTestHelper.dataSource).setQuerySegmentSpec(QueryRunnerTestHelper.firstToThird).setDimensions(Lists.newArrayList((DimensionSpec)new DefaultDimensionSpec("quality","alias"))).setAggregatorSpecs(Arrays.<AggregatorFactory>asList(QueryRunnerTestHelper.rowsCount,new LongSumAggregatorFactory("idx","index"))).setGranularity(QueryRunnerTestHelper.dayGran).build();
  List<Row> expectedResults=Arrays.asList((Row)new MapBasedRow(new DateTime("2011-04-01"),ImmutableMap.<String,Object>of("alias","automotive","rows",1L,"idx",135L)),(Row)new MapBasedRow(new DateTime("2011-04-01"),ImmutableMap.<String,Object>of("alias","business","rows",1L,"idx",118L)),(Row)new MapBasedRow(new DateTime("2011-04-01"),ImmutableMap.<String,Object>of("alias","entertainment","rows",1L,"idx",158L)),(Row)new MapBasedRow(new DateTime("2011-04-01"),ImmutableMap.<String,Object>of("alias","health","rows",1L,"idx",120L)),(Row)new MapBasedRow(new DateTime("2011-04-01"),ImmutableMap.<String,Object>of("alias","mezzanine","rows",3L,"idx",2870L)),(Row)new MapBasedRow(new DateTime("2011-04-01"),ImmutableMap.<String,Object>of("alias","news","rows",1L,"idx",121L)),(Row)new MapBasedRow(new DateTime("2011-04-01"),ImmutableMap.<String,Object>of("alias","premium","rows",3L,"idx",2900L)),(Row)new MapBasedRow(new DateTime("2011-04-01"),ImmutableMap.<String,Object>of("alias","technology","rows",1L,"idx",78L)),(Row)new MapBasedRow(new DateTime("2011-04-01"),ImmutableMap.<String,Object>of("alias","travel","rows",1L,"idx",119L)),(Row)new MapBasedRow(new DateTime("2011-04-02"),ImmutableMap.<String,Object>of("alias","automotive","rows",1L,"idx",147L)),(Row)new MapBasedRow(new DateTime("2011-04-02"),ImmutableMap.<String,Object>of("alias","business","rows",1L,"idx",112L)),(Row)new MapBasedRow(new DateTime("2011-04-02"),ImmutableMap.<String,Object>of("alias","entertainment","rows",1L,"idx",166L)),(Row)new MapBasedRow(new DateTime("2011-04-02"),ImmutableMap.<String,Object>of("alias","health","rows",1L,"idx",113L)),(Row)new MapBasedRow(new DateTime("2011-04-02"),ImmutableMap.<String,Object>of("alias","mezzanine","rows",3L,"idx",2447L)),(Row)new MapBasedRow(new DateTime("2011-04-02"),ImmutableMap.<String,Object>of("alias","news","rows",1L,"idx",114L)),(Row)new MapBasedRow(new DateTime("2011-04-02"),ImmutableMap.<String,Object>of("alias","premium","rows",3L,"idx",2505L)),(Row)new MapBasedRow(new DateTime("2011-04-02"),ImmutableMap.<String,Object>of("alias","technology","rows",1L,"idx",97L)),(Row)new MapBasedRow(new DateTime("2011-04-02"),ImmutableMap.<String,Object>of("alias","travel","rows",1L,"idx",126L)));
  Iterable<Row> results=Sequences.toList(runner.run(query),Lists.<Row>newArrayList());
  TestHelper.assertExpectedObjects(expectedResults,results,"");
}

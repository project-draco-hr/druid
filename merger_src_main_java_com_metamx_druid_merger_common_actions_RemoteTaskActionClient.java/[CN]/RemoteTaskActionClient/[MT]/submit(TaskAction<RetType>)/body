{
  log.info("Performing action for task[%s]: %s",task.getId(),taskAction);
  byte[] dataToSend=jsonMapper.writeValueAsBytes(new TaskActionHolder(task,taskAction));
  final RetryPolicy retryPolicy=retryPolicyFactory.makeRetryPolicy();
  while (true) {
    try {
      final URI serviceUri;
      try {
        serviceUri=getServiceUri();
      }
 catch (      Exception e) {
        throw new IOException("Failed to locate service uri",e);
      }
      final String response;
      try {
        response=httpClient.post(serviceUri.toURL()).setContent("application/json",dataToSend).go(new ToStringResponseHandler(Charsets.UTF_8)).get();
      }
 catch (      Exception e) {
        Throwables.propagateIfInstanceOf(e.getCause(),IOException.class);
        throw Throwables.propagate(e);
      }
      final Map<String,Object> responseDict=jsonMapper.readValue(response,new TypeReference<Map<String,Object>>(){
      }
);
      return jsonMapper.convertValue(responseDict.get("result"),taskAction.getReturnTypeReference());
    }
 catch (    IOException e) {
      log.warn(e,"Exception submitting action for task: %s",task.getId());
      if (retryPolicy.hasExceededRetryThreshold()) {
        throw e;
      }
 else {
        try {
          Thread.sleep(retryPolicy.getAndIncrementRetryDelay().getMillis());
        }
 catch (        InterruptedException e2) {
          throw Throwables.propagate(e2);
        }
      }
    }
  }
}

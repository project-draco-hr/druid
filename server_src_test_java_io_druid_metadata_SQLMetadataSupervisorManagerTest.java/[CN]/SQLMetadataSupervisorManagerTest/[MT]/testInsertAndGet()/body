{
  final String supervisor1="test-supervisor-1";
  final String supervisor2="test-supervisor-2";
  final Map<String,String> data1rev1=ImmutableMap.of("key1-1","value1-1-1","key1-2","value1-2-1");
  final Map<String,String> data1rev2=ImmutableMap.of("key1-1","value1-1-2","key1-2","value1-2-2");
  final Map<String,String> data1rev3=ImmutableMap.of("key1-1","value1-1-3","key1-2","value1-2-3");
  final Map<String,String> data2rev1=ImmutableMap.of("key2-1","value2-1-1","key2-2","value2-2-1");
  final Map<String,String> data2rev2=ImmutableMap.of("key2-3","value2-3-2","key2-4","value2-4-2");
  Assert.assertTrue(supervisorManager.getAll().isEmpty());
  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev1));
  supervisorManager.insert(supervisor2,new TestSupervisorSpec(supervisor2,data2rev1));
  Map<String,List<VersionedSupervisorSpec>> supervisorSpecs=supervisorManager.getAll();
  Map<String,SupervisorSpec> latestSpecs=supervisorManager.getLatest();
  Assert.assertEquals(2,supervisorSpecs.size());
  Assert.assertEquals(1,supervisorSpecs.get(supervisor1).size());
  Assert.assertEquals(1,supervisorSpecs.get(supervisor2).size());
  Assert.assertEquals(supervisor1,supervisorSpecs.get(supervisor1).get(0).getSpec().getId());
  Assert.assertEquals(supervisor2,supervisorSpecs.get(supervisor2).get(0).getSpec().getId());
  Assert.assertEquals(data1rev1,((TestSupervisorSpec)supervisorSpecs.get(supervisor1).get(0).getSpec()).getData());
  Assert.assertEquals(data2rev1,((TestSupervisorSpec)supervisorSpecs.get(supervisor2).get(0).getSpec()).getData());
  Assert.assertEquals(2,latestSpecs.size());
  Assert.assertEquals(data1rev1,((TestSupervisorSpec)latestSpecs.get(supervisor1)).getData());
  Assert.assertEquals(data2rev1,((TestSupervisorSpec)latestSpecs.get(supervisor2)).getData());
  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev2));
  supervisorManager.insert(supervisor1,new TestSupervisorSpec(supervisor1,data1rev3));
  supervisorManager.insert(supervisor2,new TestSupervisorSpec(supervisor2,data2rev2));
  supervisorSpecs=supervisorManager.getAll();
  latestSpecs=supervisorManager.getLatest();
  Assert.assertEquals(2,supervisorSpecs.size());
  Assert.assertEquals(3,supervisorSpecs.get(supervisor1).size());
  Assert.assertEquals(2,supervisorSpecs.get(supervisor2).size());
  Assert.assertEquals(data1rev3,((TestSupervisorSpec)supervisorSpecs.get(supervisor1).get(0).getSpec()).getData());
  Assert.assertEquals(data1rev2,((TestSupervisorSpec)supervisorSpecs.get(supervisor1).get(1).getSpec()).getData());
  Assert.assertEquals(data1rev1,((TestSupervisorSpec)supervisorSpecs.get(supervisor1).get(2).getSpec()).getData());
  Assert.assertEquals(data2rev2,((TestSupervisorSpec)supervisorSpecs.get(supervisor2).get(0).getSpec()).getData());
  Assert.assertEquals(data2rev1,((TestSupervisorSpec)supervisorSpecs.get(supervisor2).get(1).getSpec()).getData());
  Assert.assertEquals(data1rev3,((TestSupervisorSpec)latestSpecs.get(supervisor1)).getData());
  Assert.assertEquals(data2rev2,((TestSupervisorSpec)latestSpecs.get(supervisor2)).getData());
}

{
  log.info("Writing [%s] to C*",indexFilesDir);
  String key=JOINER.join(config.getKeyspace().isEmpty() ? null : config.getKeyspace(),DataSegmentPusherUtil.getStorageDir(segment));
  final File compressedIndexFile=File.createTempFile("druid","index.zip");
  long indexSize=CompressionUtils.zip(indexFilesDir,compressedIndexFile);
  int version=IndexIO.getVersionFromDir(indexFilesDir);
  try {
    ObjectMetadata indexMeta=ChunkedStorage.newWriter(indexStorage,key,new FileInputStream(compressedIndexFile)).withConcurrencyLevel(CONCURRENCY).call();
    byte[] json=jsonMapper.writeValueAsBytes(segment);
    MutationBatch mutation=this.keyspace.prepareMutationBatch();
    mutation.withRow(descriptorStorage,key).putColumn("lastmodified",System.currentTimeMillis(),null).putColumn("descriptor",json,null);
    mutation.execute();
    log.info("Wrote index to C* [" + indexMeta.getParentPath() + "]");
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
  segment=segment.withSize(indexSize).withLoadSpec(ImmutableMap.<String,Object>of("type","c*","key",key)).withBinaryVersion(version);
  log.info("Deleting zipped index File[%s]",compressedIndexFile);
  compressedIndexFile.delete();
  return segment;
}

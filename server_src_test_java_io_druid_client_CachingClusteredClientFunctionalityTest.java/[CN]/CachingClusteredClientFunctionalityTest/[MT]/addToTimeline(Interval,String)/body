{
  timeline.add(interval,version,new SingleElementPartitionChunk<>(new ServerSelector(DataSegment.builder().dataSource("test").interval(interval).version(version).shardSpec(NoneShardSpec.instance()).build(),new TierSelectorStrategy(){
    @Override public Comparator<Integer> getComparator(){
      return Ordering.natural();
    }
    @Override public QueryableDruidServer pick(    TreeMap<Integer,Set<QueryableDruidServer>> prioritizedServers,    DataSegment segment){
      return new QueryableDruidServer(new DruidServer("localhost","localhost",100,"historical","a",10),EasyMock.createNiceMock(DirectDruidClient.class));
    }
  }
)));
}

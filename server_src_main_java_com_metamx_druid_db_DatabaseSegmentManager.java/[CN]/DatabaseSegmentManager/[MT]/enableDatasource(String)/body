{
  try {
    VersionedIntervalTimeline<String,DataSegment> segmentTimeline=dbi.withHandle(new HandleCallback<VersionedIntervalTimeline<String,DataSegment>>(){
      @Override public VersionedIntervalTimeline<String,DataSegment> withHandle(      Handle handle) throws Exception {
        return handle.createQuery(String.format("SELECT payload FROM %s WHERE dataSource = :dataSource",config.getSegmentTable())).bind("dataSource",ds).fold(new VersionedIntervalTimeline<String,DataSegment>(Ordering.natural()),new Folder3<VersionedIntervalTimeline<String,DataSegment>,Map<String,Object>>(){
          @Override public VersionedIntervalTimeline<String,DataSegment> fold(          VersionedIntervalTimeline<String,DataSegment> timeline,          Map<String,Object> stringObjectMap,          FoldController foldController,          StatementContext statementContext) throws SQLException {
            try {
              DataSegment segment=jsonMapper.readValue((String)stringObjectMap.get("payload"),DataSegment.class);
              timeline.add(segment.getInterval(),segment.getVersion(),segment.getShardSpec().createChunk(segment));
              return timeline;
            }
 catch (            Exception e) {
              throw new SQLException(e.toString());
            }
          }
        }
);
      }
    }
);
    final List<DataSegment> segments=Lists.transform(segmentTimeline.lookup(new Interval(new DateTime(0),new DateTime("3000-01-01"))),new Function<TimelineObjectHolder<String,DataSegment>,DataSegment>(){
      @Override public DataSegment apply(      @Nullable TimelineObjectHolder<String,DataSegment> input){
        return input.getObject().getChunk(0).getObject();
      }
    }
);
    if (segments.isEmpty()) {
      log.warn("No segments found in the database!");
      return false;
    }
    dbi.withHandle(new HandleCallback<Void>(){
      @Override public Void withHandle(      Handle handle) throws Exception {
        Batch batch=handle.createBatch();
        for (        DataSegment segment : segments) {
          batch.add(String.format("UPDATE %s SET used=1 WHERE id = '%s'",config.getSegmentTable(),segment.getIdentifier()));
        }
        batch.execute();
        return null;
      }
    }
);
  }
 catch (  Exception e) {
    log.error(e,"Exception enabling datasource %s",ds);
    return false;
  }
  return true;
}

{
  try {
    if (!started) {
      return;
    }
    ConcurrentHashMap<String,DruidDataSource> newDataSources=new ConcurrentHashMap<String,DruidDataSource>();
    List<Map<String,Object>> segmentRows=dbi.withHandle(new HandleCallback<List<Map<String,Object>>>(){
      @Override public List<Map<String,Object>> withHandle(      Handle handle) throws Exception {
        return handle.createQuery(String.format("SELECT payload FROM %s WHERE used=true",config.getSegmentTable())).list();
      }
    }
);
    if (segmentRows == null || segmentRows.isEmpty()) {
      log.warn("No segments found in the database!");
      return;
    }
    log.info("Polled and found %,d segments in the database",segmentRows.size());
    for (    Map<String,Object> segmentRow : segmentRows) {
      DataSegment segment=jsonMapper.readValue((String)segmentRow.get("payload"),DataSegment.class);
      String datasourceName=segment.getDataSource();
      DruidDataSource dataSource=newDataSources.get(datasourceName);
      if (dataSource == null) {
        dataSource=new DruidDataSource(datasourceName,ImmutableMap.of("created",new DateTime().toString()));
        Object shouldBeNull=newDataSources.put(datasourceName,dataSource);
        if (shouldBeNull != null) {
          log.warn("Just put key[%s] into dataSources and what was there wasn't null!?  It was[%s]",datasourceName,shouldBeNull);
        }
      }
      if (!dataSource.getSegments().contains(segment)) {
        dataSource.addSegment(segment.getIdentifier(),segment);
      }
    }
synchronized (lock) {
      if (started) {
        dataSources.set(newDataSources);
      }
    }
  }
 catch (  Exception e) {
    log.error(e,"Problem polling DB.");
  }
}

{
  final long timestamp=System.currentTimeMillis();
  IncrementalIndex toPersist1=IncrementalIndexTest.createCaseInsensitiveIndex(timestamp);
  IncrementalIndex toPersist2=new IncrementalIndex(0L,QueryGranularity.NONE,new AggregatorFactory[]{});
  toPersist2.add(new MapBasedInputRow(timestamp,Arrays.asList("DIm1","DIM2"),ImmutableMap.<String,Object>of("dim1","1","dim2","2","DIm1","10000","DIM2","100000000")));
  toPersist2.add(new MapBasedInputRow(timestamp,Arrays.asList("dIM1","dIm2"),ImmutableMap.<String,Object>of("DIm1","1","DIM2","2","dim1","5","dim2","6")));
  final File tempDir1=Files.createTempDir();
  final File tempDir2=Files.createTempDir();
  final File mergedDir=Files.createTempDir();
  try {
    MMappedIndex index1=IndexIO.mapDir(IndexMerger.persist(toPersist1,tempDir1));
    Assert.assertEquals(2,index1.getTimestamps().size());
    Assert.assertEquals(Arrays.asList("dim1","dim2"),Lists.newArrayList(index1.getAvailableDimensions()));
    Assert.assertEquals(0,index1.getAvailableMetrics().size());
    MMappedIndex index2=IndexIO.mapDir(IndexMerger.persist(toPersist2,tempDir2));
    Assert.assertEquals(2,index2.getTimestamps().size());
    Assert.assertEquals(Arrays.asList("dim1","dim2"),Lists.newArrayList(index2.getAvailableDimensions()));
    Assert.assertEquals(0,index2.getAvailableMetrics().size());
    MMappedIndex merged=IndexIO.mapDir(IndexMerger.mergeMMapped(Arrays.asList(index1,index2),new AggregatorFactory[]{},mergedDir));
    Assert.assertEquals(3,merged.getTimestamps().size());
    Assert.assertEquals(Arrays.asList("dim1","dim2"),Lists.newArrayList(merged.getAvailableDimensions()));
    Assert.assertEquals(0,merged.getAvailableMetrics().size());
  }
  finally {
    FileUtils.deleteQuietly(tempDir1);
    FileUtils.deleteQuietly(tempDir2);
    FileUtils.deleteQuietly(mergedDir);
  }
}

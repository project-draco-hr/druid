{
  final TaskContext context=new TaskContext(version,ImmutableSet.copyOf(mergerDBCoordinator.getSegmentsForInterval(task.getDataSource(),task.getInterval())));
  final ServiceMetricEvent.Builder builder=new ServiceMetricEvent.Builder().setUser2(task.getDataSource()).setUser4(task.getType().toString()).setUser5(task.getInterval().toString());
  TaskStatus preflightStatus;
  try {
    preflightStatus=task.preflight(context);
    log.info("Preflight done for task: %s",task.getId());
  }
 catch (  Exception e) {
    preflightStatus=TaskStatus.failure(task.getId());
    log.error(e,"Exception thrown during preflight for task: %s",task.getId());
  }
  if (!preflightStatus.isRunnable()) {
    log.info("Task finished during preflight: %s",task.getId());
    queue.done(task,preflightStatus);
    return;
  }
  runner.run(task,context,new TaskCallback(){
    @Override public void notify(    final TaskStatus statusFromRunner){
      log.info("TaskRunner finished task: %s",task);
      TaskStatus status=statusFromRunner;
      if (shutdown) {
        log.info("Abandoning task due to shutdown: %s",task.getId());
        return;
      }
      try {
switch (status.getAction()) {
case ANNOUNCE_SEGMENTS:
          publishSegments(task,context,status.getSegments());
        break;
case DELETE_SEGMENTS:
      deleteSegments(task,context,status.getSegments());
    break;
case NONE:
  break;
default :
throw new ISE("Unknown Action[%s]",status.getAction().getClass());
}
}
 catch (Exception e) {
log.error(e,"Exception while publishing segments for task: %s",task);
status=TaskStatus.failure(task.getId()).withDuration(status.getDuration());
}
try {
queue.done(task,status);
}
 catch (Exception e) {
log.error(e,"Exception while marking task done: %s",task);
throw Throwables.propagate(e);
}
int bytes=0;
for (DataSegment segment : status.getSegments()) {
bytes+=segment.getSize();
}
builder.setUser3(status.getStatusCode().toString());
emitter.emit(builder.build("indexer/time/run/millis",status.getDuration()));
emitter.emit(builder.build("indexer/segment/count",status.getSegments().size()));
emitter.emit(builder.build("indexer/segment/bytes",bytes));
if (status.isFailure()) {
log.makeAlert("Failed to index").addData("task",task.getId()).addData("type",task.getType().toString()).addData("dataSource",task.getDataSource()).addData("interval",task.getInterval()).emit();
}
log.info("Task %s: %s (%d segments) (%d run duration)",status.getStatusCode(),task,status.getSegments().size(),status.getDuration());
}
}
);
}

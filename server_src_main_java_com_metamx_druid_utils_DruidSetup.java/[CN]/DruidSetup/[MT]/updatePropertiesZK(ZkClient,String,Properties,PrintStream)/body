{
  final String propPathOverride=props.getProperty("druid.zk.paths.propertiesPath");
  final String propPathConstructed=Initialization.makePropPath(zpathBase);
  final String propPath=(propPathOverride != null) ? propPathOverride : propPathConstructed;
  Properties currProps=null;
  if (zkClient.exists(propPath)) {
    currProps=zkClient.readData(propPath,true);
  }
  boolean propsDiffer=false;
  if (currProps == null) {
    out.println("No properties currently stored in zk");
    propsDiffer=true;
  }
 else {
    int countNew=0;
    int countDiffer=0;
    int countRemoved=0;
    int countNoChange=0;
    String currMetaPropVal="";
    StringBuilder changes=new StringBuilder(1024);
    for (    String pname : props.stringPropertyNames()) {
      if (pname.equals(PropertiesZkSerializer.META_PROP)) {
        continue;
      }
      final String pvalue=props.getProperty(pname);
      final String pvalueCurr=currProps.getProperty(pname);
      if (pvalueCurr == null) {
        countNew++;
      }
 else {
        if (pvalueCurr.equals(pvalue)) {
          countNoChange++;
        }
 else {
          countDiffer++;
          changes.append("CHANGED: ").append(pname).append("=  PREV=").append(pvalueCurr).append("   NOW=").append(pvalue).append("\n");
        }
      }
    }
    for (    String pname : currProps.stringPropertyNames()) {
      if (pname.equals(PropertiesZkSerializer.META_PROP)) {
        currMetaPropVal=currProps.getProperty(pname);
        continue;
      }
      if (props.getProperty(pname) == null) {
        countRemoved++;
        changes.append("REMOVED: ").append(pname).append("=").append(currProps.getProperty(pname)).append("\n");
      }
    }
    if (countNew + countRemoved + countDiffer > 0) {
      out.println("Current properties differ: " + countNew + " new,  "+ countDiffer+ " different values, "+ countRemoved+ " removed, "+ countNoChange+ " unchanged, "+ currMetaPropVal+ " previously updated");
      out.println(changes);
      propsDiffer=true;
    }
 else {
      out.println("Current properties identical to file given, entry count=" + countNoChange);
    }
  }
  if (propsDiffer) {
    if (currProps != null) {
      zkClient.delete(propPath);
    }
    zkClient.createPersistent(propPath,props);
    out.println("Properties updated, entry count=" + props.size());
  }
}

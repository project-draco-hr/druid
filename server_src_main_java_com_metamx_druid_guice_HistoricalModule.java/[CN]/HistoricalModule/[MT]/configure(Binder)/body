{
  ConfigProvider.bind(binder,DruidProcessingConfig.class,ImmutableMap.of("base_path","druid.processing"));
  binder.bind(ExecutorServiceConfig.class).to(DruidProcessingConfig.class);
  JsonConfigProvider.bind(binder,"druid.server",DruidServerConfig.class);
  JsonConfigProvider.bind(binder,"druid.segmentCache",SegmentLoaderConfig.class);
  binder.bind(ServerManager.class).in(LazySingleton.class);
  binder.bind(SegmentLoader.class).to(OmniSegmentLoader.class).in(LazySingleton.class);
  binder.bind(QueryableIndexFactory.class).to(MMappedQueryableIndexFactory.class).in(LazySingleton.class);
  final MapBinder<String,DataSegmentPuller> segmentPullerBinder=MapBinder.newMapBinder(binder,String.class,DataSegmentPuller.class);
  segmentPullerBinder.addBinding("local").to(LocalDataSegmentPuller.class).in(LazySingleton.class);
  bindDeepStorageS3(binder);
  bindDeepStorageHdfs(binder);
  bindDeepStorageCassandra(binder);
  binder.bind(QueryRunnerFactoryConglomerate.class).to(DefaultQueryRunnerFactoryConglomerate.class).in(LazySingleton.class);
  binder.bind(ZkCoordinator.class).in(ManageLifecycle.class);
  JsonConfigProvider.bind(binder,"druid.announcer",BatchDataSegmentAnnouncerConfig.class);
  JsonConfigProvider.bind(binder,"druid.announcer",DataSegmentAnnouncerProvider.class);
  binder.bind(DataSegmentAnnouncer.class).toProvider(DataSegmentAnnouncerProvider.class);
  binder.bind(BatchDataSegmentAnnouncer.class).in(ManageLifecycleLast.class);
  binder.bind(SingleDataSegmentAnnouncer.class).in(ManageLifecycleLast.class);
}

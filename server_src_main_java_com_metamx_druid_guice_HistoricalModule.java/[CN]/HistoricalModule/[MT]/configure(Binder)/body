{
  ConfigProvider.bind(binder,DruidServerConfig.class);
  ConfigProvider.bind(binder,DruidProcessingConfig.class,ImmutableMap.of("base_path","druid.processing"));
  binder.bind(ExecutorServiceConfig.class).to(DruidProcessingConfig.class);
  JsonConfigProvider.bind(binder,"druid.segmentCache",SegmentLoaderConfig.class);
  binder.bind(ServerManager.class).in(LazySingleton.class);
  binder.bind(SegmentLoader.class).to(BaseSegmentLoader.class).in(LazySingleton.class);
  binder.bind(QueryableIndexFactory.class).to(MMappedQueryableIndexFactory.class).in(LazySingleton.class);
  final MapBinder<String,DataSegmentPuller> segmentPullerBinder=MapBinder.newMapBinder(binder,String.class,DataSegmentPuller.class);
  segmentPullerBinder.addBinding("local").to(LocalDataSegmentPuller.class).in(LazySingleton.class);
  bindDeepStorageS3(binder);
  bindDeepStorageHdfs(binder);
  bindDeepStorageCassandra(binder);
  final MapBinder<Class<? extends Query>,QueryRunnerFactory> queryFactoryBinder=MapBinder.newMapBinder(binder,new TypeLiteral<Class<? extends Query>>(){
  }
,new TypeLiteral<QueryRunnerFactory>(){
  }
);
  queryFactoryBinder.addBinding(TimeseriesQuery.class).to(TimeseriesQueryRunnerFactory.class).in(LazySingleton.class);
  queryFactoryBinder.addBinding(SearchQuery.class).to(SearchQueryRunnerFactory.class).in(LazySingleton.class);
  queryFactoryBinder.addBinding(TimeBoundaryQuery.class).to(TimeBoundaryQueryRunnerFactory.class).in(LazySingleton.class);
  queryFactoryBinder.addBinding(SegmentMetadataQuery.class).to(SegmentMetadataQueryRunnerFactory.class).in(LazySingleton.class);
  queryFactoryBinder.addBinding(GroupByQuery.class).to(GroupByQueryRunnerFactory.class).in(LazySingleton.class);
  JsonConfigProvider.bind(binder,"druid.query.groupBy",GroupByQueryConfig.class);
  binder.bind(GroupByQueryEngine.class).in(LazySingleton.class);
  binder.bind(QueryRunnerFactoryConglomerate.class).to(DefaultQueryRunnerFactoryConglomerate.class).in(LazySingleton.class);
}

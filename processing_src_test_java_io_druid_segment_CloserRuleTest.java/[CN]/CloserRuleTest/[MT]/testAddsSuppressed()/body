{
  final CloserRule closer=new CloserRule(false);
  final AtomicBoolean closed=new AtomicBoolean(false);
  final String ioExceptionMsg="You can't triple stamp a double stamp!";
  closer.closeLater(new Closeable(){
    @Override public void close() throws IOException {
      throw new IOException(ioExceptionMsg);
    }
  }
);
  closer.closeLater(new Closeable(){
    @Override public void close() throws IOException {
      closed.set(true);
    }
  }
);
  final String msg="You can't divide by zero, you can only take the limit of such!";
  Throwable ex=null;
  try {
    run(closer,new Runnable(){
      @Override public void run(){
        throw new ArithmeticException(msg);
      }
    }
);
  }
 catch (  Throwable e) {
    ex=e;
  }
  Assert.assertTrue(closed.get());
  Assert.assertNotNull(ex);
  Assert.assertTrue(ex instanceof ArithmeticException);
  Assert.assertEquals(msg,ex.getMessage());
  Assert.assertEquals(ImmutableList.of(ioExceptionMsg),Lists.transform(Arrays.asList(ex.getSuppressed()),new Function<Throwable,String>(){
    @Nullable @Override public String apply(    @Nullable Throwable input){
      if (input == null) {
        return null;
      }
      return input.getSuppressed()[0].getMessage();
    }
  }
));
}

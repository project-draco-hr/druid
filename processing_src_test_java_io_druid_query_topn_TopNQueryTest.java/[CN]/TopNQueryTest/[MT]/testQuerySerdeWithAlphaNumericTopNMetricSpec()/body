{
  TopNQuery expectedQuery=new TopNQueryBuilder().dataSource(dataSource).granularity(allGran).dimension(new LegacyDimensionSpec(marketDimension)).metric(new AlphaNumericTopNMetricSpec(null)).threshold(2).intervals(fullOnInterval.getIntervals()).aggregators(Lists.<AggregatorFactory>newArrayList(rowsCount)).build();
  String jsonQuery="{\n" + "  \"queryType\": \"topN\",\n" + "  \"dataSource\": \"testing\",\n"+ "  \"dimension\": \"market\",\n"+ "  \"threshold\": 2,\n"+ "  \"metric\": {\n"+ "    \"type\": \"alphaNumeric\"\n"+ "   },\n"+ "  \"granularity\": \"all\",\n"+ "  \"aggregations\": [\n"+ "    {\n"+ "      \"type\": \"count\",\n"+ "      \"name\": \"rows\"\n"+ "    }\n"+ "  ],\n"+ "  \"intervals\": [\n"+ "    \"1970-01-01T00:00:00.000Z/2020-01-01T00:00:00.000Z\"\n"+ "  ]\n"+ "}";
  TopNQuery actualQuery=jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonQuery,TopNQuery.class)),TopNQuery.class);
  Assert.assertEquals(expectedQuery,actualQuery);
}

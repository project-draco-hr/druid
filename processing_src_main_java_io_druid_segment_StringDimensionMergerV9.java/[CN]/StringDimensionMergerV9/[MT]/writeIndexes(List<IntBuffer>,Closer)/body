{
  long dimStartTime=System.currentTimeMillis();
  final BitmapSerdeFactory bitmapSerdeFactory=indexSpec.getBitmapSerdeFactory();
  String bmpFilename=String.format("%s.inverted",dimensionName);
  bitmapWriter=new GenericIndexedWriter<>(ioPeon,bmpFilename,indexSpec.getBitmapSerdeFactory().getObjectStrategy());
  bitmapWriter.open();
  File dimValueFile=IndexIO.makeDimFile(outDir,dimensionName);
  FileOutputStream fos=new FileOutputStream(dimValueFile);
  ByteStreams.copy(dictionaryWriter.combineStreams(),fos);
  fos.close();
  final MappedByteBuffer dimValsMapped=Files.map(dimValueFile);
  try (Closeable dimValsMappedUnmapper=new Closeable(){
    @Override public void close(){
      ByteBufferUtils.unmap(dimValsMapped);
    }
  }
){
    Indexed<String> dimVals=GenericIndexed.read(dimValsMapped,GenericIndexed.STRING_STRATEGY);
    BitmapFactory bmpFactory=bitmapSerdeFactory.getBitmapFactory();
    RTree tree=null;
    boolean hasSpatial=capabilities.hasSpatialIndexes();
    if (hasSpatial) {
      BitmapFactory bitmapFactory=indexSpec.getBitmapSerdeFactory().getBitmapFactory();
      spatialWriter=new ByteBufferWriter<>(ioPeon,String.format("%s.spatial",dimensionName),new IndexedRTree.ImmutableRTreeObjectStrategy(bitmapFactory));
      spatialWriter.open();
      tree=new RTree(2,new LinearGutmanSplitStrategy(0,50,bmpFactory),bmpFactory);
    }
    IndexSeeker[] dictIdSeeker=toIndexSeekers(adapters,dimConversions,dimensionName);
    for (int dictId=0; dictId < dimVals.size(); dictId++) {
      progress.progress();
      List<Iterable<Integer>> convertedInverteds=Lists.newArrayListWithCapacity(adapters.size());
      for (int j=0; j < adapters.size(); ++j) {
        int seekedDictId=dictIdSeeker[j].seek(dictId);
        if (seekedDictId != IndexSeeker.NOT_EXIST) {
          convertedInverteds.add(new ConvertingIndexedInts(adapters.get(j).getBitmapIndex(dimensionName,seekedDictId),segmentRowNumConversions.get(j)));
        }
      }
      MutableBitmap bitset=bmpFactory.makeEmptyMutableBitmap();
      for (      Integer row : CombiningIterable.createSplatted(convertedInverteds,Ordering.<Integer>natural().nullsFirst())) {
        if (row != IndexMerger.INVALID_ROW) {
          bitset.add(row);
        }
      }
      ImmutableBitmap bitmapToWrite=bitmapSerdeFactory.getBitmapFactory().makeImmutableBitmap(bitset);
      if ((dictId == 0) && (Iterables.getFirst(dimVals,"") == null)) {
        bitmapToWrite=bmpFactory.makeImmutableBitmap(nullRowsBitmap).union(bitmapToWrite);
      }
      bitmapWriter.write(bitmapToWrite);
      if (hasSpatial) {
        String dimVal=dimVals.get(dictId);
        if (dimVal != null) {
          List<String> stringCoords=Lists.newArrayList(SPLITTER.split(dimVal));
          float[] coords=new float[stringCoords.size()];
          for (int j=0; j < coords.length; j++) {
            coords[j]=Float.valueOf(stringCoords.get(j));
          }
          tree.insert(coords,bitset);
        }
      }
    }
    if (hasSpatial) {
      spatialWriter.write(ImmutableRTree.newImmutableFromMutable(tree));
      spatialWriter.close();
    }
    log.info("Completed dim[%s] inverted with cardinality[%,d] in %,d millis.",dimensionName,dimVals.size(),System.currentTimeMillis() - dimStartTime);
  }
   bitmapWriter.close();
  encodedValueWriter.close();
}

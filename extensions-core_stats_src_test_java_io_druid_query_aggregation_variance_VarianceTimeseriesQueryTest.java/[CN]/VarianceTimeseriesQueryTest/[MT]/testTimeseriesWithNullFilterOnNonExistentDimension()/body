{
  TimeseriesQuery query=Druids.newTimeseriesQueryBuilder().dataSource(VarianceTestHelper.dataSource).granularity(VarianceTestHelper.dayGran).filters("bobby",null).intervals(VarianceTestHelper.firstToThird).aggregators(VarianceTestHelper.commonPlusVarAggregators).postAggregators(Arrays.<PostAggregator>asList(VarianceTestHelper.addRowsIndexConstant,VarianceTestHelper.stddevOfIndexPostAggr)).descending(descending).build();
  List<Result<TimeseriesResultValue>> expectedResults=Arrays.asList(new Result<>(new DateTime("2011-04-01"),new TimeseriesResultValue(VarianceTestHelper.of("rows",13L,"index",6626.151596069336,"addRowsIndexConstant",6640.151596069336,"uniques",VarianceTestHelper.UNIQUES_9,"index_var",descending ? 368885.6897238851 : 368885.689155086,"index_stddev",descending ? 607.3596049490657 : 607.35960448081))),new Result<>(new DateTime("2011-04-02"),new TimeseriesResultValue(VarianceTestHelper.of("rows",13L,"index",5833.2095947265625,"addRowsIndexConstant",5847.2095947265625,"uniques",VarianceTestHelper.UNIQUES_9,"index_var",descending ? 259061.6037088883 : 259061.60216419376,"index_stddev",descending ? 508.9809463122252 : 508.98094479478675))));
  Iterable<Result<TimeseriesResultValue>> results=Sequences.toList(runner.run(query,new HashMap<String,Object>()),Lists.<Result<TimeseriesResultValue>>newArrayList());
  assertExpectedResults(expectedResults,results);
}

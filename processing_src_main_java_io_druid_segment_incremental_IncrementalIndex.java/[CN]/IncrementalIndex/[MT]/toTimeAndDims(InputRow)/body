{
  row=formatRow(row);
  if (row.getTimestampFromEpoch() < minTimestamp) {
    throw new IAE("Cannot add row[%s] because it is below the minTimestamp[%s]",row,new DateTime(minTimestamp));
  }
  final List<String> rowDimensions=row.getDimensions();
  int[][] dims;
  List<int[]> overflow=null;
  List<ValueType> overflowTypes=null;
synchronized (dimensionDescs) {
    dims=new int[dimensionDescs.size()][];
    for (    String dimension : rowDimensions) {
      List<Comparable> dimensionValues;
      ColumnCapabilitiesImpl capabilities;
      final ValueType valType;
      DimensionDesc desc=dimensionDescs.get(dimension);
      if (desc != null) {
        capabilities=desc.getCapabilities();
      }
 else {
        capabilities=columnCapabilities.get(dimension);
        if (capabilities == null) {
          capabilities=new ColumnCapabilitiesImpl();
          capabilities.setType(ValueType.STRING);
          columnCapabilities.put(dimension,capabilities);
        }
      }
      valType=capabilities.getType();
      dimensionValues=getRowDimensionAsComparables(row,dimension,valType);
      if (!capabilities.hasMultipleValues() && dimensionValues.size() > 1) {
        capabilities.setHasMultipleValues(true);
      }
      if (desc == null) {
        desc=addNewDimension(dimension,capabilities);
        if (overflow == null) {
          overflow=Lists.newArrayList();
          overflowTypes=Lists.newArrayList();
        }
        overflow.add(getDimVals(desc.getValues(),dimensionValues));
        overflowTypes.add(valType);
      }
 else       if (desc.getIndex() > dims.length || dims[desc.getIndex()] != null) {
        throw new ISE("Dimension[%s] occurred more than once in InputRow",dimension);
      }
 else {
        dims[desc.getIndex()]=getDimVals(desc.getValues(),dimensionValues);
      }
    }
  }
  if (overflow != null) {
    int[][] newDims=new int[dims.length + overflow.size()][];
    System.arraycopy(dims,0,newDims,0,dims.length);
    for (int i=0; i < overflow.size(); ++i) {
      newDims[dims.length + i]=overflow.get(i);
    }
    dims=newDims;
  }
  long truncated=gran.truncate(row.getTimestampFromEpoch());
  return new TimeAndDims(Math.max(truncated,minTimestamp),dims);
}

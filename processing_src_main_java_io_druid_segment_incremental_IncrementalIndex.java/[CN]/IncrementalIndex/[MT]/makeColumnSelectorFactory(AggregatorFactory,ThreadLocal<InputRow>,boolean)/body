{
  return new ColumnSelectorFactory(){
    @Override public LongColumnSelector makeLongColumnSelector(    final String columnName){
      if (columnName.equals(Column.TIME_COLUMN_NAME)) {
        return new LongColumnSelector(){
          @Override public long get(){
            return in.get().getTimestampFromEpoch();
          }
        }
;
      }
      return new LongColumnSelector(){
        @Override public long get(){
          return in.get().getLongMetric(columnName);
        }
      }
;
    }
    @Override public FloatColumnSelector makeFloatColumnSelector(    final String columnName){
      return new FloatColumnSelector(){
        @Override public float get(){
          return in.get().getFloatMetric(columnName);
        }
      }
;
    }
    @Override public ObjectColumnSelector makeObjectColumnSelector(    final String column){
      final String typeName=agg.getTypeName();
      final ObjectColumnSelector<Object> rawColumnSelector=new ObjectColumnSelector<Object>(){
        @Override public Class classOfObject(){
          return Object.class;
        }
        @Override public Object get(){
          return in.get().getRaw(column);
        }
      }
;
      if (!deserializeComplexMetrics) {
        return rawColumnSelector;
      }
 else {
        if (typeName.equals("float")) {
          return rawColumnSelector;
        }
        final ComplexMetricSerde serde=ComplexMetrics.getSerdeForType(typeName);
        if (serde == null) {
          throw new ISE("Don't know how to handle type[%s]",typeName);
        }
        final ComplexMetricExtractor extractor=serde.getExtractor();
        return new ObjectColumnSelector(){
          @Override public Class classOfObject(){
            return extractor.extractedClass();
          }
          @Override public Object get(){
            return extractor.extractValue(in.get(),column);
          }
        }
;
      }
    }
    @Override public DimensionSelector makeDimensionSelector(    final String dimension){
      return new DimensionSelector(){
        @Override public IndexedInts getRow(){
          final List<String> dimensionValues=in.get().getDimension(dimension);
          final ArrayList<Integer> vals=Lists.newArrayList();
          if (dimensionValues != null) {
            for (int i=0; i < dimensionValues.size(); ++i) {
              vals.add(i);
            }
          }
          return new IndexedInts(){
            @Override public int size(){
              return vals.size();
            }
            @Override public int get(            int index){
              return vals.get(index);
            }
            @Override public Iterator<Integer> iterator(){
              return vals.iterator();
            }
          }
;
        }
        @Override public int getValueCardinality(){
          throw new UnsupportedOperationException("value cardinality is unknown in incremental index");
        }
        @Override public String lookupName(        int id){
          return in.get().getDimension(dimension).get(id);
        }
        @Override public int lookupId(        String name){
          return in.get().getDimension(dimension).indexOf(name);
        }
      }
;
    }
  }
;
}

{
  return new Iterable<Row>(){
    @Override public Iterator<Row> iterator(){
      final List<DimensionDesc> dimensions=getDimensions();
      return Iterators.transform(getFacts().iterator(descending),new Function<Map.Entry<TimeAndDims,Integer>,Row>(){
        @Override public Row apply(        final Map.Entry<TimeAndDims,Integer> input){
          final TimeAndDims timeAndDims=input.getKey();
          final int rowOffset=input.getValue();
          Object[] theDims=timeAndDims.getDims();
          Map<String,Object> theVals=Maps.newLinkedHashMap();
          for (int i=0; i < theDims.length; ++i) {
            Object dim=theDims[i];
            DimensionDesc dimensionDesc=dimensions.get(i);
            if (dimensionDesc == null) {
              continue;
            }
            String dimensionName=dimensionDesc.getName();
            DimensionHandler handler=dimensionDesc.getHandler();
            if (dim == null || handler.getLengthFromEncodedArray(dim) == 0) {
              theVals.put(dimensionName,null);
              continue;
            }
            final DimensionIndexer indexer=dimensionDesc.getIndexer();
            Object rowVals=indexer.convertUnsortedEncodedArrayToActualArrayOrList(dim,true);
            theVals.put(dimensionName,rowVals);
          }
          AggregatorType[] aggs=getAggsForRow(rowOffset);
          for (int i=0; i < aggs.length; ++i) {
            theVals.put(metrics[i].getName(),getAggVal(aggs[i],rowOffset,i));
          }
          if (postAggs != null) {
            for (            PostAggregator postAgg : postAggs) {
              theVals.put(postAgg.getName(),postAgg.compute(theVals));
            }
          }
          return new MapBasedRow(timeAndDims.getTimestamp(),theVals);
        }
      }
);
    }
  }
;
}

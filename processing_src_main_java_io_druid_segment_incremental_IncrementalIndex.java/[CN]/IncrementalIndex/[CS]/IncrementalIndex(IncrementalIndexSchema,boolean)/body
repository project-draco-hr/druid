{
  this.minTimestamp=incrementalIndexSchema.getMinTimestamp();
  this.gran=incrementalIndexSchema.getGran();
  this.metrics=incrementalIndexSchema.getMetrics();
  this.rowTransformers=new CopyOnWriteArrayList<>();
  this.deserializeComplexMetrics=deserializeComplexMetrics;
  this.aggs=initAggs(metrics,rowSupplier,deserializeComplexMetrics);
  this.columnCapabilities=Maps.newHashMap();
  this.metricDescs=Maps.newLinkedHashMap();
  for (  AggregatorFactory metric : metrics) {
    MetricDesc metricDesc=new MetricDesc(metricDescs.size(),metric);
    metricDescs.put(metricDesc.getName(),metricDesc);
    columnCapabilities.put(metricDesc.getName(),metricDesc.getCapabilities());
  }
  DimensionsSpec dimensionsSpec=incrementalIndexSchema.getDimensionsSpec();
  this.dimensionDescs=Maps.newLinkedHashMap();
  for (  String dimension : dimensionsSpec.getDimensions()) {
    ColumnCapabilitiesImpl capabilities=new ColumnCapabilitiesImpl();
    capabilities.setType(ValueType.STRING);
    dimensionDescs.put(dimension,new DimensionDesc(dimensionDescs.size(),dimension,newDimDim(dimension),capabilities));
    columnCapabilities.put(dimension,capabilities);
  }
  List<SpatialDimensionSchema> spatialDimensions=dimensionsSpec.getSpatialDimensions();
  if (!spatialDimensions.isEmpty()) {
    this.rowTransformers.add(new SpatialDimensionRowTransformer(spatialDimensions));
  }
  for (  SpatialDimensionSchema spatialDimension : spatialDimensions) {
    ColumnCapabilitiesImpl capabilities=new ColumnCapabilitiesImpl();
    capabilities.setType(ValueType.STRING);
    capabilities.setHasSpatialIndexes(true);
    columnCapabilities.put(spatialDimension.getDimName(),capabilities);
  }
}

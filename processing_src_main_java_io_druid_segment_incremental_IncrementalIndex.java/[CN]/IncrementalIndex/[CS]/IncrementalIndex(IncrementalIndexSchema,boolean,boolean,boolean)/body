{
  this.minTimestamp=incrementalIndexSchema.getMinTimestamp();
  this.gran=incrementalIndexSchema.getGran();
  this.metrics=incrementalIndexSchema.getMetrics();
  this.rowTransformers=new CopyOnWriteArrayList<>();
  this.deserializeComplexMetrics=deserializeComplexMetrics;
  this.reportParseExceptions=reportParseExceptions;
  this.sortFacts=sortFacts;
  this.metadata=new Metadata().setAggregators(getCombiningAggregators(metrics));
  this.aggs=initAggs(metrics,rowSupplier,deserializeComplexMetrics);
  this.columnCapabilities=Maps.newHashMap();
  this.metricDescs=Maps.newLinkedHashMap();
  for (  AggregatorFactory metric : metrics) {
    MetricDesc metricDesc=new MetricDesc(metricDescs.size(),metric);
    metricDescs.put(metricDesc.getName(),metricDesc);
    columnCapabilities.put(metricDesc.getName(),metricDesc.getCapabilities());
  }
  DimensionsSpec dimensionsSpec=incrementalIndexSchema.getDimensionsSpec();
  this.dimensionDescs=Maps.newLinkedHashMap();
  this.dimValues=Collections.synchronizedList(Lists.<DimDim>newArrayList());
  for (  DimensionSchema dimSchema : dimensionsSpec.getDimensions()) {
    ColumnCapabilitiesImpl capabilities=new ColumnCapabilitiesImpl();
    ValueType type=TYPE_MAP.get(dimSchema.getValueType());
    capabilities.setType(type);
    if (dimSchema.getTypeName().equals(DimensionSchema.SPATIAL_TYPE_NAME)) {
      capabilities.setHasSpatialIndexes(true);
    }
 else {
      addNewDimension(dimSchema.getName(),capabilities);
    }
    columnCapabilities.put(dimSchema.getName(),capabilities);
  }
  List<SpatialDimensionSchema> spatialDimensions=dimensionsSpec.getSpatialDimensions();
  if (!spatialDimensions.isEmpty()) {
    this.rowTransformers.add(new SpatialDimensionRowTransformer(spatialDimensions));
  }
}

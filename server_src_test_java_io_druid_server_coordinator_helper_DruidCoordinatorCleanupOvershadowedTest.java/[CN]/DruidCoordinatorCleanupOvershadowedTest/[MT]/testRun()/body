{
  druidCoordinatorCleanupOvershadowed=new DruidCoordinatorCleanupOvershadowed(coordinator);
  availableSegments=ImmutableList.of(segmentV1,segmentV0);
  druidCluster=new DruidCluster(ImmutableMap.of("normal",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(druidServer,mockPeon)))));
  EasyMock.expect(druidServer.getDataSources()).andReturn(ImmutableList.of(druidDataSource)).anyTimes();
  EasyMock.expect(druidDataSource.getSegments()).andReturn(ImmutableSet.<DataSegment>of(segmentV1)).anyTimes();
  EasyMock.expect(druidDataSource.getName()).andReturn("test").anyTimes();
  EasyMock.expect(coordinator.getLoadManagementPeons()).andReturn(ImmutableMap.<String,LoadQueuePeon>of("testHost",mockPeon)).anyTimes();
  coordinator.removeSegment(segmentV0);
  EasyMock.expectLastCall();
  EasyMock.expect(mockPeon.getSegmentsToLoad()).andReturn(ImmutableSet.<DataSegment>of(segmentV0)).anyTimes();
  EasyMock.replay(mockPeon,coordinator,druidServer,druidDataSource);
  DruidCoordinatorRuntimeParams params=DruidCoordinatorRuntimeParams.newBuilder().withAvailableSegments(availableSegments).withCoordinatorStats(new CoordinatorStats()).withDruidCluster(druidCluster).build();
  druidCoordinatorCleanupOvershadowed.run(params);
  EasyMock.verify(coordinator,druidDataSource,druidServer);
}

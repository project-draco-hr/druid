{
  final boolean isBySegment=Boolean.parseBoolean(query.getContextValue("bySegment"));
  final boolean shouldFinalize=Boolean.parseBoolean(query.getContextValue("finalize","true"));
  if (shouldFinalize) {
    Function<T,T> finalizerFn;
    if (isBySegment) {
      finalizerFn=new Function<T,T>(){
        final Function<T,T> baseFinalizer=toolChest.makeMetricManipulatorFn(query,new MetricManipulationFn(){
          @Override public Object manipulate(          AggregatorFactory factory,          Object object){
            return factory.finalizeComputation(factory.deserialize(object));
          }
        }
);
        @Override @SuppressWarnings("unchecked") public T apply(        @Nullable T input){
          Result<BySegmentResultValueClass<T>> result=(Result<BySegmentResultValueClass<T>>)input;
          BySegmentResultValueClass<T> resultsClass=result.getValue();
          return (T)new Result<BySegmentResultValueClass>(result.getTimestamp(),new BySegmentResultValueClass(Lists.transform(resultsClass.getResults(),baseFinalizer),resultsClass.getSegmentId(),resultsClass.getIntervalString()));
        }
      }
;
    }
 else {
      finalizerFn=toolChest.makeMetricManipulatorFn(query,new MetricManipulationFn(){
        @Override public Object manipulate(        AggregatorFactory factory,        Object object){
          return factory.finalizeComputation(object);
        }
      }
);
    }
    return Sequences.map(baseRunner.run(query.withOverriddenContext(ImmutableMap.of("finalize","false"))),finalizerFn);
  }
  return baseRunner.run(query);
}

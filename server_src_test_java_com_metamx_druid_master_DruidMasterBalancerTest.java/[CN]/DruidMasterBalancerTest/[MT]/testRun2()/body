{
  EasyMock.expect(druidServer1.getName()).andReturn("1").atLeastOnce();
  EasyMock.expect(druidServer1.getCurrSize()).andReturn(30L).atLeastOnce();
  EasyMock.expect(druidServer1.getMaxSize()).andReturn(100L).atLeastOnce();
  EasyMock.expect(druidServer1.getSegments()).andReturn(segments).anyTimes();
  EasyMock.expect(druidServer1.getSegment(EasyMock.<String>anyObject())).andReturn(null).anyTimes();
  EasyMock.replay(druidServer1);
  EasyMock.expect(druidServer2.getName()).andReturn("2").atLeastOnce();
  EasyMock.expect(druidServer2.getTier()).andReturn("normal").anyTimes();
  EasyMock.expect(druidServer2.getCurrSize()).andReturn(0L).atLeastOnce();
  EasyMock.expect(druidServer2.getMaxSize()).andReturn(100L).atLeastOnce();
  EasyMock.expect(druidServer2.getSegments()).andReturn(new HashMap<String,DataSegment>()).anyTimes();
  EasyMock.expect(druidServer2.getSegment(EasyMock.<String>anyObject())).andReturn(null).anyTimes();
  EasyMock.replay(druidServer2);
  EasyMock.expect(druidServer3.getName()).andReturn("3").atLeastOnce();
  EasyMock.expect(druidServer3.getTier()).andReturn("normal").anyTimes();
  EasyMock.expect(druidServer3.getCurrSize()).andReturn(0L).atLeastOnce();
  EasyMock.expect(druidServer3.getMaxSize()).andReturn(100L).atLeastOnce();
  EasyMock.expect(druidServer3.getSegments()).andReturn(new HashMap<String,DataSegment>()).anyTimes();
  EasyMock.expect(druidServer3.getSegment(EasyMock.<String>anyObject())).andReturn(null).anyTimes();
  EasyMock.replay(druidServer3);
  EasyMock.expect(druidServer4.getName()).andReturn("4").atLeastOnce();
  EasyMock.expect(druidServer4.getTier()).andReturn("normal").anyTimes();
  EasyMock.expect(druidServer4.getCurrSize()).andReturn(0L).atLeastOnce();
  EasyMock.expect(druidServer4.getMaxSize()).andReturn(100L).atLeastOnce();
  EasyMock.expect(druidServer4.getSegments()).andReturn(new HashMap<String,DataSegment>()).anyTimes();
  EasyMock.expect(druidServer4.getSegment(EasyMock.<String>anyObject())).andReturn(null).anyTimes();
  EasyMock.replay(druidServer4);
  master.moveSegment(EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().anyTimes();
  EasyMock.replay(master);
  LoadQueuePeonTester peon1=new LoadQueuePeonTester();
  LoadQueuePeonTester peon2=new LoadQueuePeonTester();
  LoadQueuePeonTester peon3=new LoadQueuePeonTester();
  LoadQueuePeonTester peon4=new LoadQueuePeonTester();
  DruidMasterRuntimeParams params=DruidMasterRuntimeParams.newBuilder().withDruidCluster(new DruidCluster(ImmutableMap.<String,MinMaxPriorityQueue<ServerHolder>>of("normal",MinMaxPriorityQueue.orderedBy(DruidMasterBalancerTester.percentUsedComparator).create(Arrays.asList(new ServerHolder(druidServer1,peon1),new ServerHolder(druidServer2,peon2),new ServerHolder(druidServer3,peon3),new ServerHolder(druidServer4,peon4)))))).withLoadManagementPeons(ImmutableMap.<String,LoadQueuePeon>of("1",peon1,"2",peon2,"3",peon3,"4",peon4)).withAvailableSegments(segments.values()).withDynamicConfigs(new DynamicConfigs(null,null,null,null){
    @Override public int getMaxSegmentsToMove(){
      return MAX_SEGMENTS_TO_MOVE;
    }
  }
).withBalancerReferenceTimestamp(new DateTime("2013-01-01")).build();
  params=new DruidMasterBalancerTester(master).run(params);
  Assert.assertTrue(params.getMasterStats().getPerTierStats().get("movedCount").get("normal").get() > 0);
}

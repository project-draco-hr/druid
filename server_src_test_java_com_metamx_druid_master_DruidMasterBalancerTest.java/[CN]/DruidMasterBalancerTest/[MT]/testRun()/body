{
  EasyMock.expect(druidServerHigh.getName()).andReturn("from").atLeastOnce();
  EasyMock.expect(druidServerHigh.getCurrSize()).andReturn(30L).atLeastOnce();
  EasyMock.expect(druidServerHigh.getMaxSize()).andReturn(100L).atLeastOnce();
  EasyMock.expect(druidServerHigh.getDataSources()).andReturn(Arrays.asList(dataSource)).atLeastOnce();
  EasyMock.replay(druidServerHigh);
  EasyMock.expect(druidServerLow.getName()).andReturn("to").atLeastOnce();
  EasyMock.expect(druidServerLow.getTier()).andReturn("normal").atLeastOnce();
  EasyMock.expect(druidServerLow.getCurrSize()).andReturn(0L).atLeastOnce();
  EasyMock.expect(druidServerLow.getMaxSize()).andReturn(100L).atLeastOnce();
  EasyMock.expect(druidServerLow.getDataSources()).andReturn(Arrays.asList(dataSource)).anyTimes();
  EasyMock.expect(druidServerLow.getSegment("segment1")).andReturn(null).anyTimes();
  EasyMock.expect(druidServerLow.getSegment("segment2")).andReturn(null).anyTimes();
  EasyMock.expect(druidServerLow.getSegment("segment3")).andReturn(null).anyTimes();
  EasyMock.expect(druidServerLow.getSegment("segment4")).andReturn(null).anyTimes();
  EasyMock.replay(druidServerLow);
  EasyMock.expect(dataSource.getSegments()).andReturn(Sets.<DataSegment>newHashSet(segment1,segment2,segment3,segment4)).atLeastOnce();
  EasyMock.replay(dataSource);
  EasyMock.expect(segment1.getSize()).andReturn(11L).anyTimes();
  EasyMock.expect(segment1.getIdentifier()).andReturn("segment1").anyTimes();
  EasyMock.replay(segment1);
  EasyMock.expect(segment2.getSize()).andReturn(7L).anyTimes();
  EasyMock.expect(segment2.getIdentifier()).andReturn("segment2").anyTimes();
  EasyMock.replay(segment2);
  EasyMock.expect(segment3.getSize()).andReturn(4L).anyTimes();
  EasyMock.expect(segment3.getIdentifier()).andReturn("segment3").anyTimes();
  EasyMock.replay(segment3);
  EasyMock.expect(segment4.getSize()).andReturn(8L).anyTimes();
  EasyMock.expect(segment4.getIdentifier()).andReturn("segment4").anyTimes();
  EasyMock.replay(segment4);
  master.moveSegment(EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  EasyMock.replay(master);
  EasyMock.expect(peon.getLoadQueueSize()).andReturn(0L).atLeastOnce();
  EasyMock.expect(peon.getSegmentsToLoad()).andReturn(Sets.<DataSegment>newHashSet()).atLeastOnce();
  EasyMock.replay(peon);
  DruidMasterRuntimeParams params=DruidMasterRuntimeParams.newBuilder().withDruidCluster(new DruidCluster(ImmutableMap.<String,MinMaxPriorityQueue<ServerHolder>>of("normal",MinMaxPriorityQueue.orderedBy(DruidMasterBalancer.percentUsedComparator).create(Arrays.asList(new ServerHolder(druidServerHigh,peon),new ServerHolder(druidServerLow,peon)))))).withLoadManagementPeons(ImmutableMap.of("from",peon,"to",peon)).build();
  params=new DruidMasterBalancer(master,new BalancerAnalyzer()).run(params);
  Assert.assertTrue(params.getMovedCount().get("normal") > 0);
}

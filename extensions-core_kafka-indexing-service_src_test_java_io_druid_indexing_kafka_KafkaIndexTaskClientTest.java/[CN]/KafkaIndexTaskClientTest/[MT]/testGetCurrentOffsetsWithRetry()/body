{
  client=new TestableKafkaIndexTaskClient(httpClient,objectMapper,taskInfoProvider,3);
  Capture<Request> captured=Capture.newInstance(CaptureType.ALL);
  expect(responseHolder.getStatus()).andReturn(HttpResponseStatus.NOT_FOUND).times(6).andReturn(HttpResponseStatus.OK).times(1);
  expect(responseHolder.getContent()).andReturn("").times(2).andReturn("{\"0\":1, \"1\":10}");
  expect(responseHolder.getResponse()).andReturn(response).times(2);
  expect(response.headers()).andReturn(headers).times(2);
  expect(headers.get("X-Druid-Task-Id")).andReturn(TEST_ID).times(2);
  expect(httpClient.go(capture(captured),anyObject(FullResponseHandler.class),eq(TEST_HTTP_TIMEOUT))).andReturn(Futures.immediateFuture(responseHolder)).times(3);
  replayAll();
  Map<Integer,Long> results=client.getCurrentOffsets(TEST_ID,true);
  verifyAll();
  Assert.assertEquals(3,captured.getValues().size());
  for (  Request request : captured.getValues()) {
    Assert.assertEquals(HttpMethod.GET,request.getMethod());
    Assert.assertEquals(new URL("http://test-host:1234/druid/worker/v1/chat/test-id/offsets/current"),request.getUrl());
    Assert.assertTrue(request.getHeaders().get("X-Druid-Task-Id").contains("test-id"));
  }
  Assert.assertEquals(2,results.size());
  Assert.assertEquals(1,(long)results.get(0));
  Assert.assertEquals(10,(long)results.get(1));
}

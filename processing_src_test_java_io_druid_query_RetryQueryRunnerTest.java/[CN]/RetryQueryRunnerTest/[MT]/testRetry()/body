{
  Map<String,Object> context=new MapMaker().makeMap();
  context.put("count",0);
  context.put(Result.MISSING_SEGMENTS_KEY,Lists.newArrayList());
  RetryQueryRunner<Result<TimeseriesResultValue>> runner=new RetryQueryRunner<>(new QueryRunner<Result<TimeseriesResultValue>>(){
    @Override public Sequence<Result<TimeseriesResultValue>> run(    Query<Result<TimeseriesResultValue>> query,    Map<String,Object> context){
      if ((int)context.get("count") == 0) {
        ((List)context.get(Result.MISSING_SEGMENTS_KEY)).add(new SegmentDescriptor(new Interval(178888,1999999),"test",1));
        context.put("count",1);
        return Sequences.empty();
      }
 else {
        return Sequences.simple(Arrays.asList(new Result<>(new DateTime(),new TimeseriesResultValue(Maps.<String,Object>newHashMap()))));
      }
    }
  }
,(QueryToolChest)new TimeseriesQueryQueryToolChest(QueryRunnerTestHelper.NoopIntervalChunkingQueryRunnerDecorator()),new RetryQueryRunnerConfig(){
    private int numTries=1;
    private boolean returnPartialResults=true;
    public int getNumTries(){
      return numTries;
    }
    public boolean returnPartialResults(){
      return returnPartialResults;
    }
  }
,jsonMapper);
  Iterable<Result<TimeseriesResultValue>> actualResults=Sequences.toList(runner.run(query,context),Lists.<Result<TimeseriesResultValue>>newArrayList());
  Assert.assertTrue("Should return a list with one element",((List)actualResults).size() == 1);
  Assert.assertTrue("Should have nothing in missingSegment list",((List)context.get(Result.MISSING_SEGMENTS_KEY)).size() == 0);
}

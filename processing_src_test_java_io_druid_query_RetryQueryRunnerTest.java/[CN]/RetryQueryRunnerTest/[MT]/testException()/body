{
  Map<String,Object> context=new MapMaker().makeMap();
  context.put(Result.MISSING_SEGMENTS_KEY,Lists.newArrayList());
  RetryQueryRunner<Result<TimeseriesResultValue>> runner=new RetryQueryRunner<>(new QueryRunner<Result<TimeseriesResultValue>>(){
    @Override public Sequence<Result<TimeseriesResultValue>> run(    Query<Result<TimeseriesResultValue>> query,    Map<String,Object> context){
      ((List)context.get(Result.MISSING_SEGMENTS_KEY)).add(new SegmentDescriptor(new Interval(178888,1999999),"test",1));
      return Sequences.empty();
    }
  }
,(QueryToolChest)new TimeseriesQueryQueryToolChest(QueryRunnerTestHelper.NoopIntervalChunkingQueryRunnerDecorator()),new RetryQueryRunnerConfig(){
    private int numTries=1;
    private boolean returnPartialResults=false;
    public int getNumTries(){
      return numTries;
    }
    public boolean returnPartialResults(){
      return returnPartialResults;
    }
  }
,jsonMapper);
  Iterable<Result<TimeseriesResultValue>> actualResults=Sequences.toList(runner.run(query,context),Lists.<Result<TimeseriesResultValue>>newArrayList());
  Assert.assertTrue("Should have one entry in the list of missing segments",((List)context.get(Result.MISSING_SEGMENTS_KEY)).size() == 1);
}

{
  final Task task=new RealtimeIndexTask(null,new TaskResource("rofl",2),new Schema("foo",null,new AggregatorFactory[0],QueryGranularity.NONE,new NoneShardSpec()),null,null,new Period("PT10M"),IndexGranularity.HOUR,null);
  final ObjectMapper jsonMapper=new DefaultObjectMapper();
  final String json=jsonMapper.writeValueAsString(task);
  Thread.sleep(100);
  final Task task2=jsonMapper.readValue(json,Task.class);
  Assert.assertEquals("foo",task.getDataSource());
  Assert.assertEquals(Optional.<Interval>absent(),task.getImplicitLockInterval());
  Assert.assertEquals(2,task.getTaskResource().getRequiredCapacity());
  Assert.assertEquals("rofl",task.getTaskResource().getAvailabilityGroup());
  Assert.assertEquals(new Period("PT10M"),((RealtimeIndexTask)task).getWindowPeriod());
  Assert.assertEquals(IndexGranularity.HOUR,((RealtimeIndexTask)task).getSegmentGranularity());
  Assert.assertEquals(task.getId(),task2.getId());
  Assert.assertEquals(task.getGroupId(),task2.getGroupId());
  Assert.assertEquals(task.getDataSource(),task2.getDataSource());
  Assert.assertEquals(task.getImplicitLockInterval(),task2.getImplicitLockInterval());
  Assert.assertEquals(task.getTaskResource().getRequiredCapacity(),task2.getTaskResource().getRequiredCapacity());
  Assert.assertEquals(task.getTaskResource().getAvailabilityGroup(),task2.getTaskResource().getAvailabilityGroup());
  Assert.assertEquals(((RealtimeIndexTask)task).getWindowPeriod(),((RealtimeIndexTask)task2).getWindowPeriod());
  Assert.assertEquals(((RealtimeIndexTask)task).getSegmentGranularity(),((RealtimeIndexTask)task2).getSegmentGranularity());
}

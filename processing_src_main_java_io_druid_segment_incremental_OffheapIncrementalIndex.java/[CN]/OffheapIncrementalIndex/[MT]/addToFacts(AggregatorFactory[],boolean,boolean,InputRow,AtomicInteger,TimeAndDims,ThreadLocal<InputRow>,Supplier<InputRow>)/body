{
  ByteBuffer aggBuffer;
  int bufferIndex;
  int bufferOffset;
synchronized (this) {
    final Integer priorIndex=facts.getPriorIndex(key);
    if (null != priorIndex) {
      final int[] indexAndOffset=indexAndOffsets.get(priorIndex);
      bufferIndex=indexAndOffset[0];
      bufferOffset=indexAndOffset[1];
      aggBuffer=aggBuffers.get(bufferIndex).get();
    }
 else {
      if (metrics.length > 0 && getAggs()[0] == null) {
        rowContainer.set(row);
        for (int i=0; i < metrics.length; i++) {
          final AggregatorFactory agg=metrics[i];
          getAggs()[i]=agg.factorizeBuffered(makeColumnSelectorFactory(agg,rowSupplier,deserializeComplexMetrics,getColumnCapabilities()));
        }
        rowContainer.set(null);
      }
      bufferIndex=aggBuffers.size() - 1;
      ByteBuffer lastBuffer=aggBuffers.isEmpty() ? null : aggBuffers.get(aggBuffers.size() - 1).get();
      int[] lastAggregatorsIndexAndOffset=indexAndOffsets.isEmpty() ? null : indexAndOffsets.get(indexAndOffsets.size() - 1);
      if (lastAggregatorsIndexAndOffset != null && lastAggregatorsIndexAndOffset[0] != bufferIndex) {
        throw new ISE("last row's aggregate's buffer and last buffer index must be same");
      }
      bufferOffset=aggsTotalSize + (lastAggregatorsIndexAndOffset != null ? lastAggregatorsIndexAndOffset[1] : 0);
      if (lastBuffer != null && lastBuffer.capacity() - bufferOffset >= aggsTotalSize) {
        aggBuffer=lastBuffer;
      }
 else {
        ResourceHolder<ByteBuffer> bb=bufferPool.take();
        aggBuffers.add(bb);
        bufferIndex=aggBuffers.size() - 1;
        bufferOffset=0;
        aggBuffer=bb.get();
      }
      for (int i=0; i < metrics.length; i++) {
        getAggs()[i].init(aggBuffer,bufferOffset + aggOffsetInBuffer[i]);
      }
      if (numEntries.get() >= maxRowCount && facts.getPriorIndex(key) == null) {
        throw new IndexSizeExceededException("Maximum number of rows [%d] reached",maxRowCount);
      }
      final Integer rowIndex=indexIncrement.getAndIncrement();
      indexAndOffsets.add(new int[]{bufferIndex,bufferOffset});
      final Integer prev=facts.putIfAbsent(key,rowIndex);
      if (null == prev) {
        numEntries.incrementAndGet();
      }
 else {
        throw new ISE("WTF! we are in sychronized block.");
      }
    }
  }
  rowContainer.set(row);
  for (int i=0; i < metrics.length; i++) {
    final BufferAggregator agg=getAggs()[i];
synchronized (agg) {
      try {
        agg.aggregate(aggBuffer,bufferOffset + aggOffsetInBuffer[i]);
      }
 catch (      ParseException e) {
        if (reportParseExceptions) {
          throw new ParseException(e,"Encountered parse error for aggregator[%s]",getMetricAggs()[i].getName());
        }
 else {
          log.debug(e,"Encountered parse error, skipping aggregator[%s].",getMetricAggs()[i].getName());
        }
      }
    }
  }
  rowContainer.set(null);
  return numEntries.get();
}

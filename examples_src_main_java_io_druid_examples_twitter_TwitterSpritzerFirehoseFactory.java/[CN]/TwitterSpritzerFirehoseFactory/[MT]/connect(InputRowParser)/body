{
  final ConnectionLifeCycleListener connectionLifeCycleListener=new ConnectionLifeCycleListener(){
    @Override public void onConnect(){
      log.info("Connected_to_Twitter");
    }
    @Override public void onDisconnect(){
      log.info("Disconnect_from_Twitter");
    }
    /** 
 * called before thread gets cleaned up
 */
    @Override public void onCleanUp(){
      log.info("Cleanup_twitter_stream");
    }
  }
;
  final TwitterStream twitterStream;
  final StatusListener statusListener;
  final int QUEUE_SIZE=2000;
  final BlockingQueue<Status> queue=new ArrayBlockingQueue<Status>(QUEUE_SIZE);
  final long startMsec=System.currentTimeMillis();
  twitterStream=new TwitterStreamFactory().getInstance();
  twitterStream.addConnectionLifeCycleListener(connectionLifeCycleListener);
  statusListener=new StatusListener(){
    @Override public void onStatus(    Status status){
      if (Thread.currentThread().isInterrupted()) {
        throw new RuntimeException("Interrupted, time to stop");
      }
      try {
        boolean success=queue.offer(status,15L,TimeUnit.SECONDS);
        if (!success) {
          log.warn("queue too slow!");
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException("InterruptedException",e);
      }
    }
    @Override public void onDeletionNotice(    StatusDeletionNotice statusDeletionNotice){
    }
    @Override public void onTrackLimitationNotice(    int numberOfLimitedStatuses){
      log.warn("Got track limitation notice:" + numberOfLimitedStatuses);
    }
    @Override public void onScrubGeo(    long userId,    long upToStatusId){
    }
    @Override public void onException(    Exception ex){
      ex.printStackTrace();
    }
    @Override public void onStallWarning(    StallWarning warning){
      System.out.println("Got stall warning:" + warning);
    }
  }
;
  twitterStream.addListener(statusListener);
  twitterStream.sample();
  log.info("returned from sample()");
  return new Firehose(){
    private final Runnable doNothingRunnable=new Runnable(){
      public void run(){
      }
    }
;
    private long rowCount=0L;
    private boolean waitIfmax=(getMaxEventCount() < 0L);
    private final Map<String,Object> theMap=new TreeMap<>();
    private boolean maxTimeReached(){
      if (getMaxRunMinutes() <= 0) {
        return false;
      }
 else {
        return (System.currentTimeMillis() - startMsec) / 60000L >= getMaxRunMinutes();
      }
    }
    private boolean maxCountReached(){
      return getMaxEventCount() >= 0 && rowCount >= getMaxEventCount();
    }
    @Override public boolean hasMore(){
      if (maxCountReached() || maxTimeReached()) {
        return waitIfmax;
      }
 else {
        return true;
      }
    }
    @Override public InputRow nextRow(){
      if (Thread.currentThread().isInterrupted()) {
        throw new RuntimeException("Interrupted, time to stop");
      }
      if (maxCountReached() || maxTimeReached()) {
        if (waitIfmax) {
          try {
            log.info("reached limit, sleeping a long time...");
            sleep(2000000000L);
          }
 catch (          InterruptedException e) {
            throw new RuntimeException("InterruptedException",e);
          }
        }
 else {
        }
      }
      if (++rowCount % 1000 == 0) {
        log.info("nextRow() has returned %,d InputRows",rowCount);
      }
      Status status;
      try {
        status=queue.take();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException("InterruptedException",e);
      }
      theMap.clear();
      HashtagEntity[] hts=status.getHashtagEntities();
      String text=status.getText();
      theMap.put("text",(null == text) ? "" : text);
      theMap.put("htags",(hts.length > 0) ? Lists.transform(Arrays.asList(hts),new Function<HashtagEntity,String>(){
        @Nullable @Override public String apply(        HashtagEntity input){
          return input.getText();
        }
      }
) : ImmutableList.<String>of());
      long[] lcontrobutors=status.getContributors();
      List<String> contributors=new ArrayList<>();
      for (      long contrib : lcontrobutors) {
        contributors.add(String.format("%d",contrib));
      }
      theMap.put("contributors",contributors);
      GeoLocation geoLocation=status.getGeoLocation();
      if (null != geoLocation) {
        double lat=status.getGeoLocation().getLatitude();
        double lon=status.getGeoLocation().getLongitude();
        theMap.put("lat",lat);
        theMap.put("lon",lon);
      }
 else {
        theMap.put("lat",null);
        theMap.put("lon",null);
      }
      if (status.getSource() != null) {
        Matcher m=sourcePattern.matcher(status.getSource());
        theMap.put("source",m.find() ? m.group(1) : status.getSource());
      }
      theMap.put("retweet",status.isRetweet());
      if (status.isRetweet()) {
        Status original=status.getRetweetedStatus();
        theMap.put("retweet_count",original.getRetweetCount());
        User originator=original.getUser();
        theMap.put("originator_screen_name",originator != null ? originator.getScreenName() : "");
        theMap.put("originator_follower_count",originator != null ? originator.getFollowersCount() : "");
        theMap.put("originator_friends_count",originator != null ? originator.getFriendsCount() : "");
        theMap.put("originator_verified",originator != null ? originator.isVerified() : "");
      }
      User user=status.getUser();
      final boolean hasUser=(null != user);
      theMap.put("follower_count",hasUser ? user.getFollowersCount() : 0);
      theMap.put("friends_count",hasUser ? user.getFriendsCount() : 0);
      theMap.put("lang",hasUser ? user.getLang() : "");
      theMap.put("utc_offset",hasUser ? user.getUtcOffset() : -1);
      theMap.put("statuses_count",hasUser ? user.getStatusesCount() : 0);
      theMap.put("user_id",hasUser ? String.format("%d",user.getId()) : "");
      theMap.put("screen_name",hasUser ? user.getScreenName() : "");
      theMap.put("location",hasUser ? user.getLocation() : "");
      theMap.put("verified",hasUser ? user.isVerified() : "");
      theMap.put("ts",status.getCreatedAt().getTime());
      List<String> dimensions=Lists.newArrayList(theMap.keySet());
      return new MapBasedInputRow(status.getCreatedAt().getTime(),dimensions,theMap);
    }
    @Override public Runnable commit(){
      return doNothingRunnable;
    }
    @Override public void close() throws IOException {
      log.info("CLOSE twitterstream");
      twitterStream.shutdown();
    }
  }
;
}

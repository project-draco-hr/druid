{
  final TestIndexerMetadataStorageCoordinator mdc=new TestIndexerMetadataStorageCoordinator();
  final RealtimeIndexTask task=makeRealtimeTask(null);
  final TaskToolbox taskToolbox=makeToolbox(task,mdc,tempFolder.newFolder());
  final ListenableFuture<TaskStatus> statusFuture=runTask(task,taskToolbox);
  final DataSegment publishedSegment;
  while (task.getFirehose() == null) {
    Thread.sleep(50);
  }
  final EventReceiverFirehoseFactory.EventReceiverFirehose firehose=(EventReceiverFirehoseFactory.EventReceiverFirehose)task.getFirehose();
  firehose.addRows(ImmutableList.<InputRow>of(new MapBasedInputRow(now,ImmutableList.of("dim1"),ImmutableMap.<String,Object>of("dim1","foo")),new MapBasedInputRow(now,ImmutableList.of("dim2"),ImmutableMap.<String,Object>of("dim2","bar"))));
  firehose.close();
  while (mdc.getPublished().isEmpty()) {
    Thread.sleep(50);
  }
  publishedSegment=Iterables.getOnlyElement(mdc.getPublished());
  Assert.assertEquals(2,countEvents(task));
  for (  Map.Entry<SegmentDescriptor,Pair<Executor,Runnable>> entry : handOffCallbacks.entrySet()) {
    final Pair<Executor,Runnable> executorRunnablePair=entry.getValue();
    Assert.assertEquals(new SegmentDescriptor(publishedSegment.getInterval(),publishedSegment.getVersion(),publishedSegment.getShardSpec().getPartitionNum()),entry.getKey());
    executorRunnablePair.lhs.execute(executorRunnablePair.rhs);
  }
  handOffCallbacks.clear();
  final TaskStatus taskStatus=statusFuture.get();
  Assert.assertEquals(TaskStatus.Status.SUCCESS,taskStatus.getStatusCode());
}

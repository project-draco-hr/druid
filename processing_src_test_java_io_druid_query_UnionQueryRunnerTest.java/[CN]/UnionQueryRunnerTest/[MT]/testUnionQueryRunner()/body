{
  QueryRunner baseRunner=new QueryRunner(){
    @Override public Sequence run(    Query query,    Map responseContext){
      Assert.assertTrue(query.getDataSource() instanceof TableDataSource);
      String dsName=Iterables.getOnlyElement(query.getDataSource().getNames());
      if (dsName.equals("ds1")) {
        responseContext.put("ds1","ds1");
        return Sequences.simple(Arrays.asList(1,2,3));
      }
 else       if (dsName.equals("ds2")) {
        responseContext.put("ds2","ds2");
        return Sequences.simple(Arrays.asList(4,5,6));
      }
 else {
        throw new AssertionError("Unexpected DataSource");
      }
    }
  }
;
  UnionQueryRunner runner=new UnionQueryRunner(baseRunner,new TimeseriesQueryQueryToolChest(QueryRunnerTestHelper.NoopIntervalChunkingQueryRunnerDecorator()));
  Query q=Druids.newTimeseriesQueryBuilder().dataSource(new UnionDataSource(Arrays.asList(new TableDataSource("ds1"),new TableDataSource("ds2")))).intervals("2014-01-01T00:00:00Z/2015-01-01T00:00:00Z").aggregators(QueryRunnerTestHelper.commonAggregators).build();
  Map<String,Object> responseContext=Maps.newHashMap();
  Sequence result=runner.run(q,responseContext);
  List res=Sequences.toList(result,Lists.newArrayList());
  Assert.assertEquals(Arrays.asList(1,2,3,4,5,6),res);
  Assert.assertEquals(2,responseContext.size());
  Assert.assertEquals("ds1",responseContext.get("ds1"));
  Assert.assertEquals("ds2",responseContext.get("ds2"));
}

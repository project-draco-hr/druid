{
  final String author="some author";
  final String comment="some comment";
  final String ip="127.0.0.1";
  final HttpServletRequest request=EasyMock.createStrictMock(HttpServletRequest.class);
  EasyMock.expect(request.getRemoteAddr()).andReturn(ip).once();
  final Capture<AuditInfo> auditInfoCapture=Capture.newInstance();
  final LookupCoordinatorManager lookupCoordinatorManager=EasyMock.createStrictMock(LookupCoordinatorManager.class);
  EasyMock.expect(lookupCoordinatorManager.deleteLookup(EasyMock.eq(LOOKUP_TIER),EasyMock.eq(LOOKUP_NAME),EasyMock.capture(auditInfoCapture))).andReturn(false).once();
  EasyMock.replay(lookupCoordinatorManager,request);
  final LookupCoordinatorResource lookupCoordinatorResource=new LookupCoordinatorResource(lookupCoordinatorManager,mapper,mapper);
  final Response response=lookupCoordinatorResource.deleteLookup(LOOKUP_TIER,LOOKUP_NAME,author,comment,request);
  Assert.assertEquals(404,response.getStatus());
  Assert.assertTrue(auditInfoCapture.hasCaptured());
  final AuditInfo auditInfo=auditInfoCapture.getValue();
  Assert.assertEquals(author,auditInfo.getAuthor());
  Assert.assertEquals(comment,auditInfo.getComment());
  Assert.assertEquals(ip,auditInfo.getIp());
  EasyMock.verify(lookupCoordinatorManager,request);
}

{
  cf.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(joiner.join(statusPath,"first"),jsonMapper.writeValueAsBytes(TaskStatus.running("first")));
  cf.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(joiner.join(statusPath,"second"),jsonMapper.writeValueAsBytes(TaskStatus.running("second")));
  doSetup();
  final Set<String> existingTasks=Sets.newHashSet();
  for (  ImmutableWorkerInfo workerInfo : remoteTaskRunner.getWorkers()) {
    existingTasks.addAll(workerInfo.getRunningTasks());
  }
  Assert.assertEquals("existingTasks",ImmutableSet.of("first","second"),existingTasks);
  final Set<String> runningTasks=Sets.newHashSet(Iterables.transform(remoteTaskRunner.getRunningTasks(),new Function<RemoteTaskRunnerWorkItem,String>(){
    @Override public String apply(    RemoteTaskRunnerWorkItem input){
      return input.getTaskId();
    }
  }
));
  Assert.assertEquals("runningTasks",ImmutableSet.of("first","second"),runningTasks);
}

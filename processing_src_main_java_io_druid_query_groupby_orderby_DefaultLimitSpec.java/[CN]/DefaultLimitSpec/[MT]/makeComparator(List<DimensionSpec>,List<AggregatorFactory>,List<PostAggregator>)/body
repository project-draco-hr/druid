{
  Ordering<Row> ordering=new Ordering<Row>(){
    @Override public int compare(    Row left,    Row right){
      return Longs.compare(left.getTimestampFromEpoch(),right.getTimestampFromEpoch());
    }
  }
;
  Map<String,DimensionSpec> dimensionsMap=Maps.newHashMap();
  for (  DimensionSpec spec : dimensions) {
    dimensionsMap.put(spec.getOutputName(),spec);
  }
  Map<String,AggregatorFactory> aggregatorsMap=Maps.newHashMap();
  for (  final AggregatorFactory agg : aggs) {
    aggregatorsMap.put(agg.getName(),agg);
  }
  Map<String,PostAggregator> postAggregatorsMap=Maps.newHashMap();
  for (  PostAggregator postAgg : postAggs) {
    postAggregatorsMap.put(postAgg.getName(),postAgg);
  }
  for (  OrderByColumnSpec columnSpec : columns) {
    String columnName=columnSpec.getDimension();
    Ordering<Row> nextOrdering=null;
    if (postAggregatorsMap.containsKey(columnName)) {
      nextOrdering=metricOrdering(columnName,postAggregatorsMap.get(columnName).getComparator());
    }
 else     if (aggregatorsMap.containsKey(columnName)) {
      nextOrdering=metricOrdering(columnName,aggregatorsMap.get(columnName).getComparator());
    }
 else     if (dimensionsMap.containsKey(columnName)) {
      nextOrdering=dimensionOrdering(columnName);
    }
    if (nextOrdering == null) {
      throw new ISE("Unknown column in order clause[%s]",columnSpec);
    }
switch (columnSpec.getDirection()) {
case DESCENDING:
      nextOrdering=nextOrdering.reverse();
  }
  ordering=ordering.compound(nextOrdering);
}
return ordering;
}

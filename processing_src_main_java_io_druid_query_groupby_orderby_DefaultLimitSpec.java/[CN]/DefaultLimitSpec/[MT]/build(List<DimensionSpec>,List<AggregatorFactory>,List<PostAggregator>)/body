{
  boolean sortingNeeded=false;
  if (dimensions.size() < columns.size()) {
    sortingNeeded=true;
  }
  final Set<String> aggAndPostAggNames=Sets.newHashSet();
  for (  AggregatorFactory agg : aggs) {
    aggAndPostAggNames.add(agg.getName());
  }
  for (  PostAggregator postAgg : postAggs) {
    aggAndPostAggNames.add(postAgg.getName());
  }
  if (!sortingNeeded) {
    for (int i=0; i < columns.size(); i++) {
      final OrderByColumnSpec columnSpec=columns.get(i);
      if (columnSpec.getDirection() != OrderByColumnSpec.Direction.ASCENDING || !columnSpec.getDimensionComparator().equals(StringComparators.LEXICOGRAPHIC) || !columnSpec.getDimension().equals(dimensions.get(i).getOutputName()) || aggAndPostAggNames.contains(columnSpec.getDimension())) {
        sortingNeeded=true;
        break;
      }
    }
  }
  if (!sortingNeeded) {
    return limit == Integer.MAX_VALUE ? Functions.<Sequence<Row>>identity() : new LimitingFn(limit);
  }
  final Ordering<Row> ordering=makeComparator(dimensions,aggs,postAggs);
  if (limit == Integer.MAX_VALUE) {
    return new SortingFn(ordering);
  }
 else {
    return new TopNFunction(ordering,limit);
  }
}

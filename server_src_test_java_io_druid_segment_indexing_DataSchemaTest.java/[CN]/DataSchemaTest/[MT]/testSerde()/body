{
  String jsonStr="{" + "\"dataSource\":\"test\"," + "\"parser\":{"+ "\"type\":\"string\","+ "\"parseSpec\":{"+ "\"format\":\"json\","+ "\"timestampSpec\":{\"column\":\"xXx\", \"format\": \"auto\", \"missingValue\": null},"+ "\"dimensionsSpec\":{\"dimensions\":[], \"dimensionExclusions\":[]},"+ "\"flattenSpec\":{\"useFieldDiscovery\":true, \"fields\":[]},"+ "\"featureSpec\":{}},"+ "\"encoding\":\"UTF-8\""+ "},"+ "\"metricsSpec\":[{\"type\":\"doubleSum\",\"name\":\"metric1\",\"fieldName\":\"col1\"}],"+ "\"granularitySpec\":{"+ "\"type\":\"arbitrary\","+ "\"queryGranularity\":{\"type\":\"duration\",\"duration\":86400000,\"origin\":\"1970-01-01T00:00:00.000Z\"},"+ "\"intervals\":[\"2014-01-01T00:00:00.000Z/2015-01-01T00:00:00.000Z\"]}}";
  DataSchema actual=jsonMapper.readValue(jsonMapper.writeValueAsString(jsonMapper.readValue(jsonStr,DataSchema.class)),DataSchema.class);
  Assert.assertEquals(new DataSchema("test",jsonMapper.<Map<String,Object>>convertValue(new StringInputRowParser(new JSONParseSpec(new TimestampSpec("xXx",null,null),new DimensionsSpec(null,null,null))),new TypeReference<Map<String,Object>>(){
  }
),new AggregatorFactory[]{new DoubleSumAggregatorFactory("metric1","col1")},new ArbitraryGranularitySpec(QueryGranularity.DAY,ImmutableList.of(Interval.parse("2014/2015"))),jsonMapper),actual);
}

{
  InputRow in=new MapBasedInputRow(timestamp,dims,event);
  AggregatorFactory[] aggregatorFactories=new AggregatorFactory[]{new DoubleSumAggregatorFactory("agg_non_existing","agg_non_existing_in"),new DoubleSumAggregatorFactory("m1out","m1"),new LongSumAggregatorFactory("m2out","m2"),new HyperUniquesAggregatorFactory("m3out","m3"),new LongSumAggregatorFactory("unparseable","m3")};
  byte[] data=InputRowSerde.toBytes(in,aggregatorFactories,false);
  InputRow out=InputRowSerde.fromBytes(data,aggregatorFactories);
  Assert.assertEquals(timestamp,out.getTimestampFromEpoch());
  Assert.assertEquals(dims,out.getDimensions());
  Assert.assertEquals(Collections.EMPTY_LIST,out.getDimension("dim_non_existing"));
  Assert.assertEquals(ImmutableList.of("d1v"),out.getDimension("d1"));
  Assert.assertEquals(ImmutableList.of("d2v1","d2v2"),out.getDimension("d2"));
  Assert.assertEquals(0.0f,out.getFloatMetric("agg_non_existing"),0.00001);
  Assert.assertEquals(5.0f,out.getFloatMetric("m1out"),0.00001);
  Assert.assertEquals(100L,out.getLongMetric("m2out"));
  Assert.assertEquals(1,((HyperLogLogCollector)out.getRaw("m3out")).estimateCardinality(),0.001);
  Assert.assertEquals(0L,out.getLongMetric("unparseable"));
}

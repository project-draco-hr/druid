{
  ProtoBufInputRowParser parser=new ProtoBufInputRowParser(new ParseSpec(new TimestampSpec("timestamp","iso"),new DimensionsSpec(Arrays.asList(DIMENSIONS),Arrays.<String>asList(),null)){
  }
,"prototest.desc",null,null,null,null);
  DateTime dateTime=new DateTime(2012,07,12,9,30);
  ProtoTestEventWrapper.ProtoTestEvent event=ProtoTestEventWrapper.ProtoTestEvent.newBuilder().setDescription("description").setEventType(ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE).setId(4711L).setIsValid(true).setSomeOtherId(4712).setTimestamp(dateTime.toString()).setSomeFloatColumn(47.11F).setSomeIntColumn(815).setSomeLongColumn(816L).build();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  event.writeTo(out);
  InputRow row=parser.parse(ByteBuffer.wrap(out.toByteArray()));
  System.out.println(row);
  assertEquals(Arrays.asList(DIMENSIONS),row.getDimensions());
  assertEquals(dateTime.getMillis(),row.getTimestampFromEpoch());
  assertDimensionEquals(row,"id","4711");
  assertDimensionEquals(row,"isValid","true");
  assertDimensionEquals(row,"someOtherId","4712");
  assertDimensionEquals(row,"description","description");
  assertDimensionEquals(row,"eventType",ProtoTestEventWrapper.ProtoTestEvent.EventCategory.CATEGORY_ONE.name());
  assertEquals(47.11F,row.getFloatMetric("someFloatColumn"),0.0);
  assertEquals(815.0F,row.getFloatMetric("someIntColumn"),0.0);
  assertEquals(816.0F,row.getFloatMetric("someLongColumn"),0.0);
}

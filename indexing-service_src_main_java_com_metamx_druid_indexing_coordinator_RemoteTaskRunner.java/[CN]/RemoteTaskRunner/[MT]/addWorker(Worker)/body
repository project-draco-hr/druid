{
  try {
    final String workerStatusPath=JOINER.join(config.getIndexerStatusPath(),worker.getHost());
    final PathChildrenCache statusCache=new PathChildrenCache(cf,workerStatusPath,true);
    final ZkWorker zkWorker=new ZkWorker(worker,statusCache);
    statusCache.getListenable().addListener(new PathChildrenCacheListener(){
      @Override public void childEvent(      CuratorFramework client,      PathChildrenCacheEvent event) throws Exception {
synchronized (statusLock) {
          try {
            if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED) || event.getType().equals(PathChildrenCacheEvent.Type.CHILD_UPDATED)) {
              final String taskId=ZKPaths.getNodeFromPath(event.getData().getPath());
              final TaskStatus taskStatus=jsonMapper.readValue(event.getData().getData(),TaskStatus.class);
              if (!taskStatus.getId().equals(taskId)) {
                retryTask(runningTasks.get(taskId));
                return;
              }
              log.info("Worker[%s] wrote %s status for task: %s",worker.getHost(),taskStatus.getStatusCode(),taskId);
              statusLock.notify();
              final TaskRunnerWorkItem taskRunnerWorkItem=runningTasks.get(taskId);
              if (taskRunnerWorkItem == null) {
                log.warn("WTF?! Worker[%s] announcing a status for a task I didn't know about: %s",worker.getHost(),taskId);
              }
 else {
                zkWorker.addTask(taskRunnerWorkItem);
              }
              if (taskStatus.isComplete()) {
                if (taskRunnerWorkItem != null) {
                  final ListenableFuture<TaskStatus> result=taskRunnerWorkItem.getResult();
                  if (result != null) {
                    ((SettableFuture<TaskStatus>)result).set(taskStatus);
                  }
                  zkWorker.removeTask(taskRunnerWorkItem);
                }
                zkWorker.setLastCompletedTaskTime(new DateTime());
                cleanup(worker.getHost(),taskId);
                runPendingTasks();
              }
            }
 else             if (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)) {
              final String taskId=ZKPaths.getNodeFromPath(event.getData().getPath());
              TaskRunnerWorkItem taskRunnerWorkItem=runningTasks.get(taskId);
              if (taskRunnerWorkItem != null) {
                log.info("Task %s just disappeared!",taskId);
                zkWorker.removeTask(taskRunnerWorkItem);
                retryTask(taskRunnerWorkItem);
              }
            }
          }
 catch (          Exception e) {
            log.makeAlert(e,"Failed to handle new worker status").addData("worker",worker.getHost()).addData("znode",event.getData().getPath()).emit();
          }
        }
      }
    }
);
    zkWorkers.put(worker.getHost(),zkWorker);
    statusCache.start();
    runPendingTasks();
  }
 catch (  Exception e) {
    throw Throwables.propagate(e);
  }
}

{
  this.buffer=buffer;
  this.keySerde=keySerde;
  this.keySize=keySerde.keySize();
  this.aggregators=new BufferAggregator[aggregatorFactories.length];
  this.aggregatorOffsets=new int[aggregatorFactories.length];
  this.bufferGrouperMaxSize=bufferGrouperMaxSize;
  this.maxLoadFactor=maxLoadFactor > 0 ? maxLoadFactor : DEFAULT_MAX_LOAD_FACTOR;
  this.initialBuckets=initialBuckets > 0 ? Math.max(MIN_INITIAL_BUCKETS,initialBuckets) : DEFAULT_INITIAL_BUCKETS;
  if (this.maxLoadFactor >= 1.0f) {
    throw new IAE("Invalid maxLoadFactor[%f], must be < 1.0",maxLoadFactor);
  }
  int offset=HASH_SIZE + keySize;
  for (int i=0; i < aggregatorFactories.length; i++) {
    aggregators[i]=aggregatorFactories[i].factorizeBuffered(columnSelectorFactory);
    aggregatorOffsets[i]=offset;
    offset+=aggregatorFactories[i].getMaxIntermediateSize();
  }
  this.bucketSize=offset;
  this.tableArenaSize=(buffer.capacity() / (bucketSize + Ints.BYTES)) * bucketSize;
  reset();
}

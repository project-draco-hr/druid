{
  this.jsonMapper=jsonMapper;
  this.config=config;
  this.bridgeZkCoordinator=bridgeZkCoordinator;
  this.announcer=announcer;
  this.serverInventoryView=serverInventoryView;
  this.curator=curator;
  this.leaderLatch=leaderLatch;
  this.exec=scheduledExecutorFactory.create(1,"Coordinator-Exec--%d");
  this.self=self;
  ExecutorService serverInventoryViewExec=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat("DruidClusterBridge-ServerInventoryView-%d").build());
  serverInventoryView.registerSegmentCallback(serverInventoryViewExec,new ServerView.BaseSegmentCallback(){
    @Override public ServerView.CallbackAction segmentAdded(    DruidServerMetadata server,    DataSegment segment){
      try {
synchronized (lock) {
          Integer count=segments.get(segment);
          if (count == null) {
            segments.put(segment,1);
            dataSegmentAnnouncer.announceSegment(segment);
          }
 else {
            segments.put(segment,count + 1);
          }
        }
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
      return ServerView.CallbackAction.CONTINUE;
    }
    @Override public ServerView.CallbackAction segmentRemoved(    DruidServerMetadata server,    DataSegment segment){
      try {
synchronized (lock) {
          serverRemovedSegment(dataSegmentAnnouncer,segment,server);
        }
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
      return ServerView.CallbackAction.CONTINUE;
    }
  }
);
  serverInventoryView.registerServerCallback(serverInventoryViewExec,new ServerView.ServerCallback(){
    @Override public ServerView.CallbackAction serverRemoved(    DruidServer server){
      try {
        for (        DataSegment dataSegment : server.getSegments().values()) {
          serverRemovedSegment(dataSegmentAnnouncer,dataSegment,server.getMetadata());
        }
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
      return ServerView.CallbackAction.CONTINUE;
    }
  }
);
}

{
  final Object value=selector.get();
  if (value == null) {
    return;
  }
  if (value instanceof TIntByteHashMap) {
    final TIntByteHashMap newIbMap=(TIntByteHashMap)value;
    final int[] indexes=newIbMap.keys();
    for (    int index : indexes) {
      if (ibMap.get(index) == ibMap.getNoEntryValue() || newIbMap.get(index) > ibMap.get(index)) {
        ibMap.put(index,newIbMap.get(index));
      }
    }
  }
 else   if (value instanceof String) {
    log.debug("value [%s]",selector.get());
    final long id=Hashing.murmur3_128().hashString((String)(value)).asLong();
    final int bucket=(int)(id >>> (Long.SIZE - log2m));
    final int zerolength=Long.numberOfLeadingZeros((id << log2m) | (1 << (log2m - 1)) + 1) + 1;
    if (ibMap.get(bucket) == ibMap.getNoEntryValue() || ibMap.get(bucket) < (byte)zerolength) {
      ibMap.put(bucket,(byte)zerolength);
    }
  }
 else {
    throw new ISE("Aggregate does not support values of type[%s]",value.getClass().getName());
  }
}

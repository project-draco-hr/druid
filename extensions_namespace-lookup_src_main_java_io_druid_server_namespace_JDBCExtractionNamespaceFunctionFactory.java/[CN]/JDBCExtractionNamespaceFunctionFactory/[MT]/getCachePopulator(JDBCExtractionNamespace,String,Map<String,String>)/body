{
  final long lastCheck=lastVersion == null ? JodaUtils.MIN_INSTANT : Long.parseLong(lastVersion);
  final Long lastDBUpdate=lastUpdates(namespace);
  if (lastDBUpdate != null && lastDBUpdate <= lastCheck) {
    return new Callable<String>(){
      @Override public String call() throws Exception {
        return lastVersion;
      }
    }
;
  }
  return new Callable<String>(){
    @Override public String call(){
      final DBI dbi=ensureDBI(namespace);
      final String table=namespace.getTable();
      final String valueColumn=namespace.getValueColumn();
      final String keyColumn=namespace.getKeyColumn();
      final List<Pair<String,String>> pairs=dbi.withHandle(new HandleCallback<List<Pair<String,String>>>(){
        @Override public List<Pair<String,String>> withHandle(        Handle handle) throws Exception {
          final String query;
          query=String.format("SELECT %s, %s FROM %s",keyColumn,valueColumn,table);
          return handle.createQuery(query).map(new ResultSetMapper<Pair<String,String>>(){
            @Override public Pair<String,String> map(            final int index,            final ResultSet r,            final StatementContext ctx) throws SQLException {
              return new Pair<String,String>(r.getString(keyColumn),r.getString(valueColumn));
            }
          }
).fold(new LinkedList<Pair<String,String>>(),new Folder3<LinkedList<Pair<String,String>>,Pair<String,String>>(){
            @Override public LinkedList<Pair<String,String>> fold(            LinkedList<Pair<String,String>> accumulator,            Pair<String,String> rs,            FoldController control,            StatementContext ctx) throws SQLException {
              accumulator.add(rs);
              return accumulator;
            }
          }
);
        }
      }
);
      for (      Pair<String,String> pair : pairs) {
        cache.put(pair.lhs,pair.rhs);
      }
      return String.format("%d",System.currentTimeMillis());
    }
  }
;
}

{
  final ChildData containerChild=event.getData();
  final String containerKey=containerChild.getPath().substring(config.getInventoryPath().length());
  final ContainerClass container;
switch (event.getType()) {
case CHILD_ADDED:
    container=strategy.deserializeContainer(containerChild.getData());
  if (containers.containsKey(containerKey)) {
    log.error("New node[%s] but there was already one.  That's not good, ignoring new one.",containerChild.getPath());
  }
final String inventoryPath=String.format("%s/%s",config.getContainerPath(),containerKey);
PathChildrenCache containerCache=new PathChildrenCache(curatorFramework,inventoryPath,true,true,new ShutdownNowIgnoringExecutorService(exec));
containerCache.getListenable().addListener(new InventoryCacheListener(containerKey,inventoryPath));
containers.put(containerKey,new ContainerHolder(container,containerCache));
containerCache.start();
break;
case CHILD_REMOVED:
final ContainerHolder removed=containers.remove(containerKey);
if (removed == null) {
log.warn("Container[%s] removed that wasn't a container!?",containerChild.getPath());
break;
}
removed.getCache().close();
strategy.deadContainer(removed.getContainer());
break;
case CHILD_UPDATED:
container=strategy.deserializeContainer(containerChild.getData());
ContainerHolder oldContainer=containers.get(containerKey);
if (oldContainer == null) {
log.warn("Container update[%s], but the old container didn't exist!?  Ignoring.",containerChild.getPath());
}
 else {
synchronized (oldContainer) {
oldContainer.setContainer(strategy.updateContainer(oldContainer.getContainer(),container));
}
}
break;
default :
log.info("Got event[%s] at containerPath[%s]",config.getInventoryPath());
}
}

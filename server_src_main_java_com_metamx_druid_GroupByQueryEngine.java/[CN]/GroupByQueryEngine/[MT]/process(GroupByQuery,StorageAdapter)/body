{
  final List<Interval> intervals=query.getQuerySegmentSpec().getIntervals();
  if (intervals.size() != 1) {
    throw new IAE("Should only have one interval, got[%s]",intervals);
  }
  final Iterable<Cursor> cursors=storageAdapter.makeCursors(Filters.convertDimensionFilters(query.getDimFilter()),intervals.get(0),query.getGranularity());
  final ResourceHolder<ByteBuffer> bufferHolder=intermediateResultsBufferPool.take();
  return new BaseSequence<Row,Iterator<Row>>(new BaseSequence.IteratorMaker<Row,Iterator<Row>>(){
    @Override public Iterator<Row> make(){
      return FunctionalIterator.create(cursors.iterator()).transformCat(new Function<Cursor,Iterator<Row>>(){
        @Override public Iterator<Row> apply(        @Nullable final Cursor cursor){
          return new RowIterator(query,cursor,bufferHolder.get());
        }
      }
);
    }
    @Override public void cleanup(    Iterator<Row> iterFromMake){
      Closeables.closeQuietly(bufferHolder);
    }
  }
);
}

{
  List<Jobby> jobs=Lists.newArrayList();
  JobHelper.ensurePaths(config);
  if (config.isDeterminingPartitions()) {
    jobs.add(config.getPartitionsSpec().getPartitionJob(config));
  }
 else {
    int shardsPerInterval=config.getPartitionsSpec().getShardCount();
    Map<DateTime,List<HadoopyShardSpec>> shardSpecs=Maps.newTreeMap(DateTimeComparator.getInstance());
    int shardCount=0;
    for (    Interval segmentGranularity : config.getSegmentGranularIntervals().get()) {
      DateTime bucket=segmentGranularity.getStart();
      if (shardsPerInterval > 0) {
        for (int i=0; i < shardsPerInterval; i++) {
          final HadoopyShardSpec spec=new HadoopyShardSpec(new HashBasedNumberedShardSpec(i,shardsPerInterval),shardCount++);
          shardSpecs.put(bucket,Lists.newArrayList(spec));
          log.info("DateTime[%s], spec[%s]",bucket,spec);
        }
      }
 else {
        final HadoopyShardSpec spec=new HadoopyShardSpec(new NoneShardSpec(),shardCount++);
        shardSpecs.put(bucket,Lists.newArrayList(spec));
        log.info("DateTime[%s], spec[%s]",bucket,spec);
      }
    }
    config.setShardSpecs(shardSpecs);
  }
  return JobHelper.runJobs(jobs,config);
}

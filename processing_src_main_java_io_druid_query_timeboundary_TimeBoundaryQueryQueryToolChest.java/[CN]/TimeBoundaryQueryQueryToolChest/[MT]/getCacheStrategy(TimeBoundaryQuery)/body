{
  return new CacheStrategy<Result<TimeBoundaryResultValue>,Object,TimeBoundaryQuery>(){
    @Override public byte[] computeCacheKey(    TimeBoundaryQuery query){
      final byte[] cacheKey=query.getCacheKey();
      return ByteBuffer.allocate(1 + cacheKey.length).put(TIMEBOUNDARY_QUERY).put(cacheKey).array();
    }
    @Override public TypeReference<Object> getCacheObjectClazz(){
      return OBJECT_TYPE_REFERENCE;
    }
    @Override public Function<Result<TimeBoundaryResultValue>,Object> prepareForCache(){
      return new Function<Result<TimeBoundaryResultValue>,Object>(){
        @Override public Object apply(        Result<TimeBoundaryResultValue> input){
          return Lists.newArrayList(input.getTimestamp().getMillis(),input.getValue());
        }
      }
;
    }
    @Override public Function<Object,Result<TimeBoundaryResultValue>> pullFromCache(){
      return new Function<Object,Result<TimeBoundaryResultValue>>(){
        @Override @SuppressWarnings("unchecked") public Result<TimeBoundaryResultValue> apply(        Object input){
          List<Object> result=(List<Object>)input;
          return new Result<>(new DateTime(((Number)result.get(0)).longValue()),new TimeBoundaryResultValue(result.get(1)));
        }
      }
;
    }
    @Override public Sequence<Result<TimeBoundaryResultValue>> mergeSequences(    Sequence<Sequence<Result<TimeBoundaryResultValue>>> seqOfSequences){
      return new MergeSequence<>(getOrdering(),seqOfSequences);
    }
  }
;
}

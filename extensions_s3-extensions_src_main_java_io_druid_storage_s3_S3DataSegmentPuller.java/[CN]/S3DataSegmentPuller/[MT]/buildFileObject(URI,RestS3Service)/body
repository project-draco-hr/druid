{
  final URI checkedUri=checkURI(uri);
  final AmazonS3URI s3URI=new AmazonS3URI(checkedUri);
  final String key=s3URI.getKey();
  final String bucket=s3URI.getBucket();
  final S3Object s3Obj=s3Client.getObject(bucket,key);
  final String path=uri.getPath();
  return new FileObject(){
    @Override public URI toUri(){
      return uri;
    }
    @Override public String getName(){
      final String ext=Files.getFileExtension(path);
      return Files.getNameWithoutExtension(path) + (Strings.isNullOrEmpty(ext) ? "" : ("." + ext));
    }
    @Override public InputStream openInputStream() throws IOException {
      try {
        return s3Obj.getDataInputStream();
      }
 catch (      ServiceException e) {
        throw new IOException(String.format("Could not load S3 URI [%s]",checkedUri.toString()),e);
      }
    }
    @Override public OutputStream openOutputStream() throws IOException {
      throw new UOE("Cannot stream S3 output");
    }
    @Override public Reader openReader(    boolean ignoreEncodingErrors) throws IOException {
      throw new UOE("Cannot open reader");
    }
    @Override public CharSequence getCharContent(    boolean ignoreEncodingErrors) throws IOException {
      throw new UOE("Cannot open character sequence");
    }
    @Override public Writer openWriter() throws IOException {
      throw new UOE("Cannot open writer");
    }
    @Override public long getLastModified(){
      return s3Obj.getLastModifiedDate().getTime();
    }
    @Override public boolean delete(){
      throw new UOE("Cannot delete S3 items anonymously. jetS3t doesn't support authenticated deletes easily.");
    }
  }
;
}

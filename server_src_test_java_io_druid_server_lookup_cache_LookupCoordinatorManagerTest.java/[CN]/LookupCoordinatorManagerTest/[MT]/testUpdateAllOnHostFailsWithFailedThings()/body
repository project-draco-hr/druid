{
  final HttpResponseHandler<InputStream,InputStream> responseHandler=EasyMock.createStrictMock(HttpResponseHandler.class);
  final String failedLookup="failedLookup";
  final URL url=LookupCoordinatorManager.getLookupsURL(HostAndPort.fromString("localhost"));
  final SettableFuture<InputStream> future=SettableFuture.create();
  future.set(new ByteArrayInputStream(StringUtils.toUtf8(mapper.writeValueAsString(ImmutableMap.of("status","accepted",LookupModule.FAILED_UPDATES_KEY,ImmutableMap.of(failedLookup,ImmutableMap.of()))))));
  EasyMock.expect(client.go(EasyMock.<Request>anyObject(),EasyMock.<SequenceInputStreamResponseHandler>anyObject(),EasyMock.<Duration>anyObject())).andReturn(future).once();
  EasyMock.replay(client,responseHandler);
  final LookupCoordinatorManager manager=new LookupCoordinatorManager(client,discoverer,mapper,configManager,lookupCoordinatorManagerConfig){
    @Override HttpResponseHandler<InputStream,InputStream> makeResponseHandler(    final AtomicInteger returnCode,    final AtomicReference<String> reasonString){
      returnCode.set(200);
      reasonString.set("");
      return responseHandler;
    }
  }
;
  expectedException.expectMessage("Lookups failed to update: [\"" + failedLookup + "\"]");
  try {
    manager.updateAllOnHost(url,SINGLE_LOOKUP_MAP);
  }
  finally {
    EasyMock.verify(client,responseHandler);
  }
}

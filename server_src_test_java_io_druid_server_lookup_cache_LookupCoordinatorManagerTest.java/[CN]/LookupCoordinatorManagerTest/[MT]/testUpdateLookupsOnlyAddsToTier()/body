{
  final Map<String,Object> ignore=ImmutableMap.<String,Object>of("prop","old");
  final AuditInfo auditInfo=new AuditInfo("author","comment","localhost");
  final LookupCoordinatorManager manager=new LookupCoordinatorManager(client,discoverer,mapper,configManager,lookupCoordinatorManagerConfig){
    @Override public Map<String,Map<String,Map<String,Object>>> getKnownLookups(){
      return ImmutableMap.<String,Map<String,Map<String,Object>>>of(LOOKUP_TIER + "1",ImmutableMap.<String,Map<String,Object>>of("foo",ImmutableMap.<String,Object>of("prop","old")),LOOKUP_TIER + "2",ImmutableMap.of("ignore",ignore));
    }
  }
;
  final Map<String,Object> newSpec=ImmutableMap.<String,Object>of("prop","new");
  EasyMock.reset(configManager);
  EasyMock.expect(configManager.set(EasyMock.eq(LookupCoordinatorManager.LOOKUP_CONFIG_KEY),EasyMock.eq(ImmutableMap.<String,Map<String,Map<String,Object>>>of(LOOKUP_TIER + "1",ImmutableMap.of("foo",newSpec),LOOKUP_TIER + "2",ImmutableMap.of("ignore",ignore))),EasyMock.eq(auditInfo))).andReturn(true).once();
  EasyMock.replay(configManager);
  Assert.assertTrue(manager.updateLookups(ImmutableMap.<String,Map<String,Map<String,Object>>>of(LOOKUP_TIER + "1",ImmutableMap.<String,Map<String,Object>>of("foo",newSpec)),auditInfo));
  EasyMock.verify(configManager);
}

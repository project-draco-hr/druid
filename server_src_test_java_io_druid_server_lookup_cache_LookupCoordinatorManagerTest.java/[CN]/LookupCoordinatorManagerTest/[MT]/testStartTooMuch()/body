{
  final AtomicReference<List<Map<String,Object>>> lookupRef=new AtomicReference<>(null);
  EasyMock.reset(configManager);
  EasyMock.expect(configManager.watch(EasyMock.eq(LookupCoordinatorManager.LOOKUP_CONFIG_KEY),EasyMock.<TypeReference>anyObject(),EasyMock.<AtomicReference>isNull())).andReturn(lookupRef).once();
  EasyMock.replay(configManager);
  final LookupCoordinatorManager manager=new LookupCoordinatorManager(client,discoverer,mapper,configManager,lookupCoordinatorManagerConfig);
  manager.start();
  Assert.assertTrue(manager.backgroundManagerIsRunning());
  Assert.assertFalse(manager.waitForBackgroundTermination(10));
  manager.stop();
  expectedException.expect(new BaseMatcher<Throwable>(){
    @Override public boolean matches(    Object o){
      return o instanceof ISE && ((ISE)o).getMessage().equals("Cannot restart after stop!");
    }
    @Override public void describeTo(    Description description){
    }
  }
);
  try {
    manager.start();
  }
  finally {
    EasyMock.verify(configManager);
  }
}

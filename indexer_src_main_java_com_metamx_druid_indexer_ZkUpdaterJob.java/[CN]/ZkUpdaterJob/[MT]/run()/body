{
  if (!spec.postToZk()) {
    return true;
  }
  Configuration conf=new Configuration();
  for (  String propName : System.getProperties().stringPropertyNames()) {
    if (propName.startsWith("hadoop.")) {
      conf.set(propName.substring("hadoop.".length()),System.getProperty(propName));
    }
  }
  final Lifecycle lifecycle=new Lifecycle();
  ZkClient zkClient=Initialization.makeZkClient(new ZkClientConfig(){
    @Override public String getZkHosts(){
      return spec.getZkQuorum();
    }
  }
,lifecycle);
  try {
    lifecycle.start();
  }
 catch (  Exception e) {
    log.error(e,"Exception on lifecycle start?");
    lifecycle.stop();
    return false;
  }
  try {
    zkClient.waitUntilConnected();
    final String dataSourceBasePath=JOINER.join(spec.getZkBasePath(),config.getDataSource());
    if (!zkClient.exists(dataSourceBasePath)) {
      zkClient.createPersistent(dataSourceBasePath,jsonMapper.writeValueAsString(ImmutableMap.of("created",new DateTime().toString())));
    }
    for (    Bucket bucket : config.getAllBuckets()) {
      final Path path=new Path(config.makeSegmentOutputPath(bucket),"descriptor.json");
      DataSegment segment=jsonMapper.readValue(path.getFileSystem(conf).open(path),DataSegment.class);
      String segmentPath=JOINER.join(dataSourceBasePath,segment.getIdentifier());
      log.info("Adding index to list of indexes at zkPath[%s].",segmentPath);
      zkClient.createPersistent(segmentPath,jsonMapper.writeValueAsString(segment));
    }
  }
 catch (  Exception e) {
    log.error(e,"Exception when trying to update zk metadata.");
    return false;
  }
 finally {
    lifecycle.stop();
  }
  return true;
}

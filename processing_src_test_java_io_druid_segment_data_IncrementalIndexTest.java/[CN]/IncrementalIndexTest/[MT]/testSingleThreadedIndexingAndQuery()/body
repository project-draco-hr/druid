{
  final int dimensionCount=5;
  final ArrayList<AggregatorFactory> ingestAggregatorFactories=new ArrayList<>();
  ingestAggregatorFactories.add(new CountAggregatorFactory("rows"));
  for (int i=0; i < dimensionCount; ++i) {
    ingestAggregatorFactories.add(new LongSumAggregatorFactory(String.format("sumResult%s",i),String.format("Dim_%s",i)));
    ingestAggregatorFactories.add(new DoubleSumAggregatorFactory(String.format("doubleSumResult%s",i),String.format("Dim_%s",i)));
  }
  final IncrementalIndex index=closer.closeLater(indexCreator.createIndex(ingestAggregatorFactories.toArray(new AggregatorFactory[ingestAggregatorFactories.size()])));
  final long timestamp=System.currentTimeMillis();
  final int rows=50;
  for (int i=0; i < rows; i++) {
    index.add(getLongRow(timestamp + i,i,dimensionCount));
  }
  for (int i=0; i < rows; i++) {
    index.add(getLongRow(timestamp + i,i,dimensionCount));
  }
  final ArrayList<AggregatorFactory> queryAggregatorFactories=new ArrayList<>();
  queryAggregatorFactories.add(new CountAggregatorFactory("rows"));
  for (int i=0; i < dimensionCount; ++i) {
    queryAggregatorFactories.add(new LongSumAggregatorFactory(String.format("sumResult%s",i),String.format("sumResult%s",i)));
    queryAggregatorFactories.add(new DoubleSumAggregatorFactory(String.format("doubleSumResult%s",i),String.format("doubleSumResult%s",i)));
  }
  TimeseriesQuery query=Druids.newTimeseriesQueryBuilder().dataSource("xxx").granularity(QueryGranularity.ALL).intervals(ImmutableList.of(new Interval("2000/2030"))).aggregators(queryAggregatorFactories).build();
  final Segment incrementalIndexSegment=new IncrementalIndexSegment(index,null);
  final QueryRunnerFactory factory=new TimeseriesQueryRunnerFactory(new TimeseriesQueryQueryToolChest(QueryRunnerTestHelper.NoopIntervalChunkingQueryRunnerDecorator()),new TimeseriesQueryEngine(),QueryRunnerTestHelper.NOOP_QUERYWATCHER);
  final QueryRunner<Result<TimeseriesResultValue>> runner=new FinalizeResultsQueryRunner<Result<TimeseriesResultValue>>(factory.createRunner(incrementalIndexSegment),factory.getToolchest());
  List<Result<TimeseriesResultValue>> results=Sequences.toList(runner.run(query,new HashMap<String,Object>()),new LinkedList<Result<TimeseriesResultValue>>());
  Result<TimeseriesResultValue> result=Iterables.getOnlyElement(results);
  Assert.assertEquals(rows,result.getValue().getLongMetric("rows").intValue());
  for (int i=0; i < dimensionCount; ++i) {
    Assert.assertEquals(String.format("Failed long sum on dimension %d",i),2 * rows,result.getValue().getLongMetric(String.format("sumResult%s",i)).intValue());
    Assert.assertEquals(String.format("Failed double sum on dimension %d",i),2 * rows,result.getValue().getDoubleMetric(String.format("doubleSumResult%s",i)).intValue());
  }
}

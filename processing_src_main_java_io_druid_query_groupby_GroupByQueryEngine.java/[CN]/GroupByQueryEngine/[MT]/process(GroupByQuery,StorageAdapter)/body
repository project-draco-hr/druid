{
  if (storageAdapter == null) {
    throw new ISE("Null storage adapter found. Probably trying to issue a query against a segment being memory unmapped.");
  }
  final List<Interval> intervals=query.getQuerySegmentSpec().getIntervals();
  if (intervals.size() != 1) {
    throw new IAE("Should only have one interval, got[%s]",intervals);
  }
  final Sequence<Cursor> cursors=storageAdapter.makeCursors(Filters.convertDimensionFilters(query.getDimFilter()),intervals.get(0),query.getGranularity());
  final ResourceHolder<ByteBuffer> bufferHolder=intermediateResultsBufferPool.take();
  return Sequences.concat(Sequences.withBaggage(Sequences.map(cursors,new Function<Cursor,Sequence<Row>>(){
    @Override public Sequence<Row> apply(    @Nullable final Cursor cursor){
      return new BaseSequence<Row,RowIterator>(new BaseSequence.IteratorMaker<Row,RowIterator>(){
        @Override public RowIterator make(){
          return new RowIterator(query,cursor,bufferHolder.get(),config.get());
        }
        @Override public void cleanup(        RowIterator iterFromMake){
          Closeables.closeQuietly(iterFromMake);
        }
      }
);
    }
  }
),new Closeable(){
    @Override public void close() throws IOException {
      Closeables.closeQuietly(bufferHolder);
    }
  }
));
}

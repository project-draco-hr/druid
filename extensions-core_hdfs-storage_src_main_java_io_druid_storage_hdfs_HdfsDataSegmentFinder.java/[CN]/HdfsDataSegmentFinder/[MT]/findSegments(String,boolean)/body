{
  final Set<DataSegment> segments=Sets.newHashSet();
  final Path workingDirPath=new Path(workingDirPathStr);
  FileSystem fs;
  try {
    fs=workingDirPath.getFileSystem(config);
    log.info(fs.getScheme());
    log.info("FileSystem URI:" + fs.getUri().toString());
    if (!fs.exists(workingDirPath)) {
      throw new SegmentLoadingException("Working directory [%s] doesn't exist.",workingDirPath);
    }
    if (!fs.isDirectory(workingDirPath)) {
      throw new SegmentLoadingException("Working directory [%s] is not a directory!?",workingDirPath);
    }
    final RemoteIterator<LocatedFileStatus> it=fs.listFiles(workingDirPath,true);
    while (it.hasNext()) {
      final LocatedFileStatus locatedFileStatus=it.next();
      final Path path=locatedFileStatus.getPath();
      if (path.getName().equals("descriptor.json")) {
        final Path indexZip=new Path(path.getParent(),"index.zip");
        if (fs.exists(indexZip)) {
          final DataSegment dataSegment=mapper.readValue(fs.open(path),DataSegment.class);
          log.info("Found segment [%s] located at [%s]",dataSegment.getIdentifier(),indexZip);
          final Map<String,Object> loadSpec=dataSegment.getLoadSpec();
          final String pathWithoutScheme=indexZip.toUri().getPath();
          if (!loadSpec.get("type").equals(HdfsStorageDruidModule.SCHEME) || !loadSpec.get("path").equals(pathWithoutScheme)) {
            loadSpec.put("type",HdfsStorageDruidModule.SCHEME);
            loadSpec.put("path",pathWithoutScheme);
            if (updateDescriptor) {
              log.info("Updating loadSpec in descriptor.json at [%s] with new path [%s]",path,pathWithoutScheme);
              mapper.writeValue(fs.create(path,true),dataSegment);
            }
          }
          segments.add(dataSegment);
        }
 else {
          throw new SegmentLoadingException("index.zip didn't exist at [%s] while descripter.json exists!?",indexZip);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new SegmentLoadingException(e,"Problems interacting with filesystem[%s].",workingDirPath);
  }
  return segments;
}

{
  mockPeon.dropSegment(EasyMock.<DataSegment>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  EasyMock.expect(mockPeon.getSegmentsToLoad()).andReturn(Sets.<DataSegment>newHashSet()).atLeastOnce();
  EasyMock.expect(mockPeon.getLoadQueueSize()).andReturn(0L).atLeastOnce();
  EasyMock.replay(mockPeon);
  EasyMock.expect(coordinator.getDynamicConfigs()).andReturn(new CoordinatorDynamicConfig(0,0,0,0,1,24,0,false,null)).anyTimes();
  coordinator.removeSegment(EasyMock.<DataSegment>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  EasyMock.replay(coordinator);
  EasyMock.expect(databaseRuleManager.getRulesWithDefault(EasyMock.<String>anyObject())).andReturn(Lists.<Rule>newArrayList(new IntervalLoadRule(new Interval("2012-01-01T00:00:00.000Z/2012-01-01T12:00:00.000Z"),ImmutableMap.<String,Integer>of("normal",1)),new IntervalDropRule(new Interval("2012-01-01T00:00:00.000Z/2012-01-02T00:00:00.000Z")))).atLeastOnce();
  EasyMock.replay(databaseRuleManager);
  DruidServer server=new DruidServer("serverNorm","hostNorm",1000,"historical","normal",0);
  for (  DataSegment segment : availableSegments) {
    server.addDataSegment(segment.getIdentifier(),segment);
  }
  DruidCluster druidCluster=new DruidCluster(ImmutableMap.of("normal",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(server.toImmutableDruidServer(),mockPeon)))));
  SegmentReplicantLookup segmentReplicantLookup=SegmentReplicantLookup.make(druidCluster);
  DruidCoordinatorRuntimeParams params=new DruidCoordinatorRuntimeParams.Builder().withDruidCluster(druidCluster).withDynamicConfigs(new CoordinatorDynamicConfig.Builder().withMillisToWaitBeforeDeleting(0L).build()).withAvailableSegments(availableSegments).withDatabaseRuleManager(databaseRuleManager).withSegmentReplicantLookup(segmentReplicantLookup).withBalancerReferenceTimestamp(new DateTime("2013-01-01")).build();
  DruidCoordinatorRuntimeParams afterParams=ruleRunner.run(params);
  CoordinatorStats stats=afterParams.getCoordinatorStats();
  Assert.assertTrue(stats.getGlobalStats().get("deletedCount").get() == 12);
  EasyMock.verify(coordinator);
}

{
  EasyMock.expect(databaseRuleManager.getRulesWithDefault(EasyMock.<String>anyObject())).andReturn(Lists.<Rule>newArrayList(new IntervalLoadRule(new Interval("2012-01-01T00:00:00.000Z/2012-01-01T01:00:00.000Z"),0,"normal"))).atLeastOnce();
  EasyMock.replay(databaseRuleManager);
  DruidServer server1=new DruidServer("server1","host1",1000,"historical","normal");
  server1.addDataSegment(availableSegments.get(0).getIdentifier(),availableSegments.get(0));
  DruidServer server2=new DruidServer("serverNorm2","hostNorm2",1000,"historical","normal");
  server2.addDataSegment(availableSegments.get(1).getIdentifier(),availableSegments.get(1));
  DruidServer server3=new DruidServer("serverNorm3","hostNorm3",1000,"historical","normal");
  server3.addDataSegment(availableSegments.get(1).getIdentifier(),availableSegments.get(1));
  server3.addDataSegment(availableSegments.get(2).getIdentifier(),availableSegments.get(2));
  mockPeon.dropSegment(EasyMock.<DataSegment>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().atLeastOnce();
  EasyMock.expect(mockPeon.getSegmentsToLoad()).andReturn(Sets.<DataSegment>newHashSet()).atLeastOnce();
  EasyMock.expect(mockPeon.getLoadQueueSize()).andReturn(0L).atLeastOnce();
  EasyMock.replay(mockPeon);
  LoadQueuePeon anotherMockPeon=EasyMock.createMock(LoadQueuePeon.class);
  EasyMock.expect(anotherMockPeon.getSegmentsToLoad()).andReturn(Sets.<DataSegment>newHashSet()).atLeastOnce();
  EasyMock.expect(anotherMockPeon.getLoadQueueSize()).andReturn(10L).atLeastOnce();
  EasyMock.replay(anotherMockPeon);
  DruidCluster druidCluster=new DruidCluster(ImmutableMap.of("normal",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(server1,mockPeon),new ServerHolder(server2,anotherMockPeon),new ServerHolder(server3,anotherMockPeon)))));
  SegmentReplicantLookup segmentReplicantLookup=SegmentReplicantLookup.make(druidCluster);
  DruidCoordinatorRuntimeParams params=new DruidCoordinatorRuntimeParams.Builder().withDruidCluster(druidCluster).withDynamicConfigs(new CoordinatorDynamicConfig.Builder().withMillisToWaitBeforeDeleting(0L).build()).withAvailableSegments(availableSegments).withDatabaseRuleManager(databaseRuleManager).withSegmentReplicantLookup(segmentReplicantLookup).withBalancerReferenceTimestamp(new DateTime("2013-01-01")).build();
  DruidCoordinatorRuntimeParams afterParams=ruleRunner.run(params);
  CoordinatorStats stats=afterParams.getCoordinatorStats();
  Assert.assertTrue(stats.getPerTierStats().get("droppedCount").get("normal").get() == 1);
  EasyMock.verify(mockPeon);
  EasyMock.verify(anotherMockPeon);
}

{
  log.info("Setting up");
  handle=derbyConnectorRule.getConnector().getDBI().open();
  Assert.assertEquals(0,handle.createStatement(String.format("CREATE TABLE %s (%s TIMESTAMP, %s VARCHAR(64), %s VARCHAR(64))",tableName,tsColumn_,keyName,valName)).setQueryTimeout(1).execute());
  handle.createStatement(String.format("TRUNCATE TABLE %s",tableName)).setQueryTimeout(1).execute();
  handle.commit();
  for (  Map.Entry<String,String> entry : renames.entrySet()) {
    insertValues(entry.getKey(),entry.getValue(),"2015-01-01 00:00:00");
  }
  extractionCacheManager=new OnHeapNamespaceExtractionCacheManager(lifecycle,fnCache,new NoopServiceEmitter(),ImmutableMap.<Class<? extends ExtractionNamespace>,ExtractionNamespaceFunctionFactory<?>>of(JDBCExtractionNamespace.class,new JDBCExtractionNamespaceFunctionFactory(){
    @Override public Callable<String> getCachePopulator(    final JDBCExtractionNamespace namespace,    final String lastVersion,    final Map<String,String> cache){
      final Callable<String> cachePopulator=super.getCachePopulator(namespace,lastVersion,cache);
      return new Callable<String>(){
        @Override public String call() throws Exception {
synchronized (updateLock) {
            log.debug("Running cache populator");
            try {
              return cachePopulator.call();
            }
  finally {
              updates.incrementAndGet();
            }
          }
        }
      }
;
    }
  }
));
  lifecycle.start();
}

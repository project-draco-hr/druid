{
  IncrementalIndex index=null;
  List<File> toMerge=new ArrayList<>();
  try {
    index=new OnheapIncrementalIndex(minTimestamp,gran,metrics,deserializeComplexMetrics,maxRowCount);
    while (rows.hasNext()) {
      Object row=rows.next();
      if (!index.canAppendRow()) {
        File tmp=tempFolder.newFolder();
        toMerge.add(tmp);
        indexMerger.persist(index,tmp,new IndexSpec());
        index.close();
        index=new OnheapIncrementalIndex(minTimestamp,gran,metrics,deserializeComplexMetrics,maxRowCount);
      }
      if (row instanceof String && parser instanceof StringInputRowParser) {
        index.add(((StringInputRowParser)parser).parse((String)row));
      }
 else {
        index.add(parser.parse(row));
      }
    }
    if (toMerge.size() > 0) {
      File tmp=tempFolder.newFolder();
      toMerge.add(tmp);
      indexMerger.persist(index,tmp,new IndexSpec());
      List<QueryableIndex> indexes=new ArrayList<>(toMerge.size());
      for (      File file : toMerge) {
        indexes.add(indexIO.loadIndex(file));
      }
      indexMerger.mergeQueryableIndex(indexes,metrics,outDir,new IndexSpec());
      for (      QueryableIndex qi : indexes) {
        qi.close();
      }
    }
 else {
      indexMerger.persist(index,outDir,new IndexSpec());
    }
  }
  finally {
    if (index != null) {
      index.close();
    }
  }
}

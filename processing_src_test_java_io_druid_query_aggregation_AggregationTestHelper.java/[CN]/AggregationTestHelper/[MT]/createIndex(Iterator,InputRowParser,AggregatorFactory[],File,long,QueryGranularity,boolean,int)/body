{
  IncrementalIndex index=null;
  List<File> toMerge=new ArrayList<>();
  try {
    index=new OnheapIncrementalIndex(minTimestamp,gran,metrics,deserializeComplexMetrics,maxRowCount);
    while (rows.hasNext()) {
      Object row=rows.next();
      try {
        if (row instanceof String && parser instanceof StringInputRowParser) {
          index.add(((StringInputRowParser)parser).parse((String)row));
        }
 else {
          index.add(parser.parse(row));
        }
      }
 catch (      IndexSizeExceededException ex) {
        File tmp=Files.createTempDir();
        toMerge.add(tmp);
        IndexMerger.persist(index,tmp,null,new IndexSpec());
        index.close();
        index=new OnheapIncrementalIndex(minTimestamp,gran,metrics,deserializeComplexMetrics,maxRowCount);
      }
    }
    if (toMerge.size() > 0) {
      File tmp=Files.createTempDir();
      toMerge.add(tmp);
      IndexMerger.persist(index,tmp,null,new IndexSpec());
      List<QueryableIndex> indexes=new ArrayList<>(toMerge.size());
      for (      File file : toMerge) {
        indexes.add(IndexIO.loadIndex(file));
      }
      IndexMerger.mergeQueryableIndex(indexes,metrics,outDir,new IndexSpec());
      for (      QueryableIndex qi : indexes) {
        qi.close();
      }
    }
 else {
      IndexMerger.persist(index,outDir,null,new IndexSpec());
    }
  }
  finally {
    if (index != null) {
      index.close();
    }
    for (    File file : toMerge) {
      FileUtils.deleteDirectory(file);
    }
  }
}

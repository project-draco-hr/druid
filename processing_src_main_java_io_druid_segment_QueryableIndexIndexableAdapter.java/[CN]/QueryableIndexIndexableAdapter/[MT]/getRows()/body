{
  return new Iterable<Rowboat>(){
    @Override public Iterator<Rowboat> iterator(){
      return new Iterator<Rowboat>(){
        final GenericColumn timestamps=input.getColumn(Column.TIME_COLUMN_NAME).getGenericColumn();
        final Object[] metrics;
        final Closeable[] columns;
        final int numMetrics=getMetricNames().size();
        final DimensionHandler[] handlers=new DimensionHandler[availableDimensions.size()];
        Collection<DimensionHandler> handlerSet=input.getDimensionHandlers().values();
        int currRow=0;
        boolean done=false;
{
          handlerSet.toArray(handlers);
          this.columns=FluentIterable.from(handlerSet).transform(new Function<DimensionHandler,Closeable>(){
            @Override public Closeable apply(            DimensionHandler handler){
              Column column=input.getColumn(handler.getDimensionName());
              return handler.getSubColumn(column);
            }
          }
).toArray(Closeable.class);
          final Indexed<String> availableMetrics=getMetricNames();
          metrics=new Object[availableMetrics.size()];
          for (int i=0; i < metrics.length; ++i) {
            final Column column=input.getColumn(availableMetrics.get(i));
            final ValueType type=column.getCapabilities().getType();
switch (type) {
case FLOAT:
case LONG:
              metrics[i]=column.getGenericColumn();
            break;
case COMPLEX:
          metrics[i]=column.getComplexColumn();
        break;
default :
      throw new ISE("Cannot handle type[%s]",type);
  }
}
}
@Override public boolean hasNext(){
final boolean hasNext=currRow < numRows;
if (!hasNext && !done) {
  CloseQuietly.close(timestamps);
  for (  Object metric : metrics) {
    if (metric instanceof Closeable) {
      CloseQuietly.close((Closeable)metric);
    }
  }
  for (  Closeable dimension : columns) {
    CloseQuietly.close(dimension);
  }
  done=true;
}
return hasNext;
}
@Override public Rowboat next(){
if (!hasNext()) {
  throw new NoSuchElementException();
}
final Object[] dims=new Object[columns.length];
int dimIndex=0;
for (final Closeable column : columns) {
  dims[dimIndex]=handlers[dimIndex].getRowValueArrayFromColumn(column,currRow);
  dimIndex++;
}
Object[] metricArray=new Object[numMetrics];
for (int i=0; i < metricArray.length; ++i) {
  if (metrics[i] instanceof IndexedFloatsGenericColumn) {
    metricArray[i]=((GenericColumn)metrics[i]).getFloatSingleValueRow(currRow);
  }
 else   if (metrics[i] instanceof IndexedLongsGenericColumn) {
    metricArray[i]=((GenericColumn)metrics[i]).getLongSingleValueRow(currRow);
  }
 else   if (metrics[i] instanceof ComplexColumn) {
    metricArray[i]=((ComplexColumn)metrics[i]).getRowValue(currRow);
  }
}
final Rowboat retVal=new Rowboat(timestamps.getLongSingleValueRow(currRow),dims,metricArray,currRow,handlers);
++currRow;
return retVal;
}
@Override public void remove(){
throw new UnsupportedOperationException();
}
}
;
}
}
;
}

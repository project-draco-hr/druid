{
  props.setProperty("animal.type","pets");
  final Set<Animal> set1=ImmutableSet.<Animal>of(new Dog(),new Tiger());
  final Set<Animal> set2=ImmutableSet.<Animal>of(new Cat(),new Fish());
  final Set<Animal> set3=ImmutableSet.<Animal>of(new Cat());
  final Set<Animal> union=new HashSet<>();
  union.addAll(set1);
  union.addAll(set2);
  final Zoo<Animal> zoo1=new Zoo<>(set1);
  final Zoo<Animal> zoo2=new Zoo<>();
  Injector injector=Guice.createInjector(new Module(){
    @Override public void configure(    Binder binder){
      ConditionalMultibind.create(props,binder,new TypeLiteral<Set<Animal>>(){
      }
).addConditionBinding(ANIMAL_TYPE,Predicates.equalTo("pets"),set1).addConditionBinding(ANIMAL_TYPE,Predicates.equalTo("pets"),set2);
      ConditionalMultibind.create(props,binder,new TypeLiteral<Zoo<Animal>>(){
      }
).addConditionBinding(ANIMAL_TYPE,Predicates.equalTo("pets"),zoo1);
    }
  }
,new Module(){
    @Override public void configure(    Binder binder){
      ConditionalMultibind.create(props,binder,new TypeLiteral<Set<Animal>>(){
      }
).addConditionBinding(ANIMAL_TYPE,Predicates.equalTo("pets"),set3);
      ConditionalMultibind.create(props,binder,new TypeLiteral<Set<Animal>>(){
      }
,SanDiego.class).addConditionBinding(ANIMAL_TYPE,Predicates.equalTo("pets"),union);
      ConditionalMultibind.create(props,binder,new TypeLiteral<Zoo<Animal>>(){
      }
).addBinding(new TypeLiteral<Zoo<Animal>>(){
      }
);
    }
  }
);
  Set<Set<Animal>> actualAnimalSet=injector.getInstance(Key.get(new TypeLiteral<Set<Set<Animal>>>(){
  }
));
  Assert.assertEquals(3,actualAnimalSet.size());
  Assert.assertEquals(ImmutableSet.of(set1,set2,set3),actualAnimalSet);
  actualAnimalSet=injector.getInstance(Key.get(new TypeLiteral<Set<Set<Animal>>>(){
  }
,SanDiego.class));
  Assert.assertEquals(1,actualAnimalSet.size());
  Assert.assertEquals(ImmutableSet.of(union),actualAnimalSet);
  final Set<Zoo<Animal>> actualZooSet=injector.getInstance(Key.get(new TypeLiteral<Set<Zoo<Animal>>>(){
  }
));
  Assert.assertEquals(2,actualZooSet.size());
  Assert.assertEquals(ImmutableSet.of(zoo1,zoo2),actualZooSet);
}

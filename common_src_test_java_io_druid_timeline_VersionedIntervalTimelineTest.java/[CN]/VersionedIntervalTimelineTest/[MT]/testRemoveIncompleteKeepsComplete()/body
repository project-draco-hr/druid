{
  timeline=makeStringIntegerTimeline();
  add("2011-04-01/2011-04-02","1",IntegerPartitionChunk.make(null,1,0,77));
  add("2011-04-01/2011-04-02","1",IntegerPartitionChunk.make(1,null,1,88));
  add("2011-04-01/2011-04-02","2",IntegerPartitionChunk.make(null,1,0,99));
  assertValues(ImmutableList.of(createExpected("2011-04-01/2011-04-02","1",Arrays.<PartitionChunk<Integer>>asList(IntegerPartitionChunk.make(null,1,0,77),IntegerPartitionChunk.make(1,null,1,88)))),timeline.lookup(new Interval("2011-04-01/2011-04-02")));
  add("2011-04-01/2011-04-02","3",IntegerPartitionChunk.make(null,1,0,110));
  assertValues(ImmutableList.of(createExpected("2011-04-01/2011-04-02","1",Arrays.<PartitionChunk<Integer>>asList(IntegerPartitionChunk.make(null,1,0,77),IntegerPartitionChunk.make(1,null,1,88)))),timeline.lookup(new Interval("2011-04-01/2011-04-02")));
  assertValues(Sets.newHashSet(createExpected("2011-04-01/2011-04-02","2",Arrays.<PartitionChunk<Integer>>asList(IntegerPartitionChunk.make(null,1,0,99)))),timeline.findOvershadowed());
  testRemove();
  assertValues(ImmutableList.of(createExpected("2011-04-01/2011-04-02","1",Arrays.<PartitionChunk<Integer>>asList(IntegerPartitionChunk.make(null,1,0,77),IntegerPartitionChunk.make(1,null,1,88)))),timeline.lookup(new Interval("2011-04-01/2011-04-02")));
}

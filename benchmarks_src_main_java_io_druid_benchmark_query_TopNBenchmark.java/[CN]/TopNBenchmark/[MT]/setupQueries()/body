{
  Map<String,TopNQueryBuilder> basicQueries=new LinkedHashMap<>();
  BenchmarkSchemaInfo basicSchema=BenchmarkSchemas.SCHEMA_MAP.get("basic");
{
    QuerySegmentSpec intervalSpec=new MultipleIntervalSegmentSpec(Arrays.asList(basicSchema.getDataInterval()));
    List<AggregatorFactory> queryAggs=new ArrayList<>();
    queryAggs.add(new LongSumAggregatorFactory("sumLongSequential","sumLongSequential"));
    queryAggs.add(new LongMaxAggregatorFactory("maxLongUniform","maxLongUniform"));
    queryAggs.add(new DoubleSumAggregatorFactory("sumFloatNormal","sumFloatNormal"));
    queryAggs.add(new DoubleMinAggregatorFactory("minFloatZipf","minFloatZipf"));
    queryAggs.add(new HyperUniquesAggregatorFactory("hyperUniquesMet","hyper"));
    TopNQueryBuilder queryBuilderA=new TopNQueryBuilder().dataSource("blah").granularity(QueryGranularities.ALL).dimension("dimSequential").metric("sumFloatNormal").intervals(intervalSpec).aggregators(queryAggs);
    basicQueries.put("A",queryBuilderA);
  }
{
    QuerySegmentSpec intervalSpec=new MultipleIntervalSegmentSpec(Arrays.asList(basicSchema.getDataInterval()));
    List<AggregatorFactory> queryAggs=new ArrayList<>();
    queryAggs.add(new LongSumAggregatorFactory("sumLongSequential","sumLongSequential"));
    TopNQueryBuilder queryBuilderA=new TopNQueryBuilder().dataSource("blah").granularity(QueryGranularities.ALL).dimension("dimUniform").metric(new DimensionTopNMetricSpec(null,StringComparators.NUMERIC)).intervals(intervalSpec).aggregators(queryAggs);
    basicQueries.put("numericSort",queryBuilderA);
  }
{
    QuerySegmentSpec intervalSpec=new MultipleIntervalSegmentSpec(Arrays.asList(basicSchema.getDataInterval()));
    List<AggregatorFactory> queryAggs=new ArrayList<>();
    queryAggs.add(new LongSumAggregatorFactory("sumLongSequential","sumLongSequential"));
    TopNQueryBuilder queryBuilderA=new TopNQueryBuilder().dataSource("blah").granularity(QueryGranularities.ALL).dimension("dimUniform").metric(new DimensionTopNMetricSpec(null,StringComparators.ALPHANUMERIC)).intervals(intervalSpec).aggregators(queryAggs);
    basicQueries.put("alphanumericSort",queryBuilderA);
  }
  SCHEMA_QUERY_MAP.put("basic",basicQueries);
}

{
  final Integer priorIdex=getFacts().get(key);
  Aggregator[] aggs;
  if (null != priorIdex) {
    aggs=indexedMap.get(priorIdex);
  }
 else {
    aggs=new Aggregator[metrics.length];
    for (int i=0; i < metrics.length; i++) {
      final AggregatorFactory agg=metrics[i];
      aggs[i]=agg.factorize(makeColumnSelectorFactory(agg,rowSupplier,deserializeComplexMetrics));
    }
    Integer rowIndex;
    do {
      rowIndex=indexIncrement.incrementAndGet();
    }
 while (null != indexedMap.putIfAbsent(rowIndex,aggs));
    if (numEntries.get() >= maxRowCount && !getFacts().containsKey(key)) {
      throw new IndexSizeExceededException("Maximum number of rows reached");
    }
    final Integer prev=getFacts().putIfAbsent(key,rowIndex);
    if (null == prev) {
      numEntries.incrementAndGet();
    }
 else {
      aggs=indexedMap.get(prev);
      indexedMap.remove(rowIndex);
    }
  }
  rowContainer.set(row);
  for (  Aggregator agg : aggs) {
synchronized (agg) {
      try {
        agg.aggregate();
      }
 catch (      ParseException e) {
        if (reportParseExceptions) {
          throw e;
        }
      }
    }
  }
  rowContainer.set(null);
  return numEntries.get();
}

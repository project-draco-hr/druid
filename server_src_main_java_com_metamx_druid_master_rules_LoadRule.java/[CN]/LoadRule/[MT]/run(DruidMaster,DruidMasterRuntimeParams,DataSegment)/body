{
  MasterStats stats=new MasterStats();
  int expectedReplicants=getReplicants();
  int totalReplicants=params.getSegmentReplicantLookup().getTotalReplicants(segment.getIdentifier(),getTier());
  int clusterReplicants=params.getSegmentReplicantLookup().getClusterReplicants(segment.getIdentifier(),getTier());
  MinMaxPriorityQueue<ServerHolder> serverQueue=params.getDruidCluster().getServersByTier(getTier());
  if (serverQueue == null) {
    log.makeAlert("Tier[%s] has no servers! Check your cluster configuration!",getTier()).emit();
    return stats;
  }
  final List<ServerHolder> serverHolderList=new ArrayList<ServerHolder>(serverQueue);
  final DateTime referenceTimestamp=params.getBalancerReferenceTimestamp();
  final BalancerCostAnalyzer analyzer=params.getBalancerCostAnalyzer(referenceTimestamp);
  MinMaxPriorityQueue<Pair<Double,ServerHolder>> serverCostQueue=analyzer.findNewSegmentHome(segment,serverHolderList);
  stats.accumulate(assign(params.getReplicationManager(),expectedReplicants,totalReplicants,serverCostQueue,segment));
  stats.accumulate(drop(expectedReplicants,clusterReplicants,segment,params));
  return stats;
}

{
  final ObjectColumnSelector selector;
  if (column.getDictionaryEncoding() != null) {
    final DimensionSelector dimensionSelector=columnSelectorFactory.makeDimensionSelector(new DefaultDimensionSpec(columnName,columnName));
    if (column.getDictionaryEncoding().hasMultipleValues()) {
      return new ObjectColumnSelector<List>(){
        @Override public Class<List> classOfObject(){
          return List.class;
        }
        @Override public List<String> get(){
          final IndexedInts row=dimensionSelector.getRow();
          if (row.size() == 0) {
            return null;
          }
 else {
            final List<String> retVal=Lists.newArrayList();
            for (int i=0; i < row.size(); i++) {
              retVal.add(dimensionSelector.lookupName(row.get(i)));
            }
            return retVal;
          }
        }
      }
;
    }
 else {
      return new ObjectColumnSelector<String>(){
        @Override public Class<String> classOfObject(){
          return String.class;
        }
        @Override public String get(){
          final IndexedInts row=dimensionSelector.getRow();
          return row.size() == 0 ? null : dimensionSelector.lookupName(row.get(0));
        }
      }
;
    }
  }
 else {
    final ObjectColumnSelector maybeSelector=columnSelectorFactory.makeObjectColumnSelector(columnName);
    if (maybeSelector != null) {
      selector=maybeSelector;
    }
 else {
      log.warn("Could not create selector for column[%s], returning null.",columnName);
      selector=new ObjectColumnSelector(){
        @Override public Class classOfObject(){
          return Object.class;
        }
        @Override public Object get(){
          return null;
        }
      }
;
    }
  }
  return selector;
}

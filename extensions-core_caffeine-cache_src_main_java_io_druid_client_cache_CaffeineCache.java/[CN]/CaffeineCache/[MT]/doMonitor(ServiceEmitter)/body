{
  final CacheStats oldStats=priorStats.get();
  final CacheStats newStats=cache.stats();
  final CacheStats deltaStats=newStats.minus(oldStats);
  final ServiceMetricEvent.Builder builder=ServiceMetricEvent.builder();
  emitter.emit(builder.build("query/cache/caffeine/delta/requests",deltaStats.requestCount()));
  emitter.emit(builder.build("query/cache/caffeine/total/requests",newStats.requestCount()));
  emitter.emit(builder.build("query/cache/caffeine/delta/loadTime",deltaStats.totalLoadTime()));
  emitter.emit(builder.build("query/cache/caffeine/total/loadTime",newStats.totalLoadTime()));
  emitter.emit(builder.build("query/cache/caffeine/delta/evictionBytes",deltaStats.evictionWeight()));
  emitter.emit(builder.build("query/cache/caffeine/total/evictionBytes",newStats.evictionWeight()));
  if (!priorStats.compareAndSet(oldStats,newStats)) {
    log.warn(new IllegalStateException("Multiple monitors"),"Multiple monitors on the same cache causing race conditions and unreliable stats reporting");
  }
}

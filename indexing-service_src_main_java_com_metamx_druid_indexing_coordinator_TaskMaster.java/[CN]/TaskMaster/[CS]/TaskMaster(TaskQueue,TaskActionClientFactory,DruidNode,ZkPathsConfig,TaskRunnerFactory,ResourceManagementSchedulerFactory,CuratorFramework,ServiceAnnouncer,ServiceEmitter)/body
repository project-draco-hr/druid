{
  this.taskQueue=taskQueue;
  this.taskActionClientFactory=taskActionClientFactory;
  this.leaderSelector=new LeaderSelector(curator,zkPaths.getIndexerLeaderLatchPath(),new LeaderSelectorListener(){
    @Override public void takeLeadership(    CuratorFramework client) throws Exception {
      giant.lock();
      try {
        log.info("By the power of Grayskull, I have the power!");
        taskRunner=runnerFactory.build();
        final TaskConsumer taskConsumer=new TaskConsumer(taskQueue,taskRunner,taskActionClientFactory,emitter);
        taskQueue.bootstrap();
        final Lifecycle leaderLifecycle=new Lifecycle();
        if (leaderLifecycleRef.getAndSet(leaderLifecycle) != null) {
          log.makeAlert("TaskMaster set a new Lifecycle without the old one being cleared!  Race condition").emit();
        }
        leaderLifecycle.addManagedInstance(taskRunner);
        leaderLifecycle.addHandler(new Lifecycle.Handler(){
          @Override public void start() throws Exception {
            taskRunner.bootstrap(taskQueue.snapshot());
          }
          @Override public void stop(){
          }
        }
);
        leaderLifecycle.addManagedInstance(taskQueue);
        leaderLifecycle.addHandler(new Lifecycle.Handler(){
          @Override public void start() throws Exception {
            serviceAnnouncer.announce(node);
          }
          @Override public void stop(){
            serviceAnnouncer.unannounce(node);
          }
        }
);
        leaderLifecycle.addManagedInstance(taskConsumer);
        if (taskRunner instanceof RemoteTaskRunner) {
          resourceManagementScheduler=managementSchedulerFactory.build((RemoteTaskRunner)taskRunner);
          leaderLifecycle.addManagedInstance(resourceManagementScheduler);
        }
        try {
          leaderLifecycle.start();
          leading=true;
          while (leading && !Thread.currentThread().isInterrupted()) {
            mayBeStopped.await();
          }
        }
 catch (        InterruptedException e) {
        }
 finally {
          log.info("Bowing out!");
          stopLeading();
        }
      }
 catch (      Exception e) {
        log.makeAlert(e,"Failed to lead").emit();
        throw Throwables.propagate(e);
      }
 finally {
        giant.unlock();
      }
    }
    @Override public void stateChanged(    CuratorFramework client,    ConnectionState newState){
      if (newState == ConnectionState.LOST || newState == ConnectionState.SUSPENDED) {
        stopLeading();
      }
    }
  }
);
  leaderSelector.setId(node.getHost());
  leaderSelector.autoRequeue();
}

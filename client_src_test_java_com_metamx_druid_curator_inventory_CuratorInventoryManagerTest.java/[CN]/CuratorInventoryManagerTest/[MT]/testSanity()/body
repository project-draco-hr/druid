{
  final MapStrategy strategy=new MapStrategy();
  CuratorInventoryManager<Map<String,Integer>,Integer> manager=new CuratorInventoryManager<Map<String,Integer>,Integer>(curator,new StringInventoryManagerConfig("/container","/inventory"),exec,strategy);
  curator.start();
  manager.start();
  curator.create().creatingParentsIfNeeded().forPath("/container");
  curator.create().creatingParentsIfNeeded().forPath("/inventory/billy");
  Assert.assertTrue(Iterables.isEmpty(manager.getInventory()));
  CountDownLatch containerLatch=new CountDownLatch(1);
  strategy.setNewContainerLatch(containerLatch);
  curator.create().withMode(CreateMode.EPHEMERAL).forPath("/container/billy",new byte[]{});
  Assert.assertTrue(timing.awaitLatch(containerLatch));
  strategy.setNewContainerLatch(null);
  final Iterable<Map<String,Integer>> inventory=manager.getInventory();
  Assert.assertTrue(Iterables.getOnlyElement(inventory).isEmpty());
  CountDownLatch inventoryLatch=new CountDownLatch(2);
  strategy.setNewInventoryLatch(inventoryLatch);
  curator.create().withMode(CreateMode.EPHEMERAL).forPath("/inventory/billy/1",Ints.toByteArray(100));
  curator.create().withMode(CreateMode.EPHEMERAL).forPath("/inventory/billy/bob",Ints.toByteArray(2287));
  Assert.assertTrue(timing.awaitLatch(inventoryLatch));
  strategy.setNewInventoryLatch(null);
  verifyInventory(manager);
  CountDownLatch deleteLatch=new CountDownLatch(1);
  strategy.setDeadInventoryLatch(deleteLatch);
  curator.delete().forPath("/inventory/billy/1");
  Assert.assertTrue(timing.awaitLatch(deleteLatch));
  strategy.setDeadInventoryLatch(null);
  Assert.assertEquals(1,manager.getInventoryValue("billy").size());
  Assert.assertEquals(2287,manager.getInventoryValue("billy").get("bob").intValue());
  inventoryLatch=new CountDownLatch(1);
  strategy.setNewInventoryLatch(inventoryLatch);
  curator.create().withMode(CreateMode.EPHEMERAL).forPath("/inventory/billy/1",Ints.toByteArray(100));
  Assert.assertTrue(timing.awaitLatch(inventoryLatch));
  strategy.setNewInventoryLatch(null);
  verifyInventory(manager);
  final CountDownLatch latch=new CountDownLatch(1);
  curator.getCuratorListenable().addListener(new CuratorListener(){
    @Override public void eventReceived(    CuratorFramework client,    CuratorEvent event) throws Exception {
      if (event.getType() == CuratorEventType.WATCHED && event.getWatchedEvent().getState() == Watcher.Event.KeeperState.Disconnected) {
        latch.countDown();
      }
    }
  }
);
  server.stop();
  Assert.assertTrue(timing.awaitLatch(latch));
  verifyInventory(manager);
  Thread.sleep(50);
  verifyInventory(manager);
}

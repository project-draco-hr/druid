{
  Random random=new Random();
  for (  float[] values : Arrays.asList(market_upfront,market_total_market)) {
    double sum=0;
    for (    float f : values) {
      sum+=f;
    }
    final double mean=sum / values.length;
    double temp=0;
    for (    float f : values) {
      temp+=Math.pow(f - mean,2);
    }
    final double variance_pop=temp / values.length;
    final double variance_sample=temp / (values.length - 1);
    VarianceAggregatorCollector holder=new VarianceAggregatorCollector();
    for (    float f : values) {
      holder.add(f);
    }
    Assert.assertEquals(holder.getVariance(true),variance_pop,0.001);
    Assert.assertEquals(holder.getVariance(false),variance_sample,0.001);
    for (    int mergeOn : new int[]{2,3,5,9}) {
      List<VarianceAggregatorCollector> holders1=Lists.newArrayListWithCapacity(mergeOn);
      List<Pair<VarianceBufferAggregator,ByteBuffer>> holders2=Lists.newArrayListWithCapacity(mergeOn);
      FloatHandOver valueHandOver=new FloatHandOver();
      for (int i=0; i < mergeOn; i++) {
        holders1.add(new VarianceAggregatorCollector());
        holders2.add(Pair.<VarianceBufferAggregator,ByteBuffer>of(new VarianceBufferAggregator.FloatVarianceAggregator("XX",valueHandOver),ByteBuffer.allocate(VarianceAggregatorCollector.getMaxIntermediateSize())));
      }
      for (      float f : values) {
        valueHandOver.v=f;
        int index=random.nextInt(mergeOn);
        holders1.get(index).add(f);
        holders2.get(index).lhs.aggregate(holders2.get(index).rhs,0);
      }
      VarianceAggregatorCollector holder1=holders1.get(0);
      for (int i=1; i < mergeOn; i++) {
        holder1=(VarianceAggregatorCollector)VarianceAggregatorCollector.combineValues(holder1,holders1.get(i));
      }
      ObjectHandOver collectHandOver=new ObjectHandOver();
      ByteBuffer buffer=ByteBuffer.allocate(VarianceAggregatorCollector.getMaxIntermediateSize());
      VarianceBufferAggregator.ObjectVarianceAggregator merger=new VarianceBufferAggregator.ObjectVarianceAggregator("xxx",collectHandOver);
      for (int i=0; i < mergeOn; i++) {
        collectHandOver.v=holders2.get(i).lhs.get(holders2.get(i).rhs,0);
        merger.aggregate(buffer,0);
      }
      VarianceAggregatorCollector holder2=(VarianceAggregatorCollector)merger.get(buffer,0);
      Assert.assertEquals(holder2.getVariance(true),variance_pop,0.01);
      Assert.assertEquals(holder2.getVariance(false),variance_sample,0.01);
    }
  }
}

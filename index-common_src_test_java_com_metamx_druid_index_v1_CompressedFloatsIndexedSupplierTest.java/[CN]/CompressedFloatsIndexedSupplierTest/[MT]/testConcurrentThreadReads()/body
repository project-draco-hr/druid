{
  setupSimple();
  final AtomicReference<String> reason=new AtomicReference<String>("none");
  final int numRuns=1000;
  final CountDownLatch startLatch=new CountDownLatch(1);
  final CountDownLatch stopLatch=new CountDownLatch(2);
  final AtomicBoolean failureHappened=new AtomicBoolean(false);
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        startLatch.await();
      }
 catch (      InterruptedException e) {
        failureHappened.set(true);
        reason.set("interrupt.");
        stopLatch.countDown();
        return;
      }
      try {
        for (int i=0; i < numRuns; ++i) {
          for (int j=0; j < indexed.size(); ++j) {
            final float val=vals[j];
            final float indexedVal=indexed.get(j);
            if (Floats.compare(val,indexedVal) != 0) {
              failureHappened.set(true);
              reason.set(String.format("Thread1[%d]: %f != %f",j,val,indexedVal));
              stopLatch.countDown();
              return;
            }
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        failureHappened.set(true);
        reason.set(e.getMessage());
      }
      stopLatch.countDown();
    }
  }
).start();
  final IndexedFloats indexed2=supplier.get();
  try {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          startLatch.await();
        }
 catch (        InterruptedException e) {
          stopLatch.countDown();
          return;
        }
        try {
          for (int i=0; i < numRuns; ++i) {
            for (int j=indexed2.size() - 1; j >= 0; --j) {
              final float val=vals[j];
              final float indexedVal=indexed2.get(j);
              if (Floats.compare(val,indexedVal) != 0) {
                failureHappened.set(true);
                reason.set(String.format("Thread2[%d]: %f != %f",j,val,indexedVal));
                stopLatch.countDown();
                return;
              }
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
          reason.set(e.getMessage());
          failureHappened.set(true);
        }
        stopLatch.countDown();
      }
    }
).start();
    startLatch.countDown();
    stopLatch.await();
  }
  finally {
    indexed2.close();
  }
  if (failureHappened.get()) {
    Assert.fail("Failure happened.  Reason: " + reason.get());
  }
}

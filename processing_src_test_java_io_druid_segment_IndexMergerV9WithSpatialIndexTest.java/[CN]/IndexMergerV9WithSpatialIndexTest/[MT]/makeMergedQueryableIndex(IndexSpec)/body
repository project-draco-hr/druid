{
  try {
    IncrementalIndex first=new OnheapIncrementalIndex(new IncrementalIndexSchema.Builder().withMinTimestamp(DATA_INTERVAL.getStartMillis()).withQueryGranularity(QueryGranularity.DAY).withMetrics(METRIC_AGGS).withDimensionsSpec(new DimensionsSpec(null,null,Arrays.asList(new SpatialDimensionSchema("dim.geo",Arrays.asList("lat","long")),new SpatialDimensionSchema("spatialIsRad",Arrays.asList("lat2","long2"))))).build(),false,1000);
    IncrementalIndex second=new OnheapIncrementalIndex(new IncrementalIndexSchema.Builder().withMinTimestamp(DATA_INTERVAL.getStartMillis()).withQueryGranularity(QueryGranularity.DAY).withMetrics(METRIC_AGGS).withDimensionsSpec(new DimensionsSpec(null,null,Arrays.asList(new SpatialDimensionSchema("dim.geo",Arrays.asList("lat","long")),new SpatialDimensionSchema("spatialIsRad",Arrays.asList("lat2","long2"))))).build(),false,1000);
    IncrementalIndex third=new OnheapIncrementalIndex(new IncrementalIndexSchema.Builder().withMinTimestamp(DATA_INTERVAL.getStartMillis()).withQueryGranularity(QueryGranularity.DAY).withMetrics(METRIC_AGGS).withDimensionsSpec(new DimensionsSpec(null,null,Arrays.asList(new SpatialDimensionSchema("dim.geo",Arrays.asList("lat","long")),new SpatialDimensionSchema("spatialIsRad",Arrays.asList("lat2","long2"))))).build(),false,NUM_POINTS);
    first.add(new MapBasedInputRow(new DateTime("2013-01-01").getMillis(),DIMS,ImmutableMap.<String,Object>of("timestamp",new DateTime("2013-01-01").toString(),"dim","foo","lat",0.0f,"long",0.0f,"val",17L)));
    first.add(new MapBasedInputRow(new DateTime("2013-01-02").getMillis(),DIMS,ImmutableMap.<String,Object>of("timestamp",new DateTime("2013-01-02").toString(),"dim","foo","lat",1.0f,"long",3.0f,"val",29L)));
    first.add(new MapBasedInputRow(new DateTime("2013-01-03").getMillis(),DIMS,ImmutableMap.<String,Object>of("timestamp",new DateTime("2013-01-03").toString(),"dim","foo","lat",4.0f,"long",2.0f,"val",13L)));
    first.add(new MapBasedInputRow(new DateTime("2013-01-05").getMillis(),DIMS,ImmutableMap.<String,Object>of("timestamp",new DateTime("2013-01-05").toString(),"dim","foo","lat","_mmx.unknown","long","_mmx.unknown","val",101L)));
    first.add(new MapBasedInputRow(new DateTime("2013-01-05").getMillis(),DIMS,ImmutableMap.<String,Object>of("timestamp",new DateTime("2013-01-05").toString(),"dim","foo","dim.geo","_mmx.unknown","val",501L)));
    second.add(new MapBasedInputRow(new DateTime("2013-01-04").getMillis(),DIMS,ImmutableMap.<String,Object>of("timestamp",new DateTime("2013-01-04").toString(),"dim","foo","lat",7.0f,"long",3.0f,"val",91L)));
    second.add(new MapBasedInputRow(new DateTime("2013-01-05").getMillis(),DIMS,ImmutableMap.<String,Object>of("timestamp",new DateTime("2013-01-05").toString(),"dim","foo","lat",8.0f,"long",6.0f,"val",47L)));
    second.add(new MapBasedInputRow(new DateTime("2013-01-05").getMillis(),DIMS,ImmutableMap.<String,Object>of("timestamp",new DateTime("2013-01-05").toString(),"lat2",0.0f,"long2",0.0f,"val",13L)));
    Random rand=new Random();
    for (int i=8; i < NUM_POINTS; i++) {
      third.add(new MapBasedInputRow(new DateTime("2013-01-01").getMillis(),DIMS,ImmutableMap.<String,Object>of("timestamp",new DateTime("2013-01-01").toString(),"dim","boo","lat",(float)(rand.nextFloat() * 10 + 10.0),"long",(float)(rand.nextFloat() * 10 + 10.0),"val",i)));
    }
    File tmpFile=File.createTempFile("yay","who");
    tmpFile.delete();
    File firstFile=new File(tmpFile,"first");
    File secondFile=new File(tmpFile,"second");
    File thirdFile=new File(tmpFile,"third");
    File mergedFile=new File(tmpFile,"merged");
    firstFile.mkdirs();
    firstFile.deleteOnExit();
    secondFile.mkdirs();
    secondFile.deleteOnExit();
    thirdFile.mkdirs();
    thirdFile.deleteOnExit();
    mergedFile.mkdirs();
    mergedFile.deleteOnExit();
    INDEX_MERGER_V9.persist(first,DATA_INTERVAL,firstFile,null,indexSpec);
    INDEX_MERGER_V9.persist(second,DATA_INTERVAL,secondFile,null,indexSpec);
    INDEX_MERGER_V9.persist(third,DATA_INTERVAL,thirdFile,null,indexSpec);
    QueryableIndex mergedRealtime=INDEX_IO.loadIndex(INDEX_MERGER_V9.mergeQueryableIndex(Arrays.asList(INDEX_IO.loadIndex(firstFile),INDEX_IO.loadIndex(secondFile),INDEX_IO.loadIndex(thirdFile)),METRIC_AGGS,mergedFile,indexSpec));
    return mergedRealtime;
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
}

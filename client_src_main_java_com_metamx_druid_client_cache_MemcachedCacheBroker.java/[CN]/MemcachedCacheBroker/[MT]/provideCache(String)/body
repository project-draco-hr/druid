{
  return new Cache(){
    @Override public byte[] get(    byte[] key){
      Future<Object> future=client.asyncGet(computeKey(identifier,key));
      try {
        byte[] bytes=(byte[])future.get(timeout,TimeUnit.MILLISECONDS);
        if (bytes != null) {
          hitCount.incrementAndGet();
        }
 else {
          missCount.incrementAndGet();
        }
        return bytes;
      }
 catch (      TimeoutException e) {
        timeoutCount.incrementAndGet();
        future.cancel(false);
        return null;
      }
catch (      InterruptedException e) {
        return null;
      }
catch (      ExecutionException e) {
        return null;
      }
    }
    @Override public void put(    byte[] key,    byte[] value){
      client.set(computeKey(identifier,key),expiration,value);
    }
    @Override public void close(){
    }
  }
;
}

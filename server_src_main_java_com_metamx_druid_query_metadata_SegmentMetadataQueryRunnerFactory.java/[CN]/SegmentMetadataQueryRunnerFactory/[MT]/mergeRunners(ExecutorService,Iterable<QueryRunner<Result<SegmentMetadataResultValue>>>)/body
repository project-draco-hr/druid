{
  return new ConcatQueryRunner<Result<SegmentMetadataResultValue>>(Sequences.map(Sequences.simple(queryRunners),new Function<QueryRunner<Result<SegmentMetadataResultValue>>,QueryRunner<Result<SegmentMetadataResultValue>>>(){
    @Override public QueryRunner<Result<SegmentMetadataResultValue>> apply(    final QueryRunner<Result<SegmentMetadataResultValue>> input){
      return new QueryRunner<Result<SegmentMetadataResultValue>>(){
        @Override public Sequence<Result<SegmentMetadataResultValue>> run(        final Query<Result<SegmentMetadataResultValue>> query){
          Future<Sequence<Result<SegmentMetadataResultValue>>> future=queryExecutor.submit(new Callable<Sequence<Result<SegmentMetadataResultValue>>>(){
            @Override public Sequence<Result<SegmentMetadataResultValue>> call() throws Exception {
              return new ExecutorExecutingSequence<Result<SegmentMetadataResultValue>>(input.run(query),queryExecutor);
            }
          }
);
          try {
            return future.get();
          }
 catch (          InterruptedException e) {
            throw Throwables.propagate(e);
          }
catch (          ExecutionException e) {
            throw Throwables.propagate(e);
          }
        }
      }
;
    }
  }
));
}

{
  CoordinatorStats stats=new CoordinatorStats();
  final Map<String,Integer> loadStatus=Maps.newHashMap();
  int totalReplicantsInCluster=params.getSegmentReplicantLookup().getTotalReplicants(segment.getIdentifier());
  for (  Map.Entry<String,Integer> entry : getTieredReplicants().entrySet()) {
    final String tier=entry.getKey();
    final int expectedReplicantsInTier=entry.getValue();
    final int totalReplicantsInTier=params.getSegmentReplicantLookup().getTotalReplicants(segment.getIdentifier(),tier);
    final int loadedReplicantsInTier=params.getSegmentReplicantLookup().getLoadedReplicants(segment.getIdentifier(),tier);
    final MinMaxPriorityQueue<ServerHolder> serverQueue=params.getDruidCluster().getServersByTier(tier);
    if (serverQueue == null) {
      log.makeAlert("Tier[%s] has no servers! Check your cluster configuration!",tier).emit();
      return stats;
    }
    final List<ServerHolder> serverHolderList=Lists.newArrayList(serverQueue);
    final DateTime referenceTimestamp=params.getBalancerReferenceTimestamp();
    final BalancerStrategy strategy=params.getBalancerStrategyFactory().createBalancerStrategy(referenceTimestamp);
    if (params.getAvailableSegments().contains(segment)) {
      CoordinatorStats assignStats=assign(params.getReplicationManager(),tier,totalReplicantsInCluster,expectedReplicantsInTier,totalReplicantsInTier,strategy,serverHolderList,segment);
      stats.accumulate(assignStats);
      totalReplicantsInCluster+=assignStats.getPerTierStats().get(assignedCount).get(tier).get();
    }
    loadStatus.put(tier,expectedReplicantsInTier - loadedReplicantsInTier);
  }
  stats.accumulate(drop(loadStatus,segment,params));
  return stats;
}

{
  Optional<Set<Interval>> intervals=getSegmentGranularIntervals();
  if (intervals.isPresent()) {
    return Optional.of((Iterable<Bucket>)FunctionalIterable.create(intervals.get()).transformCat(new Function<Interval,Iterable<Bucket>>(){
      @Override public Iterable<Bucket> apply(      Interval input){
        final DateTime bucketTime=input.getStart();
        final List<HadoopyShardSpec> specs=schema.getTuningConfig().getShardSpecs().get(bucketTime);
        if (specs == null) {
          return ImmutableList.of();
        }
        return FunctionalIterable.create(specs).transform(new Function<HadoopyShardSpec,Bucket>(){
          int i=0;
          @Override public Bucket apply(          HadoopyShardSpec input){
            return new Bucket(input.getShardNum(),bucketTime,i++);
          }
        }
);
      }
    }
));
  }
 else {
    return Optional.absent();
  }
}

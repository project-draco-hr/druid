{
  this.schema=spec;
  this.pathSpec=JSON_MAPPER.convertValue(spec.getIOConfig().getPathSpec(),PathSpec.class);
  for (  Map.Entry<DateTime,List<HadoopyShardSpec>> entry : spec.getTuningConfig().getShardSpecs().entrySet()) {
    if (entry.getValue() == null || entry.getValue().isEmpty()) {
      continue;
    }
    final ShardSpec actualSpec=entry.getValue().get(0).getActualSpec();
    shardSpecLookups.put(entry.getKey(),actualSpec.getLookup(Lists.transform(entry.getValue(),new Function<HadoopyShardSpec,ShardSpec>(){
      @Override public ShardSpec apply(      HadoopyShardSpec input){
        return input.getActualSpec();
      }
    }
)));
    Map<ShardSpec,HadoopyShardSpec> innerHadoopShardSpecLookup=Maps.newHashMap();
    for (    HadoopyShardSpec hadoopyShardSpec : entry.getValue()) {
      innerHadoopShardSpecLookup.put(hadoopyShardSpec.getActualSpec(),hadoopyShardSpec);
    }
    hadoopShardSpecLookup.put(entry.getKey(),innerHadoopShardSpecLookup);
  }
  this.rollupGran=spec.getDataSchema().getGranularitySpec().getQueryGranularity();
}

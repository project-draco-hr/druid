{
  this.dataSource=dataSource;
  this.timestampSpec=(timestampSpec == null) ? new TimestampSpec(timestampColumn,timestampFormat) : timestampSpec;
  this.dataSpec=dataSpec;
  this.pathSpec=pathSpec;
  this.workingPath=workingPath;
  this.segmentOutputPath=segmentOutputPath;
  this.version=version == null ? new DateTime().toString() : version;
  this.leaveIntermediate=leaveIntermediate;
  this.cleanupOnFailure=(cleanupOnFailure == null ? true : cleanupOnFailure);
  this.shardSpecs=(shardSpecs == null ? ImmutableMap.<DateTime,List<HadoopyShardSpec>>of() : shardSpecs);
  this.overwriteFiles=overwriteFiles;
  this.rollupSpec=rollupSpec;
  this.updaterJobSpec=updaterJobSpec;
  this.ignoreInvalidRows=ignoreInvalidRows;
  if (partitionsSpec != null) {
    Preconditions.checkArgument(partitionDimension == null && targetPartitionSize == null,"Cannot mix partitionsSpec with partitionDimension/targetPartitionSize");
    this.partitionsSpec=partitionsSpec;
  }
 else {
    this.partitionsSpec=new SingleDimensionPartitionsSpec(partitionDimension,targetPartitionSize,null,false);
  }
  if (granularitySpec != null) {
    Preconditions.checkArgument(segmentGranularity == null && intervals == null,"Cannot mix granularitySpec with segmentGranularity/intervals");
    this.granularitySpec=granularitySpec;
  }
 else {
    if (segmentGranularity != null && intervals != null) {
      this.granularitySpec=new UniformGranularitySpec(segmentGranularity,intervals);
    }
  }
}

{
  final Properties zkProps=new Properties();
  final Properties fileProps=new Properties(zkProps);
  Properties sp=System.getProperties();
  Properties tmp_props=new Properties(fileProps);
  tmp_props.putAll(sp);
  final InputStream stream=ClassLoader.getSystemResourceAsStream(propertiesFile);
  if (stream == null) {
    log.info("%s not found on classpath, relying only on system properties and zookeeper.",propertiesFile);
  }
 else {
    log.info("Loading properties from %s",propertiesFile);
    try {
      try {
        fileProps.load(stream);
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
    }
  finally {
      Closeables.closeQuietly(stream);
    }
  }
  for (  String prop : fileProps.stringPropertyNames()) {
    log.info("Loaded(runtime.properties) Property[%s] as [%s]",prop,fileProps.getProperty(prop));
  }
  final String zkHostsProperty="druid.zk.service.host";
  if (tmp_props.getProperty(zkHostsProperty) != null) {
    final ConfigurationObjectFactory factory=Config.createFactory(tmp_props);
    ZkPathsConfig config;
    try {
      config=factory.build(ZkPathsConfig.class);
    }
 catch (    IllegalArgumentException e) {
      log.warn(e,"Unable to build ZkPathsConfig.  Cannot load properties from ZK.");
      config=null;
    }
    if (config != null) {
      Lifecycle lifecycle=new Lifecycle();
      try {
        CuratorFramework curator=Initialization.makeCuratorFramework(factory.build(CuratorConfig.class),lifecycle);
        lifecycle.start();
        final Stat stat=curator.checkExists().forPath(config.getPropertiesPath());
        if (stat != null) {
          final byte[] data=curator.getData().forPath(config.getPropertiesPath());
          zkProps.load(new InputStreamReader(new ByteArrayInputStream(data),Charsets.UTF_8));
        }
        for (        String prop : zkProps.stringPropertyNames()) {
          log.info("Loaded(zk) Property[%s] as [%s]",prop,zkProps.getProperty(prop));
        }
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
 finally {
        lifecycle.stop();
      }
    }
  }
 else {
    log.warn("property[%s] not set, skipping ZK-specified properties.",zkHostsProperty);
  }
  binder.bind(Properties.class).toInstance(tmp_props);
}

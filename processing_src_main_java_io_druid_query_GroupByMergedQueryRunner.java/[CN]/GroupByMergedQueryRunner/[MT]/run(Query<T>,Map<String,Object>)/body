{
  final GroupByQuery query=(GroupByQuery)queryParam;
  final GroupByQueryConfig querySpecificConfig=configSupplier.get().withOverrides(query);
  final boolean isSingleThreaded=querySpecificConfig.isSingleThreaded();
  final Pair<IncrementalIndex,Accumulator<IncrementalIndex,T>> indexAccumulatorPair=GroupByQueryHelper.createIndexAccumulatorPair(query,querySpecificConfig,bufferPool);
  final Pair<Queue,Accumulator<Queue,T>> bySegmentAccumulatorPair=GroupByQueryHelper.createBySegmentAccumulatorPair();
  final boolean bySegment=BaseQuery.getContextBySegment(query,false);
  final int priority=BaseQuery.getContextPriority(query,0);
  ListenableFuture<List<Void>> futures=Futures.allAsList(Lists.newArrayList(Iterables.transform(queryables,new Function<QueryRunner<T>,ListenableFuture<Void>>(){
    @Override public ListenableFuture<Void> apply(    final QueryRunner<T> input){
      if (input == null) {
        throw new ISE("Null queryRunner! Looks to be some segment unmapping action happening");
      }
      ListenableFuture<Void> future=exec.submit(new AbstractPrioritizedCallable<Void>(priority){
        @Override public Void call() throws Exception {
          try {
            if (bySegment) {
              input.run(queryParam,responseContext).accumulate(bySegmentAccumulatorPair.lhs,bySegmentAccumulatorPair.rhs);
            }
 else {
              input.run(queryParam,responseContext).accumulate(indexAccumulatorPair.lhs,indexAccumulatorPair.rhs);
            }
            return null;
          }
 catch (          QueryInterruptedException e) {
            throw Throwables.propagate(e);
          }
catch (          Exception e) {
            log.error(e,"Exception with one of the sequences!");
            throw Throwables.propagate(e);
          }
        }
      }
);
      if (isSingleThreaded) {
        waitForFutureCompletion(query,future,indexAccumulatorPair.lhs);
      }
      return future;
    }
  }
)));
  if (!isSingleThreaded) {
    waitForFutureCompletion(query,futures,indexAccumulatorPair.lhs);
  }
  if (bySegment) {
    return Sequences.simple(bySegmentAccumulatorPair.lhs);
  }
  return new ResourceClosingSequence<T>(Sequences.simple(Iterables.transform(indexAccumulatorPair.lhs.iterableWithPostAggregations(null,query.isDescending()),new Function<Row,T>(){
    @Override public T apply(    Row input){
      return (T)input;
    }
  }
)),indexAccumulatorPair.lhs);
}

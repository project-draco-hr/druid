{
  Preconditions.checkNotNull(dataSource,"dataSource");
  Preconditions.checkNotNull(sequenceName,"sequenceName");
  Preconditions.checkNotNull(interval,"interval");
  Preconditions.checkNotNull(maxVersion,"maxVersion");
  final String previousSegmentIdNotNull=previousSegmentId == null ? "" : previousSegmentId;
  return connector.retryTransaction(new TransactionCallback<SegmentIdentifier>(){
    @Override public SegmentIdentifier inTransaction(    Handle handle,    TransactionStatus transactionStatus) throws Exception {
      final List<byte[]> existingBytes=handle.createQuery(String.format("SELECT payload FROM %s WHERE " + "dataSource = :dataSource AND " + "sequence_name = :sequence_name AND "+ "sequence_prev_id = :sequence_prev_id",dbTables.getPendingSegmentsTable())).bind("dataSource",dataSource).bind("sequence_name",sequenceName).bind("sequence_prev_id",previousSegmentIdNotNull).map(ByteArrayMapper.FIRST).list();
      if (!existingBytes.isEmpty()) {
        final SegmentIdentifier existingIdentifier=jsonMapper.readValue(Iterables.getOnlyElement(existingBytes),SegmentIdentifier.class);
        if (existingIdentifier.getInterval().getStartMillis() == interval.getStartMillis() && existingIdentifier.getInterval().getEndMillis() == interval.getEndMillis()) {
          log.info("Found existing pending segment [%s] for sequence[%s] (previous = [%s]) in DB",existingIdentifier.getIdentifierAsString(),sequenceName,previousSegmentIdNotNull);
          return existingIdentifier;
        }
 else {
          log.warn("Cannot use existing pending segment [%s] for sequence[%s] (previous = [%s]) in DB, " + "does not match requested interval[%s]",existingIdentifier.getIdentifierAsString(),sequenceName,previousSegmentIdNotNull,interval);
          return null;
        }
      }
      final SegmentIdentifier newIdentifier;
      final List<TimelineObjectHolder<String,DataSegment>> existingChunks=getTimelineForIntervalsWithHandle(handle,dataSource,ImmutableList.of(interval)).lookup(interval);
      if (existingChunks.size() > 1) {
        log.warn("Cannot allocate new segment for dataSource[%s], interval[%s], maxVersion[%s]: already have [%,d] chunks.",dataSource,interval,maxVersion,existingChunks.size());
        return null;
      }
 else {
        SegmentIdentifier max=null;
        if (!existingChunks.isEmpty()) {
          TimelineObjectHolder<String,DataSegment> existingHolder=Iterables.getOnlyElement(existingChunks);
          for (          PartitionChunk<DataSegment> existing : existingHolder.getObject()) {
            if (max == null || max.getShardSpec().getPartitionNum() < existing.getObject().getShardSpec().getPartitionNum()) {
              max=SegmentIdentifier.fromDataSegment(existing.getObject());
            }
          }
        }
        final List<SegmentIdentifier> pendings=getPendingSegmentsForIntervalWithHandle(handle,dataSource,interval);
        for (        SegmentIdentifier pending : pendings) {
          if (max == null || pending.getVersion().compareTo(max.getVersion()) > 0 || (pending.getVersion().equals(max.getVersion()) && pending.getShardSpec().getPartitionNum() > max.getShardSpec().getPartitionNum())) {
            max=pending;
          }
        }
        if (max == null) {
          newIdentifier=new SegmentIdentifier(dataSource,interval,maxVersion,new NumberedShardSpec(0,0));
        }
 else         if (!max.getInterval().equals(interval) || max.getVersion().compareTo(maxVersion) > 0) {
          log.warn("Cannot allocate new segment for dataSource[%s], interval[%s], maxVersion[%s]: conflicting segment[%s].",dataSource,interval,maxVersion,max.getIdentifierAsString());
          return null;
        }
 else         if (max.getShardSpec() instanceof LinearShardSpec) {
          newIdentifier=new SegmentIdentifier(dataSource,max.getInterval(),max.getVersion(),new LinearShardSpec(max.getShardSpec().getPartitionNum() + 1));
        }
 else         if (max.getShardSpec() instanceof NumberedShardSpec) {
          newIdentifier=new SegmentIdentifier(dataSource,max.getInterval(),max.getVersion(),new NumberedShardSpec(max.getShardSpec().getPartitionNum() + 1,((NumberedShardSpec)max.getShardSpec()).getPartitions()));
        }
 else {
          log.warn("Cannot allocate new segment for dataSource[%s], interval[%s], maxVersion[%s]: ShardSpec class[%s] used by [%s].",dataSource,interval,maxVersion,max.getShardSpec().getClass(),max.getIdentifierAsString());
          return null;
        }
      }
      handle.createStatement(String.format("INSERT INTO %s (id, dataSource, created_date, start, \"end\", sequence_name, sequence_prev_id, payload) " + "VALUES (:id, :dataSource, :created_date, :start, :end, :sequence_name, :sequence_prev_id, :payload)",dbTables.getPendingSegmentsTable())).bind("id",newIdentifier.getIdentifierAsString()).bind("dataSource",dataSource).bind("created_date",new DateTime().toString()).bind("start",interval.getStart().toString()).bind("end",interval.getEnd().toString()).bind("sequence_name",sequenceName).bind("sequence_prev_id",previousSegmentIdNotNull).bind("payload",jsonMapper.writeValueAsBytes(newIdentifier)).execute();
      log.info("Allocated pending segment [%s] for sequence[%s] (previous = [%s]) in DB",newIdentifier.getIdentifierAsString(),sequenceName,previousSegmentIdNotNull);
      return newIdentifier;
    }
  }
);
}

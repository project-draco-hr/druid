{
  List<DataSegment> matchingSegments=connector.inReadOnlyTransaction(new TransactionCallback<List<DataSegment>>(){
    @Override public List<DataSegment> inTransaction(    final Handle handle,    final TransactionStatus status) throws Exception {
      return handle.createQuery(String.format("SELECT payload FROM %s WHERE dataSource = :dataSource and start >= :start and \"end\" <= :end and used = false",dbTables.getSegmentsTable())).setFetchSize(connector.getStreamingFetchSize()).bind("dataSource",dataSource).bind("start",interval.getStart().toString()).bind("end",interval.getEnd().toString()).map(ByteArrayMapper.FIRST).fold(Lists.<DataSegment>newArrayList(),new Folder3<List<DataSegment>,byte[]>(){
        @Override public List<DataSegment> fold(        List<DataSegment> accumulator,        byte[] payload,        FoldController foldController,        StatementContext statementContext) throws SQLException {
          try {
            accumulator.add(jsonMapper.readValue(payload,DataSegment.class));
            return accumulator;
          }
 catch (          Exception e) {
            throw Throwables.propagate(e);
          }
        }
      }
);
    }
  }
);
  log.info("Found %,d segments for %s for interval %s.",matchingSegments.size(),dataSource,interval);
  return matchingSegments;
}

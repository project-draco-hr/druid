{
  if (props != null) {
    return props;
  }
  Properties sp=System.getProperties();
  Properties tmp_props=new Properties(fileProps);
  tmp_props.putAll(sp);
  final InputStream stream=ClassLoader.getSystemResourceAsStream("runtime.properties");
  if (stream == null) {
    log.info("runtime.properties not found as a resource in classpath, relying only on system properties, and zookeeper now.");
  }
 else {
    log.info("Loading properties from runtime.properties");
    try {
      try {
        fileProps.load(stream);
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
    }
  finally {
      Closeables.closeQuietly(stream);
    }
  }
  for (  String prop : fileProps.stringPropertyNames()) {
    log.info("Loaded(runtime.properties) Property[%s] as [%s]",prop,fileProps.getProperty(prop));
  }
  final String zk_hosts=tmp_props.getProperty("druid.zk.service.host");
  if (zk_hosts != null) {
    if (!zk_hosts.equals("none")) {
      final ZkClient zkPropLoadingClient;
      final ZkClientConfig clientConfig=new ZkClientConfig(){
        @Override public String getZkHosts(){
          return zk_hosts;
        }
      }
;
      zkPropLoadingClient=new ZkClient(new ZkConnection(clientConfig.getZkHosts()),clientConfig.getConnectionTimeout(),new PropertiesZkSerializer());
      zkPropLoadingClient.waitUntilConnected();
      String propertiesZNodePath=tmp_props.getProperty("druid.zk.paths.propertiesPath");
      if (propertiesZNodePath == null) {
        String zpathBase=tmp_props.getProperty("druid.zk.paths.base",DEFAULT_ZPATH);
        propertiesZNodePath=makePropPath(zpathBase);
      }
      if (zkPropLoadingClient.exists(propertiesZNodePath)) {
        Properties p=zkPropLoadingClient.readData(propertiesZNodePath,true);
        if (p != null) {
          zkProps.putAll(p);
        }
      }
      for (      String prop : zkProps.stringPropertyNames()) {
        log.info("Loaded(properties stored in zk) Property[%s] as [%s]",prop,zkProps.getProperty(prop));
      }
    }
  }
 else {
    log.warn("property druid.zk.service.host is not set, so no way to contact zookeeper for coordination.");
  }
  if (!validateResolveProps(tmp_props)) {
    log.error("Properties failed to validate, cannot continue");
    throw new RuntimeException("Properties failed to validate");
  }
  props=tmp_props;
  return props;
}

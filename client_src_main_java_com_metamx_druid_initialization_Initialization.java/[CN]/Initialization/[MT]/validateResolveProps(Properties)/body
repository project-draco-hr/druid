{
  boolean zpathValidateFailed;
  String propertyZpath=props.getProperty("druid.zk.paths.base");
  zpathValidateFailed=zpathBaseCheck(propertyZpath,"property druid.zk.paths.base");
  String zpathEffective=DEFAULT_ZPATH;
  if (propertyZpath != null) {
    zpathEffective=propertyZpath;
  }
  final String propertiesZpathOverride=props.getProperty("druid.zk.paths.propertiesPath");
  if (!zpathValidateFailed) {
    System.out.println("Effective zpath prefix=" + zpathEffective);
  }
  int zpathOverrideCount=0;
  StringBuilder sbErrors=new StringBuilder(100);
  for (int i=0; i < SUB_PATH_PROPS.length; i++) {
    String val=props.getProperty(SUB_PATH_PROPS[i]);
    if (val != null) {
      zpathOverrideCount++;
      if (!val.startsWith("/")) {
        sbErrors.append(SUB_PATH_PROPS[i]).append("=").append(val).append("\n");
        zpathValidateFailed=true;
      }
    }
  }
  if (propertiesZpathOverride != null) {
    zpathOverrideCount++;
    if (!propertiesZpathOverride.startsWith("/")) {
      sbErrors.append("druid.zk.paths.propertiesPath").append("=").append(propertiesZpathOverride).append("\n");
      zpathValidateFailed=true;
    }
  }
  if (zpathOverrideCount == 0) {
    if (propertyZpath == null) {
      props.setProperty("druid.zk.paths.base",zpathEffective);
    }
    for (int i=0; i < SUB_PATH_PROPS.length; i++) {
      props.setProperty(SUB_PATH_PROPS[i],zpathEffective + "/" + SUB_PATHS[i]);
    }
    props.setProperty("druid.zk.paths.propertiesPath",zpathEffective + "/properties");
  }
  if (zpathValidateFailed) {
    System.err.println("When overriding zk zpaths, with properties like druid.zk.paths.*Path " + "the znode path must start with '/' (slash) ; problem overrides:");
    System.err.print(sbErrors.toString());
  }
  return !zpathValidateFailed;
}

{
  final ProcessHolder processHolder;
synchronized (tasks) {
    final ForkingTaskRunnerWorkItem taskWorkItem=tasks.get(taskid);
    if (taskWorkItem != null && taskWorkItem.processHolder != null) {
      processHolder=taskWorkItem.processHolder;
    }
 else {
      return Optional.absent();
    }
  }
  return Optional.<InputSupplier<InputStream>>of(new InputSupplier<InputStream>(){
    @Override public InputStream getInput() throws IOException {
      final RandomAccessFile raf=new RandomAccessFile(processHolder.logFile,"r");
      final long rafLength=raf.length();
      if (offset > 0) {
        raf.seek(offset);
      }
 else       if (offset < 0 && offset < rafLength) {
        raf.seek(Math.max(0,rafLength + offset));
      }
      return Channels.newInputStream(raf.getChannel());
    }
  }
);
}

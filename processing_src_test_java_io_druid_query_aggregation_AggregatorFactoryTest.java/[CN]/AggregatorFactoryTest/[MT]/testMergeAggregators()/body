{
  Assert.assertNull(AggregatorFactory.mergeAggregators(null));
  Assert.assertNull(AggregatorFactory.mergeAggregators(ImmutableList.<AggregatorFactory[]>of()));
  List<AggregatorFactory[]> aggregatorsToBeMerged=new ArrayList<>();
  aggregatorsToBeMerged.add(null);
  Assert.assertNull(AggregatorFactory.mergeAggregators(aggregatorsToBeMerged));
  AggregatorFactory[] emptyAggFactory=new AggregatorFactory[0];
  aggregatorsToBeMerged.clear();
  aggregatorsToBeMerged.add(emptyAggFactory);
  Assert.assertArrayEquals(emptyAggFactory,AggregatorFactory.mergeAggregators(aggregatorsToBeMerged));
  aggregatorsToBeMerged.clear();
  aggregatorsToBeMerged.add(emptyAggFactory);
  aggregatorsToBeMerged.add(null);
  Assert.assertNull(AggregatorFactory.mergeAggregators(aggregatorsToBeMerged));
  aggregatorsToBeMerged.clear();
  AggregatorFactory[] af1=new AggregatorFactory[]{new LongMaxAggregatorFactory("name","fieldName1")};
  AggregatorFactory[] af2=new AggregatorFactory[]{new LongMaxAggregatorFactory("name","fieldName2")};
  Assert.assertArrayEquals(new AggregatorFactory[]{new LongMaxAggregatorFactory("name","name")},AggregatorFactory.mergeAggregators(ImmutableList.of(af1,af2)));
  aggregatorsToBeMerged.clear();
  af1=new AggregatorFactory[]{new LongMaxAggregatorFactory("name","fieldName1")};
  af2=new AggregatorFactory[]{new DoubleMaxAggregatorFactory("name","fieldName2")};
  Assert.assertNull(AggregatorFactory.mergeAggregators(ImmutableList.of(af1,af2)));
}

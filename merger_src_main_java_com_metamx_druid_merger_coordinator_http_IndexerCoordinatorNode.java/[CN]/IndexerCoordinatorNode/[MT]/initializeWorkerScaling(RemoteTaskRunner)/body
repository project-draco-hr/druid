{
  final ScheduledExecutorService scalingScheduledExec=Executors.newScheduledThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat("ScalingExec--%d").build());
  AutoScalingStrategy strategy;
  if (config.getStrategyImpl().equalsIgnoreCase("ec2")) {
    strategy=new EC2AutoScalingStrategy(jsonMapper,new AmazonEC2Client(new BasicAWSCredentials(PropUtils.getProperty(props,"com.metamx.aws.accessKey"),PropUtils.getProperty(props,"com.metamx.aws.secretKey"))),configFactory.build(EC2AutoScalingStrategyConfig.class),workerSetupManager);
  }
 else   if (config.getStrategyImpl().equalsIgnoreCase("noop")) {
    strategy=new NoopAutoScalingStrategy();
  }
 else {
    throw new ISE("Invalid strategy implementation: %s",config.getStrategyImpl());
  }
  ResourceManagmentScheduler resourceManagmentScheduler=new ResourceManagmentScheduler(taskQueue,taskRunner,new SimpleResourceManagementStrategy(strategy,configFactory.build(SimpleResourceManagmentConfig.class),workerSetupManager),configFactory.build(ResourceManagementSchedulerConfig.class),scalingScheduledExec);
  lifecycle.addManagedInstance(resourceManagmentScheduler);
}

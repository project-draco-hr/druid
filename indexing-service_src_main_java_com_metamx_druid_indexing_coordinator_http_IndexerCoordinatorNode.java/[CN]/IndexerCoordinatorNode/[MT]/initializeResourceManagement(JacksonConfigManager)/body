{
  if (resourceManagementSchedulerFactory == null) {
    resourceManagementSchedulerFactory=new ResourceManagementSchedulerFactory(){
      @Override public ResourceManagementScheduler build(      TaskRunner runner){
        final ScheduledExecutorService scalingScheduledExec=Executors.newScheduledThreadPool(1,new ThreadFactoryBuilder().setDaemon(true).setNameFormat("ScalingExec--%d").build());
        final AtomicReference<WorkerSetupData> workerSetupData=configManager.watch(WorkerSetupData.CONFIG_KEY,WorkerSetupData.class);
        AutoScalingStrategy strategy;
        if (config.getAutoScalingImpl().equalsIgnoreCase("ec2")) {
          strategy=new EC2AutoScalingStrategy(getJsonMapper(),new AmazonEC2Client(new BasicAWSCredentials(PropUtils.getProperty(getProps(),"com.metamx.aws.accessKey"),PropUtils.getProperty(getProps(),"com.metamx.aws.secretKey"))),getConfigFactory().build(EC2AutoScalingStrategyConfig.class),workerSetupData);
        }
 else         if (config.getAutoScalingImpl().equalsIgnoreCase("noop")) {
          strategy=new NoopAutoScalingStrategy();
        }
 else {
          throw new ISE("Invalid strategy implementation: %s",config.getAutoScalingImpl());
        }
        return new ResourceManagementScheduler(runner,new SimpleResourceManagementStrategy(strategy,getConfigFactory().build(SimpleResourceManagmentConfig.class),workerSetupData),getConfigFactory().build(ResourceManagementSchedulerConfig.class),scalingScheduledExec);
      }
    }
;
  }
}

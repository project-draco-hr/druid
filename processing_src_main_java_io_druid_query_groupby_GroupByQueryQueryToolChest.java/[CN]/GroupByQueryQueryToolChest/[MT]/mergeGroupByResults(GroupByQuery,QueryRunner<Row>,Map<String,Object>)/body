{
  final DataSource dataSource=query.getDataSource();
  if (dataSource instanceof QueryDataSource) {
    GroupByQuery subquery;
    try {
      subquery=(GroupByQuery)((QueryDataSource)dataSource).getQuery().withOverriddenContext(query.getContext());
    }
 catch (    ClassCastException e) {
      throw new UnsupportedOperationException("Subqueries must be of type 'group by'");
    }
    final Sequence<Row> subqueryResult=mergeGroupByResults(subquery,runner,context);
    final Set<AggregatorFactory> aggs=Sets.newHashSet();
    for (    AggregatorFactory aggregatorFactory : query.getAggregatorSpecs()) {
      for (      final AggregatorFactory transferAgg : aggregatorFactory.getRequiredColumns()) {
        if (Iterables.any(aggs,new Predicate<AggregatorFactory>(){
          @Override public boolean apply(          AggregatorFactory agg){
            return agg.getName().equals(transferAgg.getName()) && !agg.equals(transferAgg);
          }
        }
)) {
          throw new IAE("Inner aggregator can currently only be referenced by a single type of outer aggregator" + " for '%s'",transferAgg.getName());
        }
        aggs.add(transferAgg);
      }
    }
    final GroupByQuery innerQuery=new GroupByQuery.Builder(subquery).setAggregatorSpecs(Lists.newArrayList(aggs)).setInterval(subquery.getIntervals()).setPostAggregatorSpecs(Lists.<PostAggregator>newArrayList()).build();
    final GroupByQuery outerQuery=new GroupByQuery.Builder(query).setLimitSpec(query.getLimitSpec().merge(subquery.getLimitSpec())).build();
    final IncrementalIndex index=makeIncrementalIndex(innerQuery,subqueryResult);
    return new ResourceClosingSequence<>(outerQuery.applyLimit(Sequences.concat(Sequences.map(Sequences.simple(outerQuery.getIntervals()),new Function<Interval,Sequence<Row>>(){
      @Override public Sequence<Row> apply(      Interval interval){
        return engine.process(outerQuery.withQuerySegmentSpec(new MultipleIntervalSegmentSpec(ImmutableList.of(interval))),new IncrementalIndexStorageAdapter(index));
      }
    }
))),index);
  }
 else {
    final IncrementalIndex index=makeIncrementalIndex(query,runner.run(new GroupByQuery(query.getDataSource(),query.getQuerySegmentSpec(),query.getDimFilter(),query.getGranularity(),query.getDimensions(),query.getAggregatorSpecs(),ImmutableList.<PostAggregator>of(),null,null,query.getContext()).withOverriddenContext(ImmutableMap.<String,Object>of("finalize",false)),context));
    return new ResourceClosingSequence<>(query.applyLimit(postAggregate(query,index)),index);
  }
}

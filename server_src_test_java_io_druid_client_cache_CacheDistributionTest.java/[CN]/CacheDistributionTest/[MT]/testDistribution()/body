{
  KetamaNodeLocator locator=new KetamaNodeLocator(ImmutableList.of(dummyNode("druid-cache.0001",11211),dummyNode("druid-cache.0002",11211),dummyNode("druid-cache.0003",11211),dummyNode("druid-cache.0004",11211),dummyNode("druid-cache.0005",11211)),hash,new DefaultKetamaNodeLocatorConfiguration(){
    @Override public int getNodeRepetitions(){
      return reps;
    }
  }
);
  Map<MemcachedNode,AtomicLong> counter=Maps.newHashMap();
  long t=0;
  for (int i=0; i < KEY_COUNT; ++i) {
    final String k=DigestUtils.sha1Hex("abc" + i) + ":" + DigestUtils.sha1Hex("xyz" + i);
    long t0=System.nanoTime();
    MemcachedNode node=locator.getPrimary(k);
    t+=System.nanoTime() - t0;
    if (counter.containsKey(node)) {
      counter.get(node).incrementAndGet();
    }
 else {
      counter.put(node,new AtomicLong(1));
    }
  }
  long min=Long.MAX_VALUE;
  long max=0;
  System.out.printf("%25s\t%5d\t",hash,reps);
  for (  AtomicLong count : counter.values()) {
    System.out.printf("%10d\t",count.get());
    min=Math.min(min,count.get());
    max=Math.max(max,count.get());
  }
  System.out.printf("%7.2f\t%5.0f\n",(double)min / (double)max,(double)t / KEY_COUNT);
}

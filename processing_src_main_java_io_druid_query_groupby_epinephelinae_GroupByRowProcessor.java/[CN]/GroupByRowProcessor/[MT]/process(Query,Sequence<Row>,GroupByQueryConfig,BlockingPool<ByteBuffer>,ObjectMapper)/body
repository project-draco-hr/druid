{
  final GroupByQuery query=(GroupByQuery)queryParam;
  final GroupByQueryConfig querySpecificConfig=config.withOverrides(query);
  final AggregatorFactory[] aggregatorFactories=new AggregatorFactory[query.getAggregatorSpecs().size()];
  for (int i=0; i < query.getAggregatorSpecs().size(); i++) {
    aggregatorFactories[i]=query.getAggregatorSpecs().get(i);
  }
  final File temporaryStorageDirectory=new File(System.getProperty("java.io.tmpdir"),String.format("druid-groupBy-%s_%s",UUID.randomUUID(),query.getId()));
  final Number queryTimeout=query.getContextValue(QueryContextKeys.TIMEOUT,null);
  final long timeout=queryTimeout == null ? JodaUtils.MAX_INSTANT : queryTimeout.longValue();
  final List<Interval> queryIntervals=query.getIntervals();
  final Filter filter=Filters.convertToCNFFromQueryContext(query,Filters.toFilter(query.getDimFilter()));
  final RowBasedValueMatcherFactory filterMatcherFactory=new RowBasedValueMatcherFactory();
  final ValueMatcher filterMatcher=filter == null ? new BooleanValueMatcher(true) : filter.makeMatcher(filterMatcherFactory);
  final FilteredSequence<Row> filteredSequence=new FilteredSequence<>(rows,new Predicate<Row>(){
    @Override public boolean apply(    Row input){
      boolean inInterval=false;
      DateTime rowTime=input.getTimestamp();
      for (      Interval queryInterval : queryIntervals) {
        if (queryInterval.contains(rowTime)) {
          inInterval=true;
        }
      }
      if (!inInterval) {
        return false;
      }
      filterMatcherFactory.setRow(input);
      return filterMatcher.matches();
    }
  }
);
  return new BaseSequence<>(new BaseSequence.IteratorMaker<Row,CloseableGrouperIterator<RowBasedKey,Row>>(){
    @Override public CloseableGrouperIterator<RowBasedKey,Row> make(){
      final List<Closeable> closeOnFailure=Lists.newArrayList();
      try {
        final LimitedTemporaryStorage temporaryStorage=new LimitedTemporaryStorage(temporaryStorageDirectory,querySpecificConfig.getMaxOnDiskStorage());
        closeOnFailure.add(temporaryStorage);
        final ReferenceCountingResourceHolder<ByteBuffer> mergeBufferHolder;
        try {
          if (timeout <= 0 || (mergeBufferHolder=mergeBufferPool.take(timeout)) == null) {
            throw new QueryInterruptedException(new TimeoutException());
          }
          closeOnFailure.add(mergeBufferHolder);
        }
 catch (        InterruptedException e) {
          throw new QueryInterruptedException(e);
        }
        Pair<Grouper<RowBasedKey>,Accumulator<Grouper<RowBasedKey>,Row>> pair=RowBasedGrouperHelper.createGrouperAccumulatorPair(query,true,config,mergeBufferHolder.get(),-1,temporaryStorage,spillMapper,aggregatorFactories);
        final Grouper<RowBasedKey> grouper=pair.lhs;
        final Accumulator<Grouper<RowBasedKey>,Row> accumulator=pair.rhs;
        closeOnFailure.add(grouper);
        filteredSequence.accumulate(grouper,accumulator);
        return RowBasedGrouperHelper.makeGrouperIterator(grouper,query,new Closeable(){
          @Override public void close() throws IOException {
            grouper.close();
            mergeBufferHolder.close();
            CloseQuietly.close(temporaryStorage);
          }
        }
);
      }
 catch (      Throwable e) {
        for (        Closeable closeable : Lists.reverse(closeOnFailure)) {
          CloseQuietly.close(closeable);
        }
        throw e;
      }
    }
    @Override public void cleanup(    CloseableGrouperIterator<RowBasedKey,Row> iterFromMake){
      iterFromMake.close();
    }
  }
);
}

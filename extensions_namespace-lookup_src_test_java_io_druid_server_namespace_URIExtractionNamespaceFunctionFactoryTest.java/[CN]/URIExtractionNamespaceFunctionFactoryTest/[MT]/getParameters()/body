{
  final List<Object[]> compressionParams=ImmutableList.of(new Object[]{".dat",new Function<File,OutputStream>(){
    @Nullable @Override public OutputStream apply(    @Nullable File outFile){
      try {
        return new FileOutputStream(outFile);
      }
 catch (      IOException ex) {
        throw Throwables.propagate(ex);
      }
    }
  }
},new Object[]{".gz",new Function<File,OutputStream>(){
    @Nullable @Override public OutputStream apply(    @Nullable File outFile){
      try {
        final FileOutputStream fos=new FileOutputStream(outFile);
        return new GZIPOutputStream(fos){
          @Override public void close() throws IOException {
            try {
              super.close();
            }
  finally {
              fos.close();
            }
          }
        }
;
      }
 catch (      IOException ex) {
        throw Throwables.propagate(ex);
      }
    }
  }
});
  final List<Constructor<? extends NamespaceExtractionCacheManager>> cacheConstructors=ImmutableList.<Constructor<? extends NamespaceExtractionCacheManager>>of(OnHeapNamespaceExtractionCacheManager.class.getConstructor(Lifecycle.class,ConcurrentMap.class,ServiceEmitter.class,Map.class),OffHeapNamespaceExtractionCacheManager.class.getConstructor(Lifecycle.class,ConcurrentMap.class,ServiceEmitter.class,Map.class));
  return new Iterable<Object[]>(){
    @Override public Iterator<Object[]> iterator(){
      return new Iterator<Object[]>(){
        Iterator<Object[]> compressionIt=compressionParams.iterator();
        Iterator<Constructor<? extends NamespaceExtractionCacheManager>> cacheConstructorIt=cacheConstructors.iterator();
        Object[] compressions=compressionIt.next();
        @Override public boolean hasNext(){
          return compressionIt.hasNext() || cacheConstructorIt.hasNext();
        }
        @Override public Object[] next(){
          if (cacheConstructorIt.hasNext()) {
            Constructor<? extends NamespaceExtractionCacheManager> constructor=cacheConstructorIt.next();
            final NamespaceExtractionCacheManager manager;
            try {
              manager=constructor.newInstance(new Lifecycle(),new ConcurrentHashMap<String,Function<String,String>>(),new NoopServiceEmitter(),new HashMap<Class<? extends ExtractionNamespace>,ExtractionNamespaceFunctionFactory<?>>());
            }
 catch (            Exception e) {
              throw Throwables.propagate(e);
            }
            ConcurrentHashMap<String,Function<String,String>> fnCache=new ConcurrentHashMap<String,Function<String,String>>();
            try {
              return new Object[]{String.format("[%s]:[%s]",compressions[0],manager.getClass().getCanonicalName()),compressions[0],compressions[1],constructor};
            }
 catch (            Exception e) {
              throw Throwables.propagate(e);
            }
          }
 else {
            cacheConstructorIt=cacheConstructors.iterator();
            compressions=compressionIt.next();
            return next();
          }
        }
        @Override public void remove(){
          throw new UOE("Cannot remove");
        }
      }
;
    }
  }
;
}

{
  ObjectApi objectApi=EasyMock.createStrictMock(ObjectApi.class);
  EasyMock.expect(objectApi.put(EasyMock.anyString(),EasyMock.<Payload>anyObject())).andReturn(null).atLeastOnce();
  EasyMock.replay(objectApi);
  CloudFilesApi api=EasyMock.createStrictMock(CloudFilesApi.class);
  EasyMock.expect(api.getObjectApi(EasyMock.anyString(),EasyMock.anyString())).andReturn(objectApi).atLeastOnce();
  EasyMock.replay(api);
  CloudFilesDataSegmentPusherConfig config=new CloudFilesDataSegmentPusherConfig();
  config.setRegion("region");
  config.setContainer("container");
  config.setBasePath("basePath");
  CloudFilesDataSegmentPusher pusher=new CloudFilesDataSegmentPusher(api,config,new DefaultObjectMapper());
  File tmp=tempFolder.newFile("version.bin");
  final byte[] data=new byte[]{0x0,0x0,0x0,0x1};
  Files.write(data,tmp);
  final long size=data.length;
  DataSegment segmentToPush=new DataSegment("foo",new Interval("2015/2016"),"0",Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),NoneShardSpec.instance(),0,size);
  DataSegment segment=pusher.push(tempFolder.getRoot(),segmentToPush);
  Assert.assertEquals(segmentToPush.getSize(),segment.getSize());
  EasyMock.verify(api);
}

{
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1",null,null),ImmutableList.of("0"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","",null),ImmutableList.of("0"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","10",null),ImmutableList.of("1"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","2",null),ImmutableList.of("2"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","1",null),ImmutableList.of("3","9"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","def",null),ImmutableList.of("4"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","abc",null),ImmutableList.of("5","8"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","ab",null),ImmutableList.<String>of());
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","super-null",JS_EXTRACTION_FN),ImmutableList.of("0"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","super-null",JS_EXTRACTION_FN),ImmutableList.of("0"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","super-10",JS_EXTRACTION_FN),ImmutableList.of("1"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","super-2",JS_EXTRACTION_FN),ImmutableList.of("2"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","super-1",JS_EXTRACTION_FN),ImmutableList.of("3","9"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","super-def",JS_EXTRACTION_FN),ImmutableList.of("4"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","super-abc",JS_EXTRACTION_FN),ImmutableList.of("5","8"));
  assertFilterMatches(new NoBitmapSelectorDimFilter("dim1","super-ab",JS_EXTRACTION_FN),ImmutableList.<String>of());
}

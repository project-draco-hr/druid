{
  final ExtractionFn extractionFn=spec.getExtractionFn();
  final int dimIndex=desc.getIndex();
  final int maxId=getCardinality();
  return new DimensionSelector(){
    @Override public IndexedInts getRow(){
      final Object[] dims=currEntry.getKey().getDims();
      int[] indices;
      if (dimIndex < dims.length) {
        indices=(int[])dims[dimIndex];
      }
 else {
        indices=null;
      }
      int nullId=getEncodedValue(null,false);
      List<Integer> valsTmp=null;
      if ((indices == null || indices.length == 0) && nullId > -1) {
        if (nullId < maxId) {
          valsTmp=new ArrayList<>(1);
          valsTmp.add(nullId);
        }
      }
 else       if (indices != null && indices.length > 0) {
        valsTmp=new ArrayList<>(indices.length);
        for (int i=0; i < indices.length; i++) {
          int id=indices[i];
          if (id < maxId) {
            valsTmp.add(id);
          }
        }
      }
      final List<Integer> vals=valsTmp == null ? Collections.EMPTY_LIST : valsTmp;
      return new IndexedInts(){
        @Override public int size(){
          return vals.size();
        }
        @Override public int get(        int index){
          return vals.get(index);
        }
        @Override public Iterator<Integer> iterator(){
          return vals.iterator();
        }
        @Override public void fill(        int index,        int[] toFill){
          throw new UnsupportedOperationException("fill not supported");
        }
        @Override public void close() throws IOException {
        }
      }
;
    }
    @Override public int getValueCardinality(){
      return maxId;
    }
    @Override public String lookupName(    int id){
      final String strValue=getActualValue(id,false);
      return extractionFn == null ? strValue : extractionFn.apply(strValue);
    }
    @Override public int lookupId(    String name){
      if (extractionFn != null) {
        throw new UnsupportedOperationException("cannot perform lookup when applying an extraction function");
      }
      return getEncodedValue(name,false);
    }
  }
;
}

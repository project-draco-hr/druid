{
  return ImmutableList.<Object>of(new Module(){
    @Override public void configure(    Binder binder){
      binder.bindConstant().annotatedWith(Names.named("serviceName")).to("druid/coordinator");
      binder.bindConstant().annotatedWith(Names.named("servicePort")).to(8081);
      ConfigProvider.bind(binder,DruidCoordinatorConfig.class);
      JsonConfigProvider.bind(binder,"druid.manager.segments",DatabaseSegmentManagerConfig.class);
      JsonConfigProvider.bind(binder,"druid.manager.rules",DatabaseRuleManagerConfig.class);
      binder.bind(RedirectFilter.class).in(LazySingleton.class);
      binder.bind(RedirectInfo.class).to(CoordinatorRedirectInfo.class).in(LazySingleton.class);
      binder.bind(DatabaseSegmentManager.class).toProvider(DatabaseSegmentManagerProvider.class).in(ManageLifecycle.class);
      binder.bind(DatabaseRuleManager.class).toProvider(DatabaseRuleManagerProvider.class).in(ManageLifecycle.class);
      binder.bind(IndexingServiceClient.class).in(LazySingleton.class);
      binder.bind(DruidCoordinator.class);
      LifecycleModule.register(binder,DruidCoordinator.class);
      binder.bind(JettyServerInitializer.class).to(CoordinatorJettyServerInitializer.class);
      Jerseys.addResource(binder,BackwardsCompatibleInfoResource.class);
      Jerseys.addResource(binder,InfoResource.class);
      Jerseys.addResource(binder,BackwardsCompatibleCoordinatorResource.class);
      Jerseys.addResource(binder,CoordinatorResource.class);
      Jerseys.addResource(binder,CoordinatorDynamicConfigsResource.class);
      Jerseys.addResource(binder,TiersResource.class);
      Jerseys.addResource(binder,RulesResource.class);
      Jerseys.addResource(binder,ServersResource.class);
      Jerseys.addResource(binder,DatasourcesResource.class);
      Jerseys.addResource(binder,DBResource.class);
      LifecycleModule.register(binder,Server.class);
    }
    @Provides @LazySingleton public LoadQueueTaskMaster getLoadQueueTaskMaster(    CuratorFramework curator,    ObjectMapper jsonMapper,    ScheduledExecutorFactory factory,    DruidCoordinatorConfig config){
      return new LoadQueueTaskMaster(curator,jsonMapper,factory.create(1,"Master-PeonExec--%d"),Executors.newSingleThreadExecutor(),config);
    }
  }
);
}

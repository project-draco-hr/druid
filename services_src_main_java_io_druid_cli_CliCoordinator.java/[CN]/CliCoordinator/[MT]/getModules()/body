{
  return ImmutableList.<Module>of(new Module(){
    @Override public void configure(    Binder binder){
      binder.bindConstant().annotatedWith(Names.named("serviceName")).to(TieredBrokerConfig.DEFAULT_COORDINATOR_SERVICE_NAME);
      binder.bindConstant().annotatedWith(Names.named("servicePort")).to(8081);
      ConfigProvider.bind(binder,DruidCoordinatorConfig.class);
      binder.bind(MetadataStorage.class).toProvider(MetadataStorageProvider.class).in(ManageLifecycle.class);
      JsonConfigProvider.bind(binder,"druid.manager.segments",MetadataSegmentManagerConfig.class);
      JsonConfigProvider.bind(binder,"druid.manager.rules",MetadataRuleManagerConfig.class);
      JsonConfigProvider.bind(binder,"druid.manager.lookups",LookupCoordinatorManagerConfig.class);
      binder.bind(RedirectFilter.class).in(LazySingleton.class);
      binder.bind(RedirectInfo.class).to(CoordinatorRedirectInfo.class).in(LazySingleton.class);
      binder.bind(MetadataSegmentManager.class).toProvider(MetadataSegmentManagerProvider.class).in(ManageLifecycle.class);
      binder.bind(MetadataRuleManager.class).toProvider(MetadataRuleManagerProvider.class).in(ManageLifecycle.class);
      binder.bind(AuditManager.class).toProvider(AuditManagerProvider.class).in(ManageLifecycle.class);
      binder.bind(IndexingServiceClient.class).in(LazySingleton.class);
      binder.bind(CoordinatorServerView.class).in(LazySingleton.class);
      binder.bind(DruidCoordinator.class);
      binder.bind(LookupCoordinatorManager.class).in(ManageLifecycle.class);
      binder.bind(ListenerDiscoverer.class).in(ManageLifecycle.class);
      LifecycleModule.register(binder,ListenerDiscoverer.class);
      LifecycleModule.register(binder,MetadataStorage.class);
      LifecycleModule.register(binder,DruidCoordinator.class);
      LifecycleModule.register(binder,LookupCoordinatorManager.class);
      binder.bind(JettyServerInitializer.class).to(CoordinatorJettyServerInitializer.class);
      Jerseys.addResource(binder,CoordinatorResource.class);
      Jerseys.addResource(binder,CoordinatorDynamicConfigsResource.class);
      Jerseys.addResource(binder,TiersResource.class);
      Jerseys.addResource(binder,RulesResource.class);
      Jerseys.addResource(binder,ServersResource.class);
      Jerseys.addResource(binder,DatasourcesResource.class);
      Jerseys.addResource(binder,MetadataResource.class);
      Jerseys.addResource(binder,IntervalsResource.class);
      Jerseys.addResource(binder,LookupCoordinatorResource.class);
      LifecycleModule.register(binder,Server.class);
      LifecycleModule.register(binder,DatasourcesResource.class);
      ConditionalMultibind.create(properties,binder,DruidCoordinatorHelper.class,CoordinatorIndexingServiceHelper.class).addConditionBinding("druid.coordinator.merge.on",Predicates.equalTo("true"),DruidCoordinatorSegmentMerger.class).addConditionBinding("druid.coordinator.conversion.on",Predicates.equalTo("true"),DruidCoordinatorVersionConverter.class).addConditionBinding("druid.coordinator.kill.on",Predicates.equalTo("true"),DruidCoordinatorSegmentKiller.class);
    }
    @Provides @LazySingleton public LoadQueueTaskMaster getLoadQueueTaskMaster(    CuratorFramework curator,    ObjectMapper jsonMapper,    ScheduledExecutorFactory factory,    DruidCoordinatorConfig config){
      return new LoadQueueTaskMaster(curator,jsonMapper,factory.create(1,"Master-PeonExec--%d"),Executors.newSingleThreadExecutor(),config);
    }
  }
);
}

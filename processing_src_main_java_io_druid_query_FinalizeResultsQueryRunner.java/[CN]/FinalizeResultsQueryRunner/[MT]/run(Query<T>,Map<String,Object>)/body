{
  final boolean isBySegment=query.getContextBySegment(false);
  final boolean shouldFinalize=query.getContextFinalize(true);
  final Query<T> queryToRun;
  final Function<T,T> finalizerFn;
  final MetricManipulationFn metricManipulationFn;
  if (shouldFinalize) {
    queryToRun=query.withOverriddenContext(ImmutableMap.<String,Object>of("finalize",false));
    metricManipulationFn=MetricManipulatorFns.finalizing();
  }
 else {
    queryToRun=query;
    metricManipulationFn=MetricManipulatorFns.identity();
  }
  if (isBySegment) {
    finalizerFn=new Function<T,T>(){
      final Function<T,T> baseFinalizer=toolChest.makePostComputeManipulatorFn(query,metricManipulationFn);
      @Override @SuppressWarnings("unchecked") public T apply(      T input){
        Result<BySegmentResultValueClass<T>> result=(Result<BySegmentResultValueClass<T>>)input;
        if (input == null) {
          throw new ISE("Cannot have a null result!");
        }
        BySegmentResultValueClass<T> resultsClass=result.getValue();
        return (T)new Result<BySegmentResultValueClass>(result.getTimestamp(),new BySegmentResultValueClass(Lists.transform(resultsClass.getResults(),baseFinalizer),resultsClass.getSegmentId(),resultsClass.getInterval()));
      }
    }
;
  }
 else {
    finalizerFn=toolChest.makePostComputeManipulatorFn(query,metricManipulationFn);
  }
  return Sequences.map(baseRunner.run(queryToRun,context),finalizerFn);
}

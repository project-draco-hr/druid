{
  final boolean isBySegment=query.getContextBySegment(false);
  final boolean shouldFinalize=query.getContextFinalize(true);
  Function<T,T> finalizerFn;
  if (shouldFinalize) {
    if (isBySegment) {
      finalizerFn=new Function<T,T>(){
        final Function<T,T> baseFinalizer=toolChest.makePostComputeManipulatorFn(query,new MetricManipulationFn(){
          @Override public Object manipulate(          AggregatorFactory factory,          Object object){
            return factory.finalizeComputation(factory.deserialize(object));
          }
        }
);
        @Override @SuppressWarnings("unchecked") public T apply(        @Nullable T input){
          Result<BySegmentResultValueClass<T>> result=(Result<BySegmentResultValueClass<T>>)input;
          BySegmentResultValueClass<T> resultsClass=result.getValue();
          return (T)new Result<BySegmentResultValueClass>(result.getTimestamp(),new BySegmentResultValueClass(Lists.transform(resultsClass.getResults(),baseFinalizer),resultsClass.getSegmentId(),resultsClass.getInterval()));
        }
      }
;
    }
 else {
      finalizerFn=toolChest.makePostComputeManipulatorFn(query,new MetricManipulationFn(){
        @Override public Object manipulate(        AggregatorFactory factory,        Object object){
          return factory.finalizeComputation(object);
        }
      }
);
    }
  }
 else {
    finalizerFn=toolChest.makePostComputeManipulatorFn(query,new MetricManipulationFn(){
      @Override public Object manipulate(      AggregatorFactory factory,      Object object){
        return object;
      }
    }
);
  }
  return Sequences.map(baseRunner.run(query.withOverriddenContext(ImmutableMap.<String,Object>of("finalize",false))),finalizerFn);
}

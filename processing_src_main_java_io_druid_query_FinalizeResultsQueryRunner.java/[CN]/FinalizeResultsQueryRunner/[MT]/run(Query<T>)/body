{
  final boolean isBySegment=query.getContextBySegment(false);
  final boolean shouldFinalize=query.getContextFinalize(true);
  final Query<T> queryToRun;
  final Function<T,T> finalizerFn;
  if (shouldFinalize) {
    queryToRun=query.withOverriddenContext(ImmutableMap.<String,Object>of("finalize",false));
    if (isBySegment) {
      finalizerFn=new Function<T,T>(){
        final Function<T,T> baseFinalizer=toolChest.makePostComputeManipulatorFn(query,new FinalizeMetricManipulationFn());
        @Override @SuppressWarnings("unchecked") public T apply(        @Nullable T input){
          Result<BySegmentResultValueClass<T>> result=(Result<BySegmentResultValueClass<T>>)input;
          BySegmentResultValueClass<T> resultsClass=result.getValue();
          return (T)new Result<BySegmentResultValueClass>(result.getTimestamp(),new BySegmentResultValueClass(Lists.transform(resultsClass.getResults(),baseFinalizer),resultsClass.getSegmentId(),resultsClass.getInterval()));
        }
      }
;
    }
 else {
      finalizerFn=toolChest.makePostComputeManipulatorFn(query,new FinalizeMetricManipulationFn());
    }
  }
 else {
    queryToRun=query;
    finalizerFn=toolChest.makePostComputeManipulatorFn(query,new IdentityMetricManipulationFn());
  }
  return Sequences.map(baseRunner.run(queryToRun),finalizerFn);
}

{
  Stopwatch watch=new Stopwatch();
  int numServers=1000;
  master.moveSegment(EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.<String>anyObject(),EasyMock.<LoadPeonCallback>anyObject());
  EasyMock.expectLastCall().anyTimes();
  EasyMock.replay(master);
  List<DruidServer> serverList=Lists.newArrayList();
  Map<String,LoadQueuePeon> peonMap=Maps.newHashMap();
  List<ServerHolder> serverHolderList=Lists.newArrayList();
  Map<String,DataSegment> segmentMap=Maps.newHashMap();
  for (int i=0; i < numServers; i++) {
    segmentMap.put("segment" + i,new DataSegment("datasource" + i,new Interval(new DateTime("2012-01-01"),(new DateTime("2012-01-01")).plusHours(1)),(new DateTime("2012-03-01")).toString(),Maps.<String,Object>newHashMap(),Lists.<String>newArrayList(),Lists.<String>newArrayList(),new NoneShardSpec(),0,4L));
  }
  for (int i=0; i < 50; i++) {
    DruidServer server=EasyMock.createMock(DruidServer.class);
    EasyMock.expect(server.getMetadata()).andReturn(null).anyTimes();
    EasyMock.expect(server.getCurrSize()).andReturn(30L).atLeastOnce();
    EasyMock.expect(server.getMaxSize()).andReturn(100L).atLeastOnce();
    EasyMock.expect(server.getName()).andReturn(Integer.toString(i)).atLeastOnce();
    if (i == 0) {
      EasyMock.expect(server.getSegments()).andReturn(segmentMap).anyTimes();
    }
 else {
      EasyMock.expect(server.getSegments()).andReturn(new HashMap<String,DataSegment>()).anyTimes();
    }
    EasyMock.expect(server.getSegment(EasyMock.<String>anyObject())).andReturn(null).anyTimes();
    EasyMock.replay(server);
    LoadQueuePeon peon=new LoadQueuePeonTester();
    peonMap.put(Integer.toString(i),peon);
    serverHolderList.add(new ServerHolder(server,peon));
  }
  DruidMasterRuntimeParams params=DruidMasterRuntimeParams.newBuilder().withDruidCluster(new DruidCluster(ImmutableMap.<String,MinMaxPriorityQueue<ServerHolder>>of("normal",MinMaxPriorityQueue.orderedBy(DruidMasterBalancerTester.percentUsedComparator).create(serverHolderList)))).withLoadManagementPeons(peonMap).withAvailableSegments(segmentMap.values()).withMaxSegmentsToMove(MAX_SEGMENTS_TO_MOVE).withBalancerReferenceTimestamp(new DateTime("2013-01-01")).withEmitter(emitter).build();
  DruidMasterBalancerTester tester=new DruidMasterBalancerTester(master);
  watch.start();
  while (!tester.isBalanced(20,50)) {
    params=tester.run(params);
  }
  System.out.println(watch.stop());
}

{
  DruidDataSource dataSource=getDataSource(dataSourceName.toLowerCase());
  if (dataSource == null) {
    return Response.noContent().build();
  }
  if (full != null) {
    return Response.ok(dataSource).build();
  }
  Map<String,Object> tiers=Maps.newHashMap();
  Map<String,Object> segments=Maps.newHashMap();
  Map<String,Map<String,Object>> retVal=ImmutableMap.of("tiers",tiers,"segments",segments);
  int totalSegmentCount=0;
  long totalSegmentSize=0;
  long minTime=Long.MAX_VALUE;
  long maxTime=Long.MIN_VALUE;
  for (  DruidServer druidServer : serverInventoryView.getInventory()) {
    DruidDataSource druidDataSource=druidServer.getDataSource(dataSourceName);
    long dataSourceSegmentSize=0;
    for (    DataSegment dataSegment : druidDataSource.getSegments()) {
      dataSourceSegmentSize+=dataSegment.getSize();
      if (dataSegment.getInterval().getStartMillis() < minTime) {
        minTime=dataSegment.getInterval().getStartMillis();
      }
      if (dataSegment.getInterval().getEndMillis() > maxTime) {
        maxTime=dataSegment.getInterval().getEndMillis();
      }
    }
    totalSegmentCount+=druidDataSource.getSegments().size();
    totalSegmentSize+=dataSourceSegmentSize;
    Map<String,Object> tierStats=(Map)tiers.get(druidServer.getTier());
    if (tierStats == null) {
      tierStats=Maps.newHashMap();
      tiers.put(druidServer.getTier(),tierStats);
    }
    int segmentCount=MapUtils.getInt(tierStats,"segmentCount",0);
    tierStats.put("segmentCount",segmentCount + druidDataSource.getSegments().size());
    long segmentSize=MapUtils.getLong(tierStats,"size",0L);
    tierStats.put("size",segmentSize + dataSourceSegmentSize);
  }
  segments.put("count",totalSegmentCount);
  segments.put("size",totalSegmentSize);
  segments.put("minTime",new DateTime(minTime));
  segments.put("maxTime",new DateTime(maxTime));
  return Response.ok(retVal).build();
}

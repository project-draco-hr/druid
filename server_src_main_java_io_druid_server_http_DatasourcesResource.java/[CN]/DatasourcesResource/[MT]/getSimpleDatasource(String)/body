{
  Map<String,Object> tiers=Maps.newHashMap();
  Map<String,Object> segments=Maps.newHashMap();
  Map<String,Map<String,Object>> retVal=ImmutableMap.of("tiers",tiers,"segments",segments);
  Set<String> totalDistinctSegments=Sets.newHashSet();
  Map<String,HashSet<Object>> tierDistinctSegments=Maps.newHashMap();
  long totalSegmentSize=0;
  long minTime=Long.MAX_VALUE;
  long maxTime=Long.MIN_VALUE;
  String tier;
  for (  DruidServer druidServer : serverInventoryView.getInventory()) {
    DruidDataSource druidDataSource=druidServer.getDataSource(dataSourceName);
    tier=druidServer.getTier();
    if (druidDataSource == null) {
      continue;
    }
    if (!tierDistinctSegments.containsKey(tier)) {
      tierDistinctSegments.put(tier,Sets.newHashSet());
    }
    long dataSourceSegmentSize=0;
    for (    DataSegment dataSegment : druidDataSource.getSegments()) {
      if (!tierDistinctSegments.get(tier).contains(dataSegment.getIdentifier())) {
        dataSourceSegmentSize+=dataSegment.getSize();
        tierDistinctSegments.get(tier).add(dataSegment.getIdentifier());
      }
      if (!totalDistinctSegments.contains(dataSegment.getIdentifier())) {
        totalSegmentSize+=dataSegment.getSize();
        totalDistinctSegments.add(dataSegment.getIdentifier());
        if (dataSegment.getInterval().getStartMillis() < minTime) {
          minTime=dataSegment.getInterval().getStartMillis();
        }
        if (dataSegment.getInterval().getEndMillis() > maxTime) {
          maxTime=dataSegment.getInterval().getEndMillis();
        }
      }
    }
    Map<String,Object> tierStats=(Map)tiers.get(tier);
    if (tierStats == null) {
      tierStats=Maps.newHashMap();
      tiers.put(druidServer.getTier(),tierStats);
    }
    tierStats.put("segmentCount",tierDistinctSegments.get(tier).size());
    long segmentSize=MapUtils.getLong(tierStats,"size",0L);
    tierStats.put("size",segmentSize + dataSourceSegmentSize);
  }
  segments.put("count",totalDistinctSegments.size());
  segments.put("size",totalSegmentSize);
  segments.put("minTime",new DateTime(minTime));
  segments.put("maxTime",new DateTime(maxTime));
  return retVal;
}

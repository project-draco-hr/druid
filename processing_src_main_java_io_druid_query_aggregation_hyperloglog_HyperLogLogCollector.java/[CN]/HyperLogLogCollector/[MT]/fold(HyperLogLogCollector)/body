{
  if (other == null || other.storageBuffer.remaining() == 0) {
    return this;
  }
  if (storageBuffer.isReadOnly()) {
    convertToMutableByteBuffer();
  }
  estimatedCardinality=null;
  if (getRegisterOffset() < other.getRegisterOffset()) {
    ByteBuffer newStorage=ByteBuffer.allocateDirect(other.storageBuffer.remaining());
    newStorage.put(other.storageBuffer.asReadOnlyBuffer());
    newStorage.clear();
    other.storageBuffer=storageBuffer;
    other.initPosition=initPosition;
    storageBuffer=newStorage;
    initPosition=0;
  }
  final ByteBuffer otherBuffer=other.storageBuffer.asReadOnlyBuffer();
  final byte otherOffset=other.getRegisterOffset();
  if (storageBuffer.remaining() != getNumBytesForDenseStorage()) {
    convertToDenseStorage();
  }
  byte myOffset=getRegisterOffset();
  short numNonZero=getNumNonZeroRegisters();
  final int offsetDiff=myOffset - otherOffset;
  if (offsetDiff < 0) {
    throw new ISE("offsetDiff[%d] < 0, shouldn't happen because of swap.",offsetDiff);
  }
  add(other.getMaxOverflowRegister(),other.getMaxOverflowValue());
  final int myPayloadStart=getPayloadBytePosition();
  otherBuffer.position(other.getPayloadBytePosition());
  if (isSparse(otherBuffer)) {
    while (otherBuffer.hasRemaining()) {
      final int payloadStartPosition=otherBuffer.getShort() - other.getNumHeaderBytes();
      numNonZero+=mergeAndStoreByteRegister(storageBuffer,myPayloadStart + payloadStartPosition,offsetDiff,otherBuffer.get());
    }
    if (numNonZero == NUM_BUCKETS) {
      numNonZero=decrementBuckets();
      setRegisterOffset(++myOffset);
      setNumNonZeroRegisters(numNonZero);
    }
  }
 else {
    int position=getPayloadBytePosition();
    while (otherBuffer.hasRemaining()) {
      numNonZero+=mergeAndStoreByteRegister(storageBuffer,position,offsetDiff,otherBuffer.get());
      position++;
    }
    if (numNonZero == NUM_BUCKETS) {
      numNonZero=decrementBuckets();
      setRegisterOffset(++myOffset);
      setNumNonZeroRegisters(numNonZero);
    }
  }
  setNumNonZeroRegisters(numNonZero);
  return this;
}

{
  TimeseriesQueryEngine engine=new TimeseriesQueryEngine();
  IncrementalIndex index=new OnheapIncrementalIndex(0,QueryGranularities.SECOND,new AggregatorFactory[]{new CountAggregatorFactory("cnt")},1000);
  String visitor_id="visitor_id";
  String client_type="client_type";
  DateTime time=new DateTime("2016-03-04T00:00:00.000Z");
  long timestamp=time.getMillis();
  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.<String,Object>of(visitor_id,"0",client_type,"iphone")));
  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.<String,Object>of(visitor_id,"1",client_type,"iphone")));
  index.add(new MapBasedInputRow(timestamp,Lists.newArrayList(visitor_id,client_type),ImmutableMap.<String,Object>of(visitor_id,"2",client_type,"android")));
  TimeseriesQuery query=Druids.newTimeseriesQueryBuilder().dataSource(QueryRunnerTestHelper.dataSource).granularity(QueryRunnerTestHelper.allGran).intervals(QueryRunnerTestHelper.fullOnInterval).aggregators(Lists.newArrayList(QueryRunnerTestHelper.rowsCount,new DistinctCountAggregatorFactory("UV",visitor_id,null))).build();
  final Iterable<Result<TimeseriesResultValue>> results=Sequences.toList(engine.process(query,new IncrementalIndexStorageAdapter(index)),Lists.<Result<TimeseriesResultValue>>newLinkedList());
  List<Result<TimeseriesResultValue>> expectedResults=Arrays.asList(new Result<>(time,new TimeseriesResultValue(ImmutableMap.<String,Object>of("UV",3,"rows",3L))));
  TestHelper.assertExpectedResults(expectedResults,results);
}

{
  final ResultMergeQueryRunner<Row> mergingQueryRunner=new ResultMergeQueryRunner<Row>(baseRunner){
    @Override protected Ordering<Row> makeOrdering(    Query<Row> queryParam){
      return ((GroupByQuery)queryParam).getRowOrdering(true);
    }
    @Override protected BinaryFn<Row,Row,Row> createMergeFn(    Query<Row> queryParam){
      return new GroupByBinaryFnV2((GroupByQuery)queryParam);
    }
  }
;
  final QueryGranularity gran=query.getGranularity();
  final String fudgeTimestamp;
  if (query.getContextValue(CTX_KEY_FUDGE_TIMESTAMP,"").isEmpty() && gran instanceof AllGranularity) {
    final long timeStart=query.getIntervals().get(0).getStartMillis();
    fudgeTimestamp=String.valueOf(new DateTime(gran.iterable(timeStart,timeStart + 1).iterator().next()).getMillis());
  }
 else {
    fudgeTimestamp=query.getContextValue(CTX_KEY_FUDGE_TIMESTAMP,"");
  }
  return query.applyLimit(Sequences.map(mergingQueryRunner.run(new GroupByQuery(query.getDataSource(),query.getQuerySegmentSpec(),query.getDimFilter(),gran,query.getDimensions(),query.getAggregatorSpecs(),ImmutableList.<PostAggregator>of(),null,null,query.getContext()).withOverriddenContext(ImmutableMap.<String,Object>of("finalize",false,GroupByStrategySelector.CTX_KEY_STRATEGY,GroupByStrategySelector.STRATEGY_V2,CTX_KEY_FUDGE_TIMESTAMP,fudgeTimestamp)),responseContext),new Function<Row,Row>(){
    @Override public Row apply(    final Row row){
      if (query.getPostAggregatorSpecs().isEmpty()) {
        return row;
      }
      final Map<String,Object> newMap;
      if (query.getPostAggregatorSpecs().isEmpty()) {
        newMap=((MapBasedRow)row).getEvent();
      }
 else {
        newMap=Maps.newLinkedHashMap(((MapBasedRow)row).getEvent());
        for (        PostAggregator postAggregator : query.getPostAggregatorSpecs()) {
          newMap.put(postAggregator.getName(),postAggregator.compute(newMap));
        }
      }
      return new MapBasedRow(row.getTimestamp(),newMap);
    }
  }
));
}

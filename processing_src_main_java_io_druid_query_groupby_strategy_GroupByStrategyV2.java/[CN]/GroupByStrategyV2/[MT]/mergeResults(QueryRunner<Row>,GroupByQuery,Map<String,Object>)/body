{
  final ResultMergeQueryRunner<Row> mergingQueryRunner=new ResultMergeQueryRunner<Row>(baseRunner){
    @Override protected Ordering<Row> makeOrdering(    Query<Row> queryParam){
      return ((GroupByQuery)queryParam).getRowOrdering(true);
    }
    @Override protected BinaryFn<Row,Row,Row> createMergeFn(    Query<Row> queryParam){
      return new GroupByBinaryFnV2((GroupByQuery)queryParam);
    }
  }
;
  final DateTime fudgeTimestamp=getUniversalTimestamp(query);
  return query.applyLimit(Sequences.map(mergingQueryRunner.run(new GroupByQuery(query.getDataSource(),query.getQuerySegmentSpec(),query.getDimFilter(),query.getGranularity(),query.getDimensions(),query.getAggregatorSpecs(),ImmutableList.<PostAggregator>of(),null,null,query.getContext()).withOverriddenContext(ImmutableMap.<String,Object>of("finalize",false,GroupByQueryConfig.CTX_KEY_STRATEGY,GroupByStrategySelector.STRATEGY_V2,CTX_KEY_FUDGE_TIMESTAMP,fudgeTimestamp == null ? "" : String.valueOf(fudgeTimestamp.getMillis()))),responseContext),new Function<Row,Row>(){
    @Override public Row apply(    final Row row){
      if (query.getPostAggregatorSpecs().isEmpty()) {
        return row;
      }
      final Map<String,Object> newMap;
      if (query.getPostAggregatorSpecs().isEmpty()) {
        newMap=((MapBasedRow)row).getEvent();
      }
 else {
        newMap=Maps.newLinkedHashMap(((MapBasedRow)row).getEvent());
        for (        PostAggregator postAggregator : query.getPostAggregatorSpecs()) {
          newMap.put(postAggregator.getName(),postAggregator.compute(newMap));
        }
      }
      return new MapBasedRow(row.getTimestamp(),newMap);
    }
  }
));
}

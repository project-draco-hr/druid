{
synchronized (lock) {
    if (currentlyProcessing == null) {
      if (!segmentsToDrop.isEmpty()) {
        currentlyProcessing=segmentsToDrop.firstEntry().getValue();
        log.info("Server[%s] dropping [%s]",basePath,currentlyProcessing.getSegmentIdentifier());
      }
 else       if (!segmentsToLoad.isEmpty()) {
        currentlyProcessing=segmentsToLoad.firstEntry().getValue();
        log.info("Server[%s] loading [%s]",basePath,currentlyProcessing.getSegmentIdentifier());
      }
 else {
        return;
      }
      zkWritingExecutor.execute(new Runnable(){
        @Override public void run(){
synchronized (lock) {
            try {
              if (currentlyProcessing == null) {
                if (!stopped) {
                  log.makeAlert("Crazy race condition! server[%s]",basePath).emit();
                }
                actionCompleted();
                doNext();
                return;
              }
              log.info("Server[%s] processing segment[%s]",basePath,currentlyProcessing.getSegmentIdentifier());
              final String path=ZKPaths.makePath(basePath,currentlyProcessing.getSegmentIdentifier());
              final byte[] payload=jsonMapper.writeValueAsBytes(currentlyProcessing.getChangeRequest());
              curator.create().withMode(CreateMode.EPHEMERAL).forPath(path,payload);
              zkWritingExecutor.schedule(new Runnable(){
                @Override public void run(){
                  try {
                    if (curator.checkExists().forPath(path) != null) {
                      failAssign(new ISE("%s was never removed! Failing this operation!",path));
                    }
                  }
 catch (                  Exception e) {
                    failAssign(e);
                  }
                }
              }
,config.getLoadTimeoutDelay().getMillis(),TimeUnit.MILLISECONDS);
              final Stat stat=curator.checkExists().usingWatcher(new CuratorWatcher(){
                @Override public void process(                WatchedEvent watchedEvent) throws Exception {
switch (watchedEvent.getType()) {
case NodeDeleted:
                    entryRemoved(watchedEvent.getPath());
                }
              }
            }
).forPath(path);
            if (stat == null) {
              final byte[] noopPayload=jsonMapper.writeValueAsBytes(new SegmentChangeRequestNoop());
              curator.create().withMode(CreateMode.EPHEMERAL).forPath(path,noopPayload);
              entryRemoved(path);
            }
          }
 catch (          Exception e) {
            failAssign(e);
          }
        }
      }
    }
);
  }
 else {
    log.info("Server[%s] skipping doNext() because something is currently loading[%s].",basePath,currentlyProcessing.getSegmentIdentifier());
  }
}
}

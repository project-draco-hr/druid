{
  boolean update=false;
  try {
    startStopLock.readLock().lockInterruptibly();
  }
 catch (  InterruptedException e) {
    throw Throwables.propagate(e);
  }
  try {
    assertStarted();
    LookupExtractorFactory prior=lookupMap.get(lookupName);
    update=lookupExtractorFactory.replaces(prior);
    if (update) {
      if (!lookupExtractorFactory.start()) {
        throw new ISE("Could not start [%s]",lookupName);
      }
      boolean racy;
      do {
        if (prior == null) {
          racy=null != lookupMap.putIfAbsent(lookupName,lookupExtractorFactory);
        }
 else {
          racy=!lookupMap.replace(lookupName,prior,lookupExtractorFactory);
        }
        if (racy) {
          prior=lookupMap.get(lookupName);
          update=lookupExtractorFactory.replaces(prior);
        }
      }
 while (racy && update);
      if (prior != null && update) {
        if (!prior.close()) {
          LOGGER.error("Error closing [%s]:[%s]",lookupName,prior);
        }
      }
      if (!update) {
        if (!lookupExtractorFactory.close()) {
          LOGGER.error("Error closing [%s]:[%s]",lookupExtractorFactory);
        }
      }
    }
  }
  finally {
    startStopLock.readLock().unlock();
  }
  return update;
}

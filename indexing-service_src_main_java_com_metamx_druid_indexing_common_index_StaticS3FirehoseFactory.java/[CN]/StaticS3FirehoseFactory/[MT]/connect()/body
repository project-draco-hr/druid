{
  Preconditions.checkNotNull(s3Client,"null s3Client");
  return new Firehose(){
    LineIterator lineIterator=null;
    final Queue<URI> objectQueue=Lists.newLinkedList(uris);
    private void maybeNextFile() throws Exception {
      if (lineIterator == null || !lineIterator.hasNext()) {
        if (lineIterator != null) {
          lineIterator.close();
        }
        final URI nextURI=objectQueue.poll();
        if (nextURI != null) {
          final String s3Bucket=nextURI.getAuthority();
          final S3Object s3Object=new S3Object(nextURI.getPath().startsWith("/") ? nextURI.getPath().substring(1) : nextURI.getPath());
          log.info("Reading from bucket[%s] object[%s] (%s)",s3Bucket,s3Object.getKey(),nextURI);
          int ntry=0;
          try {
            final InputStream innerInputStream=s3Client.getObject(s3Bucket,s3Object.getKey()).getDataInputStream();
            final InputStream outerInputStream=s3Object.getKey().endsWith(".gz") ? new GZIPInputStream(innerInputStream) : innerInputStream;
            lineIterator=IOUtils.lineIterator(new BufferedReader(new InputStreamReader(outerInputStream,Charsets.UTF_8)));
          }
 catch (          IOException e) {
            log.error(e,"Exception reading from bucket[%s] object[%s] (try %d) (sleeping %d millis)",s3Bucket,s3Object.getKey(),ntry,retryMillis);
            ntry++;
            if (ntry <= retryCount) {
              Thread.sleep(retryMillis);
            }
          }
        }
      }
    }
    @Override public boolean hasMore(){
      try {
        maybeNextFile();
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
      return lineIterator != null && lineIterator.hasNext();
    }
    @Override public InputRow nextRow(){
      try {
        maybeNextFile();
      }
 catch (      Exception e) {
        throw Throwables.propagate(e);
      }
      if (lineIterator == null) {
        throw new NoSuchElementException();
      }
      return parser.parse(lineIterator.next());
    }
    @Override public Runnable commit(){
      return new Runnable(){
        public void run(){
        }
      }
;
    }
    @Override public void close() throws IOException {
      objectQueue.clear();
      if (lineIterator != null) {
        lineIterator.close();
      }
    }
  }
;
}

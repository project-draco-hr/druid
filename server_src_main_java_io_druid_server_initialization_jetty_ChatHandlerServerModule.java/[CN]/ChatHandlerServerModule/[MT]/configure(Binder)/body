{
  Jerseys.addResource(binder,ChatHandlerResource.class);
  LifecycleModule.register(binder,ChatHandlerResource.class);
  if (properties.containsKey(MAX_CHAT_REQUESTS_PROPERTY)) {
    final int maxRequests=Integer.parseInt(properties.getProperty(MAX_CHAT_REQUESTS_PROPERTY));
    JettyBindings.addQosFilter(binder,"/druid/worker/v1/chat/*",maxRequests);
  }
  if (properties.containsKey(CHAT_PORT_PROPERTY)) {
    log.info("Spawning separate ingestion server at port [%s]",properties.getProperty(CHAT_PORT_PROPERTY));
    JsonConfigProvider.bind(binder,"druid.indexer.task.chathandler",DruidNode.class,RemoteChatHandler.class);
    JsonConfigProvider.bind(binder,"druid.indexer.server.chathandler.http",ServerConfig.class,RemoteChatHandler.class);
    LifecycleModule.register(binder,Server.class,RemoteChatHandler.class);
  }
 else {
    binder.bind(DruidNode.class).annotatedWith(RemoteChatHandler.class).to(Key.get(DruidNode.class,Self.class));
    binder.bind(ServerConfig.class).annotatedWith(RemoteChatHandler.class).to(Key.get(ServerConfig.class));
  }
}

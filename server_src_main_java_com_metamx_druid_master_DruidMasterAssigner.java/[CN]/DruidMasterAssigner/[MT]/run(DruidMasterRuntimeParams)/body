{
  int unassignedCount=0;
  int unassignedSize=0;
  int assignedCount=0;
  Collection<DruidServer> servers=params.getHistoricalServers();
  Map<String,LoadQueuePeon> loadManagementPeons=params.getLoadManagementPeons();
  if (servers.isEmpty()) {
    log.warn("Uh... I have no servers. Not assigning anything...");
    return params;
  }
  if (loadManagementPeons.isEmpty()) {
    log.warn("I have servers but no peons for them? What is happening?!");
    return params;
  }
  PriorityQueue<ServerHolder> serverQueue=new PriorityQueue<ServerHolder>(loadManagementPeons.size(),Comparators.inverse(Comparators.<Comparable>comparable()));
  for (  DruidServer server : servers) {
    serverQueue.add(new ServerHolder(server,loadManagementPeons.get(server.getName())));
  }
  for (  DataSegment segment : params.getUnservicedSegments()) {
    if (master.lookupSegmentLifetime(segment) > 0) {
      continue;
    }
    ServerHolder holder=serverQueue.poll();
    if (holder == null) {
      log.warn("Wtf, holder was null?  Do I have no servers[%s]?",serverQueue);
      continue;
    }
    if (holder.getAvailableSize() < segment.getSize()) {
      log.warn("Not enough node capacity, closest is [%s] with %,d available, skipping segment[%s].",holder.getServer(),holder.getAvailableSize(),segment);
      params.getEmitter().emit(new AlertEvent.Builder().build("Not enough node capacity",ImmutableMap.<String,Object>builder().put("segmentSkipped",segment.toString()).put("closestNode",holder.getServer().toString()).put("availableSize",holder.getAvailableSize()).build()));
      serverQueue.add(holder);
      ++unassignedCount;
      unassignedSize+=segment.getSize();
      continue;
    }
    holder.getPeon().loadSegment(segment,new LoadPeonCallback(){
      @Override protected void execute(){
        return;
      }
    }
);
    serverQueue.add(holder);
    ++assignedCount;
  }
  master.decrementRemovedSegmentsLifetime();
  return params.buildFromExisting().withMessage(String.format("Assigned %,d segments among %,d servers",assignedCount,servers.size())).withAssignedCount(assignedCount).withUnassignedCount(unassignedCount).withUnassignedSize(unassignedSize).build();
}

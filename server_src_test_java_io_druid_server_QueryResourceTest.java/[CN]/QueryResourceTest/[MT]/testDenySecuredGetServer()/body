{
  final CountDownLatch waitForCancellationLatch=new CountDownLatch(1);
  final CountDownLatch waitFinishLatch=new CountDownLatch(2);
  final CountDownLatch startAwaitLatch=new CountDownLatch(1);
  EasyMock.expect(testServletRequest.getAttribute(EasyMock.anyString())).andReturn(new AuthorizationInfo(){
    @Override public Access isAuthorized(    Resource resource,    Action action){
      if (action.equals(Action.READ)) {
        try {
          waitForCancellationLatch.await();
        }
 catch (        InterruptedException e) {
          Throwables.propagate(e);
        }
        return new Access(true);
      }
 else {
        return new Access(false);
      }
    }
  }
).times(2);
  EasyMock.replay(testServletRequest);
  queryResource=new QueryResource(serverConfig,jsonMapper,jsonMapper,testSegmentWalker,new NoopServiceEmitter(),new NoopRequestLogger(),queryManager,new AuthConfig(true));
  final String queryString="{\"queryType\":\"timeBoundary\", \"dataSource\":\"allow\"," + "\"context\":{\"queryId\":\"id_1\"}}";
  ObjectMapper mapper=new DefaultObjectMapper();
  Query query=mapper.readValue(queryString,Query.class);
  ListenableFuture future=MoreExecutors.listeningDecorator(Execs.singleThreaded("test_query_resource_%s")).submit(new Runnable(){
    @Override public void run(){
      try {
        startAwaitLatch.countDown();
        Response response=queryResource.doPost(new ByteArrayInputStream(queryString.getBytes("UTF-8")),null,testServletRequest);
        Assert.assertEquals(Response.Status.OK.getStatusCode(),response.getStatus());
      }
 catch (      IOException e) {
        Throwables.propagate(e);
      }
      waitFinishLatch.countDown();
    }
  }
);
  queryManager.registerQuery(query,future);
  startAwaitLatch.await();
  Executors.newSingleThreadExecutor().submit(new Runnable(){
    @Override public void run(){
      Response response=queryResource.getServer("id_1",testServletRequest);
      Assert.assertEquals(Response.Status.FORBIDDEN.getStatusCode(),response.getStatus());
      waitForCancellationLatch.countDown();
      waitFinishLatch.countDown();
    }
  }
);
  waitFinishLatch.await();
}

{
  if (segment != null) {
    return super.preflight(taskActionClient);
  }
  List<DataSegment> segments=taskActionClient.submit(defaultListUsedAction());
  final FunctionalIterable<Task> tasks=FunctionalIterable.create(segments).keep(new Function<DataSegment,Task>(){
    @Override public Task apply(    DataSegment segment){
      final Integer segmentVersion=segment.getBinaryVersion();
      if (!CURR_VERSION_INTEGER.equals(segmentVersion)) {
        return new SubTask(getGroupId(),segment);
      }
      log.info("Skipping[%s], already version[%s]",segment.getIdentifier(),segmentVersion);
      return null;
    }
  }
);
  taskActionClient.submit(new SpawnTasksAction(Lists.newArrayList(tasks)));
  return TaskStatus.success(getId());
}

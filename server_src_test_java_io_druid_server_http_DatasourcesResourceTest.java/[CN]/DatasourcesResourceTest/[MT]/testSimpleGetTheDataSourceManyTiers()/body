{
  EasyMock.expect(server.getDataSource("datasource1")).andReturn(listDataSources.get(0)).atLeastOnce();
  EasyMock.expect(server.getTier()).andReturn("cold").atLeastOnce();
  DruidServer server2=EasyMock.createStrictMock(DruidServer.class);
  EasyMock.expect(server2.getDataSource("datasource1")).andReturn(listDataSources.get(1)).atLeastOnce();
  EasyMock.expect(server2.getTier()).andReturn("hot").atLeastOnce();
  DruidServer server3=EasyMock.createStrictMock(DruidServer.class);
  EasyMock.expect(server3.getDataSource("datasource1")).andReturn(listDataSources.get(1)).atLeastOnce();
  EasyMock.expect(server3.getTier()).andReturn("cold").atLeastOnce();
  EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server,server2,server3)).atLeastOnce();
  EasyMock.replay(inventoryView,server,server2,server3);
  DatasourcesResource datasourcesResource=new DatasourcesResource(inventoryView,null,null,new AuthConfig());
  Response response=datasourcesResource.getTheDataSource("datasource1",null);
  Assert.assertEquals(200,response.getStatus());
  Map<String,Map<String,Object>> result=(Map<String,Map<String,Object>>)response.getEntity();
  Assert.assertEquals(2,((Map)(result.get("tiers").get("cold"))).get("segmentCount"));
  Assert.assertEquals(30L,((Map)(result.get("tiers").get("cold"))).get("size"));
  Assert.assertEquals(1,((Map)(result.get("tiers").get("hot"))).get("segmentCount"));
  Assert.assertEquals(20L,((Map)(result.get("tiers").get("hot"))).get("size"));
  Assert.assertNotNull(result.get("segments"));
  Assert.assertEquals("2010-01-01T00:00:00.000Z",result.get("segments").get("minTime").toString());
  Assert.assertEquals("2010-01-23T00:00:00.000Z",result.get("segments").get("maxTime").toString());
  Assert.assertEquals(2,result.get("segments").get("count"));
  Assert.assertEquals(30L,result.get("segments").get("size"));
  EasyMock.verify(inventoryView,server,server2,server3);
}

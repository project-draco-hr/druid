{
  EasyMock.expect(server.getDataSources()).andReturn(listDataSources).atLeastOnce();
  EasyMock.expect(server.getDataSource("datasource1")).andReturn(listDataSources.get(0)).atLeastOnce();
  EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();
  EasyMock.expect(server.getDataSource("datasource2")).andReturn(listDataSources.get(1)).atLeastOnce();
  EasyMock.expect(server.getTier()).andReturn(null).atLeastOnce();
  EasyMock.expect(inventoryView.getInventory()).andReturn(ImmutableList.of(server)).atLeastOnce();
  EasyMock.replay(inventoryView,server);
  DatasourcesResource datasourcesResource=new DatasourcesResource(inventoryView,null,null);
  Response response=datasourcesResource.getQueryableDataSources(null,"simple");
  Assert.assertEquals(200,response.getStatus());
  List<Map<String,Object>> results=(List<Map<String,Object>>)response.getEntity();
  int index=0;
  for (  Map<String,Object> entry : results) {
    Assert.assertEquals(listDataSources.get(index).getName(),entry.get("name").toString());
    Assert.assertTrue(((Map)((Map)entry.get("properties")).get("tiers")).containsKey(null));
    Assert.assertNotNull((((Map)entry.get("properties")).get("segments")));
    Assert.assertEquals(1,((Map)((Map)entry.get("properties")).get("segments")).get("count"));
    index++;
  }
  EasyMock.verify(inventoryView,server);
}

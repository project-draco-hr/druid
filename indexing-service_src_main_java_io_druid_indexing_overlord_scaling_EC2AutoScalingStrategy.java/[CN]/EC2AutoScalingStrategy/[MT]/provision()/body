{
  try {
    final WorkerSetupData setupData=workerSetupDataRef.get();
    final EC2NodeData workerConfig=setupData.getNodeData();
    final String userDataBase64;
    if (setupData.getUserData() == null) {
      userDataBase64=null;
    }
 else {
      if (config.getWorkerVersion() == null) {
        userDataBase64=setupData.getUserData().getUserDataBase64();
      }
 else {
        userDataBase64=setupData.getUserData().withVersion(config.getWorkerVersion()).getUserDataBase64();
      }
    }
    final RunInstancesResult result=amazonEC2Client.runInstances(new RunInstancesRequest(workerConfig.getAmiId(),workerConfig.getMinInstances(),workerConfig.getMaxInstances()).withInstanceType(workerConfig.getInstanceType()).withSecurityGroupIds(workerConfig.getSecurityGroupIds()).withPlacement(new Placement(setupData.getAvailabilityZone())).withKeyName(workerConfig.getKeyName()).withUserData(userDataBase64));
    final List<String> instanceIds=Lists.transform(result.getReservation().getInstances(),new Function<Instance,String>(){
      @Override public String apply(      Instance input){
        return input.getInstanceId();
      }
    }
);
    log.info("Created instances: %s",instanceIds);
    return new AutoScalingData(Lists.transform(result.getReservation().getInstances(),new Function<Instance,String>(){
      @Override public String apply(      Instance input){
        return input.getInstanceId();
      }
    }
));
  }
 catch (  Exception e) {
    log.error(e,"Unable to provision any EC2 instances.");
  }
  return null;
}

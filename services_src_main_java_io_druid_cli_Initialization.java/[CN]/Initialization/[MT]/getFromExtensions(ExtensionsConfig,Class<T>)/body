{
  final TeslaAether aether=getAetherClient(config);
  List<T> retVal=Lists.newArrayList();
  if (config.searchCurrentClassloader()) {
    for (    T module : ServiceLoader.load(clazz,Initialization.class.getClassLoader())) {
      log.info("Adding local module[%s]",module.getClass());
      retVal.add(module);
    }
  }
  for (  String coordinate : config.getCoordinates()) {
    log.info("Loading extension[%s]",coordinate);
    try {
      ClassLoader loader=loadersMap.get(coordinate);
      if (loader == null) {
        final CollectRequest collectRequest=new CollectRequest();
        collectRequest.setRoot(new Dependency(new DefaultArtifact(coordinate),JavaScopes.RUNTIME));
        DependencyRequest dependencyRequest=new DependencyRequest(collectRequest,DependencyFilterUtils.andFilter(DependencyFilterUtils.classpathFilter(JavaScopes.RUNTIME),new DependencyFilter(){
          @Override public boolean accept(          DependencyNode node,          List<DependencyNode> parents){
            if (accept(node.getArtifact())) {
              return false;
            }
            for (            DependencyNode parent : parents) {
              if (accept(parent.getArtifact())) {
                return false;
              }
            }
            return true;
          }
          private boolean accept(          final Artifact artifact){
            return exclusions.contains(artifact.getGroupId());
          }
        }
));
        final List<Artifact> artifacts=aether.resolveArtifacts(dependencyRequest);
        List<URL> urls=Lists.newArrayListWithExpectedSize(artifacts.size());
        for (        Artifact artifact : artifacts) {
          if (!exclusions.contains(artifact.getGroupId())) {
            urls.add(artifact.getFile().toURI().toURL());
          }
 else {
            log.error("Skipped Artifact[%s]",artifact);
          }
        }
        for (        URL url : urls) {
          log.info("Added URL[%s]",url);
        }
        loader=new URLClassLoader(urls.toArray(new URL[urls.size()]),Initialization.class.getClassLoader());
        loadersMap.put(coordinate,loader);
      }
      final ServiceLoader<T> serviceLoader=ServiceLoader.load(clazz,loader);
      for (      T module : serviceLoader) {
        log.info("Adding extension module[%s]",module.getClass());
        retVal.add(module);
      }
    }
 catch (    Exception e) {
      throw Throwables.propagate(e);
    }
  }
  return retVal;
}

{
  final KafkaIndexTask task=createTask(null,new KafkaIOConfig("sequence0",new KafkaPartitions("topic0",ImmutableMap.of(0,2L)),new KafkaPartitions("topic0",ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),true,false,null),null);
  final ListenableFuture<TaskStatus> future=runTask(task);
  try (final KafkaProducer<byte[],byte[]> kafkaProducer=kafkaServer.newProducer()){
    for (    ProducerRecord<byte[],byte[]> record : Iterables.limit(RECORDS,4)) {
      kafkaProducer.send(record).get();
    }
  }
   while (countEvents(task) != 2) {
    Thread.sleep(25);
  }
  Assert.assertEquals(2,countEvents(task));
  Assert.assertEquals(KafkaIndexTask.Status.READING,task.getStatus());
  Map<Integer,Long> currentOffsets=objectMapper.readValue(task.pause(0).getEntity().toString(),new TypeReference<Map<Integer,Long>>(){
  }
);
  Assert.assertEquals(KafkaIndexTask.Status.PAUSED,task.getStatus());
  try (final KafkaProducer<byte[],byte[]> kafkaProducer=kafkaServer.newProducer()){
    for (    ProducerRecord<byte[],byte[]> record : Iterables.skip(RECORDS,4)) {
      kafkaProducer.send(record).get();
    }
  }
   try {
    future.get(10,TimeUnit.SECONDS);
    Assert.fail("Task completed when it should have been paused");
  }
 catch (  TimeoutException e) {
  }
  Assert.assertEquals(currentOffsets,task.getCurrentOffsets());
  task.resume();
  Assert.assertEquals(TaskStatus.Status.SUCCESS,future.get().getStatusCode());
  Assert.assertEquals(task.getEndOffsets(),task.getCurrentOffsets());
  Assert.assertEquals(3,task.getFireDepartmentMetrics().processed());
  Assert.assertEquals(0,task.getFireDepartmentMetrics().unparseable());
  Assert.assertEquals(0,task.getFireDepartmentMetrics().thrownAway());
  SegmentDescriptor desc1=SD(task,"2010/P1D",0);
  SegmentDescriptor desc2=SD(task,"2011/P1D",0);
  Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors());
  Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions("topic0",ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()));
  Assert.assertEquals(ImmutableList.of("c"),readSegmentDim1(desc1));
  Assert.assertEquals(ImmutableList.of("d","e"),readSegmentDim1(desc2));
}

{
  final KafkaIndexTask task1=createTask(null,new KafkaIOConfig("sequence0",new KafkaPartitions("topic0",ImmutableMap.of(0,2L)),new KafkaPartitions("topic0",ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),true,false,null),null);
  final ListenableFuture<TaskStatus> future1=runTask(task1);
  try (final KafkaProducer<byte[],byte[]> kafkaProducer=kafkaServer.newProducer()){
    for (    ProducerRecord<byte[],byte[]> record : Iterables.limit(RECORDS,4)) {
      kafkaProducer.send(record).get();
    }
  }
   while (countEvents(task1) != 2) {
    Thread.sleep(25);
  }
  Assert.assertEquals(2,countEvents(task1));
  task1.stopGracefully();
  Assert.assertEquals(TaskStatus.Status.SUCCESS,future1.get().getStatusCode());
  final KafkaIndexTask task2=createTask(task1.getId(),new KafkaIOConfig("sequence0",new KafkaPartitions("topic0",ImmutableMap.of(0,2L)),new KafkaPartitions("topic0",ImmutableMap.of(0,5L)),kafkaServer.consumerProperties(),true,false,null),null);
  final ListenableFuture<TaskStatus> future2=runTask(task2);
  try (final KafkaProducer<byte[],byte[]> kafkaProducer=kafkaServer.newProducer()){
    for (    ProducerRecord<byte[],byte[]> record : Iterables.skip(RECORDS,4)) {
      kafkaProducer.send(record).get();
    }
  }
   Assert.assertEquals(TaskStatus.Status.SUCCESS,future2.get().getStatusCode());
  Assert.assertEquals(2,task1.getFireDepartmentMetrics().processed());
  Assert.assertEquals(0,task1.getFireDepartmentMetrics().unparseable());
  Assert.assertEquals(0,task1.getFireDepartmentMetrics().thrownAway());
  Assert.assertEquals(1,task2.getFireDepartmentMetrics().processed());
  Assert.assertEquals(0,task2.getFireDepartmentMetrics().unparseable());
  Assert.assertEquals(0,task2.getFireDepartmentMetrics().thrownAway());
  SegmentDescriptor desc1=SD(task1,"2010/P1D",0);
  SegmentDescriptor desc2=SD(task1,"2011/P1D",0);
  Assert.assertEquals(ImmutableSet.of(desc1,desc2),publishedDescriptors());
  Assert.assertEquals(new KafkaDataSourceMetadata(new KafkaPartitions("topic0",ImmutableMap.of(0,5L))),metadataStorageCoordinator.getDataSourceMetadata(DATA_SCHEMA.getDataSource()));
  Assert.assertEquals(ImmutableList.of("c"),readSegmentDim1(desc1));
  Assert.assertEquals(ImmutableList.of("d","e"),readSegmentDim1(desc2));
}

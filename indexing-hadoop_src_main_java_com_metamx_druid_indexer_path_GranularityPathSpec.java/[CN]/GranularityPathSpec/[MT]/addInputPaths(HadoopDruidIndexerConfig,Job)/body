{
  final Set<Interval> intervals=Sets.newTreeSet(Comparators.intervals());
  for (  Interval segmentInterval : config.getSegmentGranularIntervals()) {
    for (    Interval dataInterval : dataGranularity.getIterable(segmentInterval)) {
      intervals.add(dataInterval);
    }
  }
  Path betaInput=new Path(inputPath);
  FileSystem fs=betaInput.getFileSystem(job.getConfiguration());
  Set<String> paths=Sets.newTreeSet();
  Pattern fileMatcher=Pattern.compile(filePattern);
  DateTimeFormatter customFormatter=null;
  if (pathFormat != null) {
    customFormatter=DateTimeFormat.forPattern(pathFormat);
  }
  for (  Interval interval : intervals) {
    DateTime t=interval.getStart();
    String intervalPath=null;
    if (customFormatter != null) {
      intervalPath=customFormatter.print(t);
    }
 else {
      intervalPath=dataGranularity.toPath(t);
    }
    Path granularPath=new Path(betaInput,intervalPath);
    log.info("Checking path[%s]",granularPath);
    for (    FileStatus status : FSSpideringIterator.spiderIterable(fs,granularPath)) {
      final Path filePath=status.getPath();
      if (fileMatcher.matcher(filePath.toString()).matches()) {
        paths.add(filePath.toString());
      }
    }
  }
  for (  String path : paths) {
    log.info("Appending path[%s]",path);
    FileInputFormat.addInputPath(job,new Path(path));
  }
  return job;
}

{
  return Iterators.transform(index.iterator(),new Function<Rowboat,Rowboat>(){
    @Override public Rowboat apply(    Rowboat input){
      int[][] dims=input.getDims();
      int[][] newDims=new int[convertedDims.size()][];
      for (int i=0; i < newDims.length; ++i) {
        IntBuffer converter=converters.get(convertedDims.get(i));
        if (converter == null) {
          continue;
        }
        if (i >= dims.length || dims[i] == null) {
          continue;
        }
        newDims[i]=new int[dims[i].length];
        for (int j=0; j < dims[i].length; ++j) {
          if (!converter.hasRemaining()) {
            throw new ISE("Converter mismatch! wtfbbq!");
          }
          newDims[i][j]=converter.get(dims[i][j]);
        }
      }
      final Rowboat retVal=new Rowboat(input.getTimestamp(),newDims,input.getMetrics(),input.getRowNum());
      retVal.addRow(indexNumber,input.getRowNum());
      return retVal;
    }
  }
);
}

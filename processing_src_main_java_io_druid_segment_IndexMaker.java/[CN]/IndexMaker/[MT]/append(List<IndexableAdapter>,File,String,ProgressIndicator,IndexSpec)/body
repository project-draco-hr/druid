{
  FileUtils.deleteDirectory(outDir);
  if (!outDir.mkdirs()) {
    throw new ISE("Couldn't make outdir[%s].",outDir);
  }
  final List<String> mergedDimensions=mergeIndexed(Lists.transform(adapters,new Function<IndexableAdapter,Iterable<String>>(){
    @Override public Iterable<String> apply(    IndexableAdapter input){
      return Iterables.transform(input.getDimensionNames(),new Function<String,String>(){
        @Override public String apply(        String input){
          return input;
        }
      }
);
    }
  }
));
  final List<String> mergedMetrics=mergeIndexed(Lists.transform(adapters,new Function<IndexableAdapter,Iterable<String>>(){
    @Override public Iterable<String> apply(    IndexableAdapter input){
      return Iterables.transform(input.getMetricNames(),new Function<String,String>(){
        @Override public String apply(        String input){
          return input;
        }
      }
);
    }
  }
));
  Function<ArrayList<Iterable<Rowboat>>,Iterable<Rowboat>> rowMergerFn=new Function<ArrayList<Iterable<Rowboat>>,Iterable<Rowboat>>(){
    @Override public Iterable<Rowboat> apply(    final ArrayList<Iterable<Rowboat>> boats){
      return new MergeIterable<>(Ordering.<Rowboat>natural().nullsFirst(),boats);
    }
  }
;
  return makeIndexFiles(adapters,outDir,progress,mergedDimensions,mergedMetrics,commitMetaData,rowMergerFn,indexSpec);
}

{
  Sequence<InputRow> rows=Sequences.concat(Iterables.transform(adapters,new Function<StorageAdapter,Sequence<InputRow>>(){
    @Nullable @Override public Sequence<InputRow> apply(    StorageAdapter adapter){
      return Sequences.concat(Sequences.map(adapter.makeCursors(Filters.convertDimensionFilters(dimFilter),interval,QueryGranularity.ALL),new Function<Cursor,Sequence<InputRow>>(){
        @Nullable @Override public Sequence<InputRow> apply(        final Cursor cursor){
          final LongColumnSelector timestampColumnSelector=cursor.makeLongColumnSelector(Column.TIME_COLUMN_NAME);
          final Map<String,DimensionSelector> dimSelectors=Maps.newHashMap();
          for (          String dim : dims) {
            final DimensionSelector dimSelector=cursor.makeDimensionSelector(dim,null);
            if (dimSelector != null) {
              dimSelectors.put(dim,dimSelector);
            }
          }
          final Map<String,ObjectColumnSelector> metSelectors=Maps.newHashMap();
          for (          String metric : metrics) {
            final ObjectColumnSelector metricSelector=cursor.makeObjectColumnSelector(metric);
            if (metricSelector != null) {
              metSelectors.put(metric,metricSelector);
            }
          }
          return Sequences.simple(new Iterable<InputRow>(){
            @Override public Iterator<InputRow> iterator(){
              return new Iterator<InputRow>(){
                @Override public boolean hasNext(){
                  return !cursor.isDone();
                }
                @Override public InputRow next(){
                  final Map<String,Object> theEvent=Maps.newLinkedHashMap();
                  final long timestamp=timestampColumnSelector.get();
                  theEvent.put(EventHolder.timestampKey,new DateTime(timestamp));
                  for (                  Map.Entry<String,DimensionSelector> dimSelector : dimSelectors.entrySet()) {
                    final String dim=dimSelector.getKey();
                    final DimensionSelector selector=dimSelector.getValue();
                    final IndexedInts vals=selector.getRow();
                    if (vals.size() == 1) {
                      final String dimVal=selector.lookupName(vals.get(0));
                      theEvent.put(dim,dimVal);
                    }
 else {
                      List<String> dimVals=Lists.newArrayList();
                      for (int i=0; i < vals.size(); ++i) {
                        dimVals.add(selector.lookupName(vals.get(i)));
                      }
                      theEvent.put(dim,dimVals);
                    }
                  }
                  for (                  Map.Entry<String,ObjectColumnSelector> metSelector : metSelectors.entrySet()) {
                    final String metric=metSelector.getKey();
                    final ObjectColumnSelector selector=metSelector.getValue();
                    theEvent.put(metric,selector.get());
                  }
                  cursor.advance();
                  return new MapBasedInputRow(timestamp,dims,theEvent);
                }
                @Override public void remove(){
                  throw new UnsupportedOperationException("Remove Not Supported");
                }
              }
;
            }
          }
);
        }
      }
));
    }
  }
));
  rowYielder=rows.toYielder(null,new YieldingAccumulator<InputRow,InputRow>(){
    @Override public InputRow accumulate(    InputRow accumulated,    InputRow in){
      yield();
      return in;
    }
  }
);
}

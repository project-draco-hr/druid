{
  if (objects.length % 3 != 0) {
    throw new ISE("makeTimeResults must be passed arguments in groups of 3, got[%d]",objects.length);
  }
  List<Result<TimeseriesResultValue>> retVal=Lists.newArrayListWithCapacity(objects.length / 3);
  for (int i=0; i < objects.length; i+=3) {
    double avg_impr=((Number)objects[i + 2]).doubleValue() / ((Number)objects[i + 1]).doubleValue();
    retVal.add(new Result<>((DateTime)objects[i],new TimeseriesResultValue(ImmutableMap.<String,Object>builder().put("rows",objects[i + 1]).put("imps",objects[i + 2]).put("impers",objects[i + 2]).put("avg_imps_per_row",avg_impr).put("avg_imps_per_row_half",avg_impr / 2).put("avg_imps_per_row_double",avg_impr * 2).build())));
  }
  return retVal;
}

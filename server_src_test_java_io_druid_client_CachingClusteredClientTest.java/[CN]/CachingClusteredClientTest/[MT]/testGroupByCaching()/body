{
  List<AggregatorFactory> aggsWithUniques=ImmutableList.<AggregatorFactory>builder().addAll(AGGS).add(new HyperUniquesAggregatorFactory("uniques","uniques")).build();
  final HashFunction hashFn=Hashing.murmur3_128();
  GroupByQuery.Builder builder=new GroupByQuery.Builder().setDataSource(DATA_SOURCE).setQuerySegmentSpec(SEG_SPEC).setDimFilter(DIM_FILTER).setGranularity(GRANULARITY).setDimensions(Arrays.<DimensionSpec>asList(new DefaultDimensionSpec("a","a"))).setAggregatorSpecs(aggsWithUniques).setPostAggregatorSpecs(POST_AGGS).setContext(CONTEXT);
  final HyperLogLogCollector collector=HyperLogLogCollector.makeLatestCollector();
  collector.add(hashFn.hashString("abc123",Charsets.UTF_8).asBytes());
  collector.add(hashFn.hashString("123abc",Charsets.UTF_8).asBytes());
  testQueryCaching(client,builder.build(),new Interval("2011-01-01/2011-01-02"),makeGroupByResults(new DateTime("2011-01-01"),ImmutableMap.of("a","a","rows",1,"imps",1,"impers",1,"uniques",collector)),new Interval("2011-01-02/2011-01-03"),makeGroupByResults(new DateTime("2011-01-02"),ImmutableMap.of("a","b","rows",2,"imps",2,"impers",2,"uniques",collector)),new Interval("2011-01-05/2011-01-10"),makeGroupByResults(new DateTime("2011-01-05"),ImmutableMap.of("a","c","rows",3,"imps",3,"impers",3,"uniques",collector),new DateTime("2011-01-06"),ImmutableMap.of("a","d","rows",4,"imps",4,"impers",4,"uniques",collector),new DateTime("2011-01-07"),ImmutableMap.of("a","e","rows",5,"imps",5,"impers",5,"uniques",collector),new DateTime("2011-01-08"),ImmutableMap.of("a","f","rows",6,"imps",6,"impers",6,"uniques",collector),new DateTime("2011-01-09"),ImmutableMap.of("a","g","rows",7,"imps",7,"impers",7,"uniques",collector)),new Interval("2011-01-05/2011-01-10"),makeGroupByResults(new DateTime("2011-01-05T01"),ImmutableMap.of("a","c","rows",3,"imps",3,"impers",3,"uniques",collector),new DateTime("2011-01-06T01"),ImmutableMap.of("a","d","rows",4,"imps",4,"impers",4,"uniques",collector),new DateTime("2011-01-07T01"),ImmutableMap.of("a","e","rows",5,"imps",5,"impers",5,"uniques",collector),new DateTime("2011-01-08T01"),ImmutableMap.of("a","f","rows",6,"imps",6,"impers",6,"uniques",collector),new DateTime("2011-01-09T01"),ImmutableMap.of("a","g","rows",7,"imps",7,"impers",7,"uniques",collector)));
  QueryRunner runner=new FinalizeResultsQueryRunner(client,GroupByQueryRunnerTest.makeQueryRunnerFactory(new GroupByQueryConfig()).getToolchest());
  HashMap<String,Object> context=new HashMap<String,Object>();
  TestHelper.assertExpectedObjects(makeGroupByResults(new DateTime("2011-01-05T"),ImmutableMap.of("a","c","rows",3,"imps",3,"impers",3,"uniques",collector),new DateTime("2011-01-05T01"),ImmutableMap.of("a","c","rows",3,"imps",3,"impers",3,"uniques",collector),new DateTime("2011-01-06T"),ImmutableMap.of("a","d","rows",4,"imps",4,"impers",4,"uniques",collector),new DateTime("2011-01-06T01"),ImmutableMap.of("a","d","rows",4,"imps",4,"impers",4,"uniques",collector),new DateTime("2011-01-07T"),ImmutableMap.of("a","e","rows",5,"imps",5,"impers",5,"uniques",collector),new DateTime("2011-01-07T01"),ImmutableMap.of("a","e","rows",5,"imps",5,"impers",5,"uniques",collector),new DateTime("2011-01-08T"),ImmutableMap.of("a","f","rows",6,"imps",6,"impers",6,"uniques",collector),new DateTime("2011-01-08T01"),ImmutableMap.of("a","f","rows",6,"imps",6,"impers",6,"uniques",collector),new DateTime("2011-01-09T"),ImmutableMap.of("a","g","rows",7,"imps",7,"impers",7,"uniques",collector),new DateTime("2011-01-09T01"),ImmutableMap.of("a","g","rows",7,"imps",7,"impers",7,"uniques",collector)),runner.run(builder.setInterval("2011-01-05/2011-01-10").build(),context),"");
}

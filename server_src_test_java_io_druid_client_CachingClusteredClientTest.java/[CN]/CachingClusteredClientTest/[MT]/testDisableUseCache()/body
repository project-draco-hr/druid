{
  final Druids.TimeseriesQueryBuilder builder=Druids.newTimeseriesQueryBuilder().dataSource(DATA_SOURCE).intervals(SEG_SPEC).filters(DIM_FILTER).granularity(GRANULARITY).aggregators(AGGS).postAggregators(POST_AGGS);
  testQueryCaching(client,1,true,builder.context(ImmutableMap.<String,Object>of("useCache","false","populateCache","true")).build(),new Interval("2011-01-01/2011-01-02"),makeTimeResults(new DateTime("2011-01-01"),50,5000));
  Assert.assertEquals(1,cache.getStats().getNumEntries());
  Assert.assertEquals(0,cache.getStats().getNumHits());
  Assert.assertEquals(0,cache.getStats().getNumMisses());
  cache.close("0_0");
  testQueryCaching(client,1,false,builder.context(ImmutableMap.<String,Object>of("useCache","false","populateCache","false")).build(),new Interval("2011-01-01/2011-01-02"),makeTimeResults(new DateTime("2011-01-01"),50,5000));
  Assert.assertEquals(0,cache.getStats().getNumEntries());
  Assert.assertEquals(0,cache.getStats().getNumHits());
  Assert.assertEquals(0,cache.getStats().getNumMisses());
  testQueryCaching(client,1,false,builder.context(ImmutableMap.<String,Object>of("useCache","true","populateCache","false")).build(),new Interval("2011-01-01/2011-01-02"),makeTimeResults(new DateTime("2011-01-01"),50,5000));
  Assert.assertEquals(0,cache.getStats().getNumEntries());
  Assert.assertEquals(0,cache.getStats().getNumHits());
  Assert.assertEquals(1,cache.getStats().getNumMisses());
}

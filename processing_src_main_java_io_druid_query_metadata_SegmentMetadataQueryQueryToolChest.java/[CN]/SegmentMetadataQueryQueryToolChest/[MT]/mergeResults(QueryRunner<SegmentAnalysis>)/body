{
  return new ResultMergeQueryRunner<SegmentAnalysis>(runner){
    @Override public Sequence<SegmentAnalysis> doRun(    QueryRunner<SegmentAnalysis> baseRunner,    Query<SegmentAnalysis> query,    Map<String,Object> context){
      return new MappedSequence<>(CombiningSequence.create(baseRunner.run(query,context),makeOrdering(query),createMergeFn(query)),MERGE_TRANSFORM_FN);
    }
    @Override protected Ordering<SegmentAnalysis> makeOrdering(    Query<SegmentAnalysis> query){
      if (((SegmentMetadataQuery)query).isMerge()) {
        return new Ordering<SegmentAnalysis>(){
          @Override public int compare(          @Nullable SegmentAnalysis left,          @Nullable SegmentAnalysis right){
            return 0;
          }
        }
;
      }
      return query.getResultOrdering();
    }
    @Override protected BinaryFn<SegmentAnalysis,SegmentAnalysis,SegmentAnalysis> createMergeFn(    final Query<SegmentAnalysis> inQ){
      return new BinaryFn<SegmentAnalysis,SegmentAnalysis,SegmentAnalysis>(){
        private final SegmentMetadataQuery query=(SegmentMetadataQuery)inQ;
        @Override public SegmentAnalysis apply(        SegmentAnalysis arg1,        SegmentAnalysis arg2){
          return mergeAnalyses(arg1,arg2,query.isLenientAggregatorMerge());
        }
      }
;
    }
  }
;
}

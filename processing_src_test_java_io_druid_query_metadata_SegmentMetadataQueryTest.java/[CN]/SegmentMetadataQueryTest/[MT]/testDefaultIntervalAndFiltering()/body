{
  SegmentMetadataQuery testQuery=Druids.newSegmentMetadataQueryBuilder().dataSource("testing").toInclude(new ListColumnIncluderator(Arrays.asList("placement"))).merge(true).build();
  Interval expectedInterval=new Interval(JodaUtils.MIN_INSTANT,JodaUtils.MAX_INSTANT);
  Assert.assertTrue(testQuery.isUsingDefaultInterval());
  Assert.assertEquals(testQuery.getIntervals().get(0),expectedInterval);
  Assert.assertEquals(testQuery.getIntervals().size(),1);
  List<LogicalSegment> testSegments=Arrays.asList(new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2012-01-01/P1D");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2012-01-01T01/PT1H");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2013-01-05/P1D");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2013-05-20/P1D");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2014-01-05/P1D");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2014-02-05/P1D");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2015-01-19T01/PT1H");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2015-01-20T02/PT1H");
    }
  }
);
  List<LogicalSegment> filteredSegments=new SegmentMetadataQueryQueryToolChest(new SegmentMetadataQueryConfig()).filterSegments(testQuery,testSegments);
  List<LogicalSegment> expectedSegments=Arrays.asList(new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2015-01-19T01/PT1H");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2015-01-20T02/PT1H");
    }
  }
);
  Assert.assertEquals(filteredSegments.size(),2);
  for (int i=0; i < filteredSegments.size(); i++) {
    Assert.assertEquals(expectedSegments.get(i).getInterval(),filteredSegments.get(i).getInterval());
  }
  SegmentMetadataQueryConfig twoYearPeriodCfg=new SegmentMetadataQueryConfig("P2Y");
  List<LogicalSegment> filteredSegments2=new SegmentMetadataQueryQueryToolChest(twoYearPeriodCfg).filterSegments(testQuery,testSegments);
  List<LogicalSegment> expectedSegments2=Arrays.asList(new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2013-05-20/P1D");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2014-01-05/P1D");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2014-02-05/P1D");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2015-01-19T01/PT1H");
    }
  }
,new LogicalSegment(){
    @Override public Interval getInterval(){
      return new Interval("2015-01-20T02/PT1H");
    }
  }
);
  Assert.assertEquals(filteredSegments2.size(),5);
  for (int i=0; i < filteredSegments2.size(); i++) {
    Assert.assertEquals(expectedSegments2.get(i).getInterval(),filteredSegments2.get(i).getInterval());
  }
}

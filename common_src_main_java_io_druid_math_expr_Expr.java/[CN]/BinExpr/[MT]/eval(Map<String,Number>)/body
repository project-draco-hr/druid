{
switch (opToken.getType()) {
case Token.AND:
    Number leftVal=left.eval(bindings);
  Number rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
  long lval=leftVal.longValue();
  if (lval > 0) {
    long rval=rightVal.longValue();
    return rval > 0 ? 1 : 0;
  }
 else {
    return 0;
  }
}
 else {
  double lval=leftVal.doubleValue();
  if (lval > 0) {
    double rval=rightVal.doubleValue();
    return rval > 0 ? 1.0d : 0.0d;
  }
 else {
    return 0.0d;
  }
}
case Token.OR:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
long lval=leftVal.longValue();
if (lval > 0) {
return 1;
}
 else {
long rval=rightVal.longValue();
return rval > 0 ? 1 : 0;
}
}
 else {
double lval=leftVal.doubleValue();
if (lval > 0) {
return 1.0d;
}
 else {
double rval=rightVal.doubleValue();
return rval > 0 ? 1.0d : 0.0d;
}
}
case Token.LT:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() < rightVal.longValue() ? 1 : 0;
}
 else {
return leftVal.doubleValue() < rightVal.doubleValue() ? 1.0d : 0.0d;
}
case Token.LEQ:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() <= rightVal.longValue() ? 1 : 0;
}
 else {
return leftVal.doubleValue() <= rightVal.doubleValue() ? 1.0d : 0.0d;
}
case Token.GT:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() > rightVal.longValue() ? 1 : 0;
}
 else {
return leftVal.doubleValue() > rightVal.doubleValue() ? 1.0d : 0.0d;
}
case Token.GEQ:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() >= rightVal.longValue() ? 1 : 0;
}
 else {
return leftVal.doubleValue() >= rightVal.doubleValue() ? 1.0d : 0.0d;
}
case Token.EQ:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() == rightVal.longValue() ? 1 : 0;
}
 else {
return leftVal.doubleValue() == rightVal.doubleValue() ? 1.0d : 0.0d;
}
case Token.NEQ:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() != rightVal.longValue() ? 1 : 0;
}
 else {
return leftVal.doubleValue() != rightVal.doubleValue() ? 1.0d : 0.0d;
}
case Token.PLUS:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() + rightVal.longValue();
}
 else {
return leftVal.doubleValue() + rightVal.doubleValue();
}
case Token.MINUS:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() - rightVal.longValue();
}
 else {
return leftVal.doubleValue() - rightVal.doubleValue();
}
case Token.MUL:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() * rightVal.longValue();
}
 else {
return leftVal.doubleValue() * rightVal.doubleValue();
}
case Token.DIV:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() / rightVal.longValue();
}
 else {
return leftVal.doubleValue() / rightVal.doubleValue();
}
case Token.MODULO:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return leftVal.longValue() % rightVal.longValue();
}
 else {
return leftVal.doubleValue() % rightVal.doubleValue();
}
case Token.CARROT:
leftVal=left.eval(bindings);
rightVal=right.eval(bindings);
if (isLong(leftVal,rightVal)) {
return LongMath.pow(leftVal.longValue(),rightVal.intValue());
}
 else {
return Math.pow(leftVal.doubleValue(),rightVal.doubleValue());
}
default :
throw new RuntimeException("Unknown operator " + opToken.getMatch());
}
}

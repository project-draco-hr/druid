{
  testingCluster=new TestingCluster(1);
  testingCluster.start();
  cf=CuratorFrameworkFactory.builder().connectString(testingCluster.getConnectString()).retryPolicy(new ExponentialBackoffRetry(1,10)).compressionProvider(new PotentiallyGzippedCompressionProvider(false)).build();
  cf.start();
  cf.create().creatingParentsIfNeeded().forPath(basePath);
  worker=new Worker("worker","localhost",3,"0");
  workerCuratorCoordinator=new WorkerCuratorCoordinator(jsonMapper,new ZkPathsConfig(){
    @Override public String getZkBasePath(){
      return basePath;
    }
  }
,new TestRemoteTaskRunnerConfig(),cf,worker);
  workerCuratorCoordinator.start();
  final File tmp=Files.createTempDir();
  workerTaskMonitor=new WorkerTaskMonitor(jsonMapper,cf,workerCuratorCoordinator,new ThreadPoolTaskRunner(new TaskToolboxFactory(new TaskConfig(tmp.toString(),null,null,0),null,null,null,null,null,null,null,null,null,null,new SegmentLoaderFactory(new OmniSegmentLoader(ImmutableMap.<String,DataSegmentPuller>of("local",new LocalDataSegmentPuller()),null,new SegmentLoaderConfig(){
    @Override public List<StorageLocationConfig> getLocations(){
      return Lists.newArrayList();
    }
  }
)),jsonMapper)),new WorkerConfig().setCapacity(1));
  jsonMapper.registerSubtypes(new NamedType(TestMergeTask.class,"test"));
  jsonMapper.registerSubtypes(new NamedType(TestRealtimeTask.class,"test_realtime"));
  workerTaskMonitor.start();
  task=TestMergeTask.createDummyTask("test");
}

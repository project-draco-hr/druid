{
  DruidCluster druidCluster=new DruidCluster(ImmutableMap.of("hot",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(new DruidServer("serverHot","hostHot",1000,"historical","hot"),mockPeon))),"normal",MinMaxPriorityQueue.orderedBy(Ordering.natural().reverse()).create(Arrays.asList(new ServerHolder(new DruidServer("serverNorm","hostNorm",1000,"historical","normal"),mockPeon)))));
  RuleMap ruleMap=new RuleMap(ImmutableMap.<String,List<Rule>>of("test",Lists.<Rule>newArrayList(new IntervalLoadRule(new Interval("2012-01-01T00:00:00.000Z/2012-01-01T12:00:00.000Z"),1,"hot"))),Lists.<Rule>newArrayList(new IntervalLoadRule(new Interval("2012-01-01T00:00:00.000Z/2012-01-02T00:00:00.000Z"),1,"normal")));
  SegmentRuleLookup segmentRuleLookup=SegmentRuleLookup.make(availableSegments,ruleMap);
  SegmentReplicantLookup segmentReplicantLookup=SegmentReplicantLookup.make(druidCluster);
  DruidMasterRuntimeParams params=new DruidMasterRuntimeParams.Builder().withDruidCluster(druidCluster).withAvailableSegments(availableSegments).withSegmentRuleLookup(segmentRuleLookup).withSegmentReplicantLookup(segmentReplicantLookup).build();
  DruidMasterRuntimeParams afterParams=assigner.run(params);
  Assert.assertTrue(afterParams.getAssignedCount().get("hot").get() == 12);
  Assert.assertTrue(afterParams.getUnassignedCount() == 0);
  Assert.assertTrue(afterParams.getUnassignedSize() == 0);
  EasyMock.verify(master);
}

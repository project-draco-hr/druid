{
  S3Coords s3Coords=new S3Coords(segment);
  log.info("Pulling index at path[%s] to outDir[%s]",s3Coords,outDir);
  if (!isObjectInBucket(s3Coords)) {
    throw new SegmentLoadingException("IndexFile[%s] does not exist.",s3Coords);
  }
  if (!outDir.exists()) {
    outDir.mkdirs();
  }
  if (!outDir.isDirectory()) {
    throw new ISE("outDir[%s] must be a directory.",outDir);
  }
  long startTime=System.currentTimeMillis();
  S3Object s3Obj=null;
  try {
    s3Obj=s3Client.getObject(new S3Bucket(s3Coords.bucket),s3Coords.path);
    InputStream in=null;
    try {
      in=s3Obj.getDataInputStream();
      final String key=s3Obj.getKey();
      if (key.endsWith(".zip")) {
        CompressionUtils.unzip(in,outDir);
      }
 else       if (key.endsWith(".gz")) {
        final File outFile=new File(outDir,toFilename(key,".gz"));
        ByteStreams.copy(new GZIPInputStream(in),Files.newOutputStreamSupplier(outFile));
      }
 else {
        ByteStreams.copy(in,Files.newOutputStreamSupplier(new File(outDir,toFilename(key,""))));
      }
      log.info("Pull of file[%s] completed in %,d millis",s3Obj,System.currentTimeMillis() - startTime);
    }
 catch (    IOException e) {
      FileUtils.deleteDirectory(outDir);
      throw new SegmentLoadingException(e,"Problem decompressing object[%s]",s3Obj);
    }
 finally {
      Closeables.closeQuietly(in);
    }
  }
 catch (  Exception e) {
    throw new SegmentLoadingException(e,e.getMessage());
  }
 finally {
    S3Utils.closeStreamsQuietly(s3Obj);
  }
}

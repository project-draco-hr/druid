{
  final Sequence<Cursor> cursors=makeCursorSequence(Filters.toFilter(maybeOptimize(filter)));
  Sequence<Aggregator> aggSeq=Sequences.map(cursors,new Function<Cursor,Aggregator>(){
    @Override public Aggregator apply(    Cursor input){
      Aggregator agg=new FilteredAggregatorFactory(new CountAggregatorFactory("count"),maybeOptimize(filter)).factorize(input);
      for (; !input.isDone(); input.advance()) {
        agg.aggregate();
      }
      return agg;
    }
  }
);
  return Sequences.toList(aggSeq,new ArrayList<Aggregator>()).get(0).getLong();
}

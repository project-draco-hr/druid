{
  final MapCache l1=new MapCache(new ByteCountingLRUMap(1024 * 1024));
  final MapCache l2=new MapCache(new ByteCountingLRUMap(1024 * 1024));
  HybridCache cache=new HybridCache(l1,l2);
  final Cache.NamedKey key1=new Cache.NamedKey("a",HI);
  final Cache.NamedKey key2=new Cache.NamedKey("b",HI);
  final Cache.NamedKey key3=new Cache.NamedKey("c",HI);
  final Cache.NamedKey key4=new Cache.NamedKey("d",HI);
  final byte[] value1=Ints.toByteArray(1);
  final byte[] value2=Ints.toByteArray(2);
  final byte[] value3=Ints.toByteArray(3);
  cache.put(key1,value1);
  Assert.assertEquals(value1,l1.get(key1));
  Assert.assertEquals(value1,l2.get(key1));
  Assert.assertEquals(value1,cache.get(key1));
  int hits=0;
  Assert.assertEquals(0,cache.getStats().getNumMisses());
  Assert.assertEquals(++hits,cache.getStats().getNumHits());
  l1.put(key2,value2);
  Assert.assertEquals(value2,cache.get(key2));
  Assert.assertEquals(0,cache.getStats().getNumMisses());
  Assert.assertEquals(++hits,cache.getStats().getNumHits());
  l2.put(key3,value3);
  Assert.assertEquals(value3,cache.get(key3));
  Assert.assertEquals(0,cache.getStats().getNumMisses());
  Assert.assertEquals(++hits,cache.getStats().getNumHits());
{
    final HashSet<Cache.NamedKey> keys=Sets.newHashSet(key1,key2,key3);
    Map<Cache.NamedKey,byte[]> res=cache.getBulk(keys);
    Assert.assertNotNull(res);
    Assert.assertEquals(keys,res.keySet());
    Assert.assertArrayEquals(value1,res.get(key1));
    Assert.assertArrayEquals(value2,res.get(key2));
    Assert.assertArrayEquals(value3,res.get(key3));
    hits+=3;
    Assert.assertEquals(0,cache.getStats().getNumMisses());
    Assert.assertEquals(hits,cache.getStats().getNumHits());
  }
{
    final HashSet<Cache.NamedKey> keys=Sets.newHashSet(key1,key2);
    Map<Cache.NamedKey,byte[]> res=cache.getBulk(keys);
    Assert.assertNotNull(res);
    Assert.assertEquals(keys,res.keySet());
    Assert.assertArrayEquals(value1,res.get(key1));
    Assert.assertArrayEquals(value2,res.get(key2));
    hits+=2;
    Assert.assertEquals(0,cache.getStats().getNumMisses());
    Assert.assertEquals(hits,cache.getStats().getNumHits());
  }
  int misses=0;
  Assert.assertNull(cache.get(key4));
  Assert.assertEquals(++misses,cache.getStats().getNumMisses());
  Assert.assertTrue(cache.getBulk(Sets.newHashSet(key4)).isEmpty());
  Assert.assertEquals(++misses,cache.getStats().getNumMisses());
{
    final Map<Cache.NamedKey,byte[]> res=cache.getBulk(Sets.newHashSet(key1,key4));
    Assert.assertEquals(Sets.newHashSet(key1),res.keySet());
    Assert.assertArrayEquals(value1,res.get(key1));
    Assert.assertEquals(++hits,cache.getStats().getNumHits());
    Assert.assertEquals(++misses,cache.getStats().getNumMisses());
  }
{
    final Map<Cache.NamedKey,byte[]> res=cache.getBulk(Sets.newHashSet(key3,key4));
    Assert.assertEquals(Sets.newHashSet(key3),res.keySet());
    Assert.assertArrayEquals(value3,res.get(key3));
    Assert.assertEquals(++hits,cache.getStats().getNumHits());
    Assert.assertEquals(++misses,cache.getStats().getNumMisses());
  }
}

{
  druidServer=EasyMock.createMock(DruidServer.class);
  serverInventoryView=EasyMock.createMock(SingleServerInventoryView.class);
  databaseSegmentManager=EasyMock.createNiceMock(MetadataSegmentManager.class);
  metadataRuleManager=EasyMock.createNiceMock(MetadataRuleManager.class);
  configManager=EasyMock.createNiceMock(JacksonConfigManager.class);
  EasyMock.expect(configManager.watch(EasyMock.anyString(),EasyMock.anyObject(Class.class),EasyMock.anyObject())).andReturn(new AtomicReference(new CoordinatorDynamicConfig.Builder().build())).anyTimes();
  EasyMock.replay(configManager);
  setupServerAndCurator();
  curator.start();
  curator.blockUntilConnected();
  curator.create().creatingParentsIfNeeded().forPath(LOADPATH);
  objectMapper=new DefaultObjectMapper();
  druidCoordinatorConfig=new TestDruidCoordinatorConfig(new Duration(COORDINATOR_START_DELAY),new Duration(COORDINATOR_PERIOD),null,null,null,false,false);
  pathChildrenCache=new PathChildrenCache(curator,LOADPATH,true,true,Execs.singleThreaded("coordinator_test_path_children_cache-%d"));
  loadQueuePeon=new LoadQueuePeon(curator,LOADPATH,objectMapper,Execs.scheduledSingleThreaded("coordinator_test_load_queue_peon_scheduled-%d"),Execs.singleThreaded("coordinator_test_load_queue_peon-%d"),druidCoordinatorConfig);
  druidNode=new DruidNode("hey","what",1234);
  loadManagementPeons=new MapMaker().makeMap();
  scheduledExecutorFactory=new ScheduledExecutorFactory(){
    @Override public ScheduledExecutorService create(    int corePoolSize,    final String nameFormat){
      return Executors.newSingleThreadScheduledExecutor();
    }
  }
;
  leaderAnnouncerLatch=new CountDownLatch(1);
  leaderUnannouncerLatch=new CountDownLatch(1);
  coordinator=new DruidCoordinator(druidCoordinatorConfig,new ZkPathsConfig(){
    @Override public String getBase(){
      return "druid";
    }
  }
,configManager,databaseSegmentManager,serverInventoryView,metadataRuleManager,curator,new NoopServiceEmitter(),scheduledExecutorFactory,null,taskMaster,new NoopServiceAnnouncer(){
    @Override public void announce(    DruidNode node){
      leaderAnnouncerLatch.countDown();
    }
    @Override public void unannounce(    DruidNode node){
      leaderUnannouncerLatch.countDown();
    }
  }
,druidNode,loadManagementPeons);
}

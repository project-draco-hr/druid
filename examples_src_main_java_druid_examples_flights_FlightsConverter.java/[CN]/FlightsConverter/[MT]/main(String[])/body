{
  DateTimeZone.setDefault(DateTimeZone.UTC);
  ObjectMapper mapper=new DefaultObjectMapper();
  File flightsDataDirectory=new File(args[0]);
  File flightsOutputDirectory=new File(args[1]);
  flightsOutputDirectory.mkdirs();
  for (  File flightsDataFile : flightsDataDirectory.listFiles()) {
    System.out.printf("Processing file[%s]%n",flightsDataFile);
    CSVParser parser=new CSVParser();
    BufferedReader in=null;
    BufferedWriter out=null;
    try {
      in=new BufferedReader(new FileReader(flightsDataFile));
      out=new BufferedWriter(new FileWriter(new File(flightsOutputDirectory,flightsDataFile.getName().replace("csv","json"))));
      int count=0;
      long time=System.currentTimeMillis();
      parser.setFieldNames(in.readLine());
      String line=null;
      while ((line=in.readLine()) != null) {
        if (++count % 100000 == 0) {
          System.out.printf("File[%s], processed %,d lines in %,d millis.%n",flightsDataFile.getName(),count,System.currentTimeMillis() - time);
          time=System.currentTimeMillis();
        }
        Map<String,Object> event=parser.parse(line);
        int year=Integer.parseInt(event.get("Year").toString());
        int month=Integer.parseInt(event.get("Month").toString());
        int dayOfMonth=Integer.parseInt(event.get("DayofMonth").toString());
        int departureTime=Integer.parseInt(event.get("CRSDepTime").toString());
        int hourOfDay=departureTime / 100;
        final int minuteOfHour=departureTime % 100;
        DateTime timestamp=new DateTime(String.format("%4d-%02d-%02d",year,month,dayOfMonth)).plus(new Period(hourOfDay,minuteOfHour,0,0));
        event.put("timestamp",timestamp);
        for (        String metricDimension : METRIC_DIMENSIONS) {
          String value=event.get(metricDimension).toString();
          if (value.equals("NA")) {
            event.put(metricDimension,0);
          }
 else {
            event.put(metricDimension,Integer.parseInt(value));
          }
        }
        out.write(mapper.writeValueAsString(event));
        out.write("\n");
      }
    }
  finally {
      Closeables.closeQuietly(in);
      Closeables.closeQuietly(out);
    }
  }
}

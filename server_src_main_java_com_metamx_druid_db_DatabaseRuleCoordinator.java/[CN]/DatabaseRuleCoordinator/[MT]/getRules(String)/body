{
synchronized (lock) {
    return dbi.withHandle(new HandleCallback<List<Rule>>(){
      @Override public List<Rule> withHandle(      Handle handle) throws Exception {
        return handle.createQuery(String.format("SELECT payload FROM %s WHERE dataSource = :dataSource",config.getRuleTable())).bind("dataSource",dataSource).fold(Lists.<Rule>newArrayList(),new Folder3<ArrayList<Rule>,Map<String,Object>>(){
          @Override public ArrayList<Rule> fold(          ArrayList<Rule> rules,          Map<String,Object> stringObjectMap,          FoldController foldController,          StatementContext statementContext) throws SQLException {
            try {
              return jsonMapper.readValue(MapUtils.getString(stringObjectMap,"payload"),new TypeReference<List<Rule>>(){
              }
);
            }
 catch (            Exception e) {
              throw Throwables.propagate(e);
            }
          }
        }
);
      }
    }
);
  }
}

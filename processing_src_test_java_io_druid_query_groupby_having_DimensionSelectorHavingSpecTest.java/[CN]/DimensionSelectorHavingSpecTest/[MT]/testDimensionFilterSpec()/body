{
  DimensionSelectorHavingSpec spec=new DimensionSelectorHavingSpec("dimension","v",null);
  assertTrue(spec.eval(getTestRow("v")));
  assertTrue(spec.eval(getTestRow(ImmutableList.of("v","v1"))));
  assertFalse(spec.eval(getTestRow(ImmutableList.of())));
  assertFalse(spec.eval(getTestRow("v1")));
  spec=new DimensionSelectorHavingSpec("dimension",null,null);
  assertTrue(spec.eval(getTestRow(ImmutableList.of())));
  assertTrue(spec.eval(getTestRow(ImmutableList.of(""))));
  assertFalse(spec.eval(getTestRow(ImmutableList.of("v"))));
  assertFalse(spec.eval(getTestRow(ImmutableList.of("v","v1"))));
  spec=new DimensionSelectorHavingSpec("dimension","",null);
  assertTrue(spec.eval(getTestRow(ImmutableList.of())));
  assertTrue(spec.eval(getTestRow(ImmutableList.of(""))));
  assertTrue(spec.eval(getTestRow(ImmutableList.of("v","v1",""))));
  assertFalse(spec.eval(getTestRow(ImmutableList.of("v"))));
  assertFalse(spec.eval(getTestRow(ImmutableList.of("v","v1"))));
  ExtractionFn extractionFn=new RegexDimExtractionFn("^([^,]*),",true,"default");
  spec=new DimensionSelectorHavingSpec("dimension","v",extractionFn);
  assertTrue(spec.eval(getTestRow(ImmutableList.of("v,v1","v2,v3"))));
  assertFalse(spec.eval(getTestRow(ImmutableList.of("v1,v4"))));
  assertFalse(spec.eval(getTestRow(ImmutableList.of("v"))));
  assertFalse(spec.eval(getTestRow(ImmutableList.of("v1","default"))));
  assertTrue(spec.eval(getTestRow(ImmutableList.of("v,default","none"))));
  spec=new DimensionSelectorHavingSpec("dimension","default",extractionFn);
  assertTrue(spec.eval(getTestRow(ImmutableList.of("v1,v2","none"))));
}

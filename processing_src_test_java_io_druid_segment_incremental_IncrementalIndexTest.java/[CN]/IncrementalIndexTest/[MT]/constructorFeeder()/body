{
  DimensionsSpec dimensions=new DimensionsSpec(Arrays.asList(new StringDimensionSchema("string"),new FloatDimensionSchema("float"),new LongDimensionSchema("long")),null,null);
  AggregatorFactory[] metrics={new FilteredAggregatorFactory(new CountAggregatorFactory("cnt"),new SelectorDimFilter("billy","A",null))};
  final IncrementalIndexSchema schema=new IncrementalIndexSchema.Builder().withMinTimestamp(0).withQueryGranularity(QueryGranularities.MINUTE).withDimensionsSpec(dimensions).withMetrics(metrics).build();
  final List<Object[]> constructors=Lists.newArrayList();
  for (  final Boolean sortFacts : ImmutableList.of(false,true)) {
    constructors.add(new Object[]{new IndexCreator(){
      @Override public IncrementalIndex createIndex(){
        return new OnheapIncrementalIndex(schema,false,true,sortFacts,1000);
      }
    }
});
    constructors.add(new Object[]{new IndexCreator(){
      @Override public IncrementalIndex createIndex(){
        return new OffheapIncrementalIndex(schema,true,true,sortFacts,1000000,new StupidPool<ByteBuffer>(new Supplier<ByteBuffer>(){
          @Override public ByteBuffer get(){
            return ByteBuffer.allocate(256 * 1024);
          }
        }
));
      }
    }
});
  }
  return constructors;
}

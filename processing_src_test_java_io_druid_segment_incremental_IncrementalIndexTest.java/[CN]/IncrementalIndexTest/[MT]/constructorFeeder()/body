{
  DimensionsSpec dimensions=new DimensionsSpec(Arrays.asList(new StringDimensionSchema("string"),new FloatDimensionSchema("float"),new LongDimensionSchema("long")),null,null);
  AggregatorFactory[] metrics={new FilteredAggregatorFactory(new CountAggregatorFactory("cnt"),new SelectorDimFilter("billy","A",null))};
  final IncrementalIndexSchema schema=new IncrementalIndexSchema(0,QueryGranularity.MINUTE,dimensions,metrics);
  return Arrays.asList(new Object[][]{{new IndexCreator(){
    @Override public IncrementalIndex createIndex(){
      return new OnheapIncrementalIndex(schema,true,1000);
    }
  }
},{new IndexCreator(){
    @Override public IncrementalIndex createIndex(){
      return new OffheapIncrementalIndex(schema,true,true,true,1000000,new StupidPool<ByteBuffer>(new Supplier<ByteBuffer>(){
        @Override public ByteBuffer get(){
          return ByteBuffer.allocate(256 * 1024);
        }
      }
));
    }
  }
}});
}

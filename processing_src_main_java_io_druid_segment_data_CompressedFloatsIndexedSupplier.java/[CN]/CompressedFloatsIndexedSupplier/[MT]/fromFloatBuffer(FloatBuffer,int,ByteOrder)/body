{
  Preconditions.checkArgument(chunkFactor * Floats.BYTES <= 0xffff,"Chunks must be <= 64k bytes. chunkFactor was[%s]",chunkFactor);
  return new CompressedFloatsIndexedSupplier(buffer.remaining(),chunkFactor,GenericIndexed.fromIterable(new Iterable<ResourceHolder<FloatBuffer>>(){
    @Override public Iterator<ResourceHolder<FloatBuffer>> iterator(){
      return new Iterator<ResourceHolder<FloatBuffer>>(){
        FloatBuffer myBuffer=buffer.asReadOnlyBuffer();
        @Override public boolean hasNext(){
          return myBuffer.hasRemaining();
        }
        @Override public ResourceHolder<FloatBuffer> next(){
          final FloatBuffer retVal=myBuffer.asReadOnlyBuffer();
          if (chunkFactor < myBuffer.remaining()) {
            retVal.limit(retVal.position() + chunkFactor);
          }
          myBuffer.position(myBuffer.position() + retVal.remaining());
          return StupidResourceHolder.create(retVal);
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
,CompressedFloatBufferObjectStrategy.getBufferForOrder(order)));
}

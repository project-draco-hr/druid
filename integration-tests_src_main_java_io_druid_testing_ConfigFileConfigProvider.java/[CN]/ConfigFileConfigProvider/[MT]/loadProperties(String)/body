{
  ObjectMapper jsonMapper=new ObjectMapper();
  try {
    props=jsonMapper.readValue(new File(configFile),new TypeReference<Map<String,String>>(){
    }
);
  }
 catch (  IOException ex) {
    throw new RuntimeException(ex);
  }
  routerHost=props.get("router_host");
  if (null != routerHost) {
    routerHost+=":" + props.get("router_port");
  }
  brokerHost=props.get("broker_host") + ":" + props.get("broker_port");
  historicalHost=props.get("historical_host") + ":" + props.get("historical_port");
  coordinatorHost=props.get("coordinator_host") + ":" + props.get("coordinator_port");
  indexerHost=props.get("indexer_host") + ":" + props.get("indexer_port");
  middleManagerHost=props.get("middlemanager_host");
  zookeeperHosts=props.get("zookeeper_hosts");
  kafkaHost=props.get("kafka_host") + ":" + props.get("kafka_port");
  LOG.info("router: [%s]",routerHost);
  LOG.info("broker: [%s]",brokerHost);
  LOG.info("coordinator: [%s]",coordinatorHost);
  LOG.info("overlord: [%s]",indexerHost);
  LOG.info("middle manager: [%s]",middleManagerHost);
  LOG.info("zookeepers: [%s]",zookeeperHosts);
  LOG.info("kafka: [%s]",kafkaHost);
}

{
  try {
    DataInput in=ByteStreams.newDataInput(data);
    long timestamp=in.readLong();
    StringArrayWritable sw=new StringArrayWritable();
    sw.readFields(in);
    List<String> dimensions=Arrays.asList(sw.toStrings());
    MapWritable mw=new MapWritable();
    mw.readFields(in);
    Map<String,Object> event=Maps.newHashMap();
    for (    String d : dimensions) {
      Writable v=mw.get(new Text(d));
      if (v == null) {
        continue;
      }
      if (v instanceof Text) {
        event.put(d,((Text)v).toString());
      }
 else       if (v instanceof StringArrayWritable) {
        event.put(d,Arrays.asList(((StringArrayWritable)v).toStrings()));
      }
 else {
        throw new ISE("unknown dim value type %s",v.getClass().getName());
      }
    }
    for (    AggregatorFactory aggFactory : aggs) {
      String k=aggFactory.getName();
      Writable v=mw.get(new Text(k));
      if (v == null) {
        continue;
      }
      String t=aggFactory.getTypeName();
      if (t.equals("float")) {
        event.put(k,((FloatWritable)v).get());
      }
 else       if (t.equals("long")) {
        event.put(k,((LongWritable)v).get());
      }
 else {
        ComplexMetricSerde serde=getComplexMetricSerde(t);
        BytesWritable bw=(BytesWritable)v;
        event.put(k,serde.fromBytes(bw.getBytes(),0,bw.getLength()));
      }
    }
    return new MapBasedInputRow(timestamp,dimensions,event);
  }
 catch (  IOException ex) {
    throw Throwables.propagate(ex);
  }
}

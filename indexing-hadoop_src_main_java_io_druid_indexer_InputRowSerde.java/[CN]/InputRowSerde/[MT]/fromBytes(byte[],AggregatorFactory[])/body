{
  try {
    DataInput in=ByteStreams.newDataInput(data);
    long timestamp=in.readLong();
    Map<String,Object> event=Maps.newHashMap();
    List<String> dimensions=Lists.newArrayList();
    int dimNum=WritableUtils.readVInt(in);
    for (int i=0; i < dimNum; i++) {
      String dimension=readString(in);
      dimensions.add(dimension);
      List<String> dimensionValues=readStringArray(in);
      if (dimensionValues == null) {
        continue;
      }
      if (dimensionValues.size() == 1) {
        event.put(dimension,dimensionValues.get(0));
      }
 else {
        event.put(dimension,dimensionValues);
      }
    }
    int metricSize=WritableUtils.readVInt(in);
    for (int i=0; i < metricSize; i++) {
      String metric=readString(in);
      String type=getType(metric,aggs,i);
      if (type.equals("float")) {
        event.put(metric,in.readFloat());
      }
 else       if (type.equals("long")) {
        event.put(metric,WritableUtils.readVLong(in));
      }
 else {
        ComplexMetricSerde serde=getComplexMetricSerde(type);
        byte[] value=readBytes(in);
        event.put(metric,serde.fromBytes(value,0,value.length));
      }
    }
    return new MapBasedInputRow(timestamp,dimensions,event);
  }
 catch (  IOException ex) {
    throw Throwables.propagate(ex);
  }
}

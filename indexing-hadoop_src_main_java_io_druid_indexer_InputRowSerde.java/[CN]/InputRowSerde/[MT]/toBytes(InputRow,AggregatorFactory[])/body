{
  try {
    ByteArrayDataOutput out=ByteStreams.newDataOutput();
    out.writeLong(row.getTimestampFromEpoch());
    List<String> dimList=row.getDimensions();
    Text[] dims=EMPTY_TEXT_ARRAY;
    if (dimList != null) {
      dims=new Text[dimList.size()];
      for (int i=0; i < dims.length; i++) {
        dims[i]=new Text(dimList.get(i));
      }
    }
    StringArrayWritable sw=new StringArrayWritable(dims);
    sw.write(out);
    MapWritable mw=new MapWritable();
    if (dimList != null) {
      for (      String dim : dimList) {
        List<String> dimValue=row.getDimension(dim);
        if (dimValue == null || dimValue.size() == 0) {
          continue;
        }
        if (dimValue.size() == 1) {
          mw.put(new Text(dim),new Text(dimValue.get(0)));
        }
 else {
          Text[] dimValueArr=new Text[dimValue.size()];
          for (int i=0; i < dimValueArr.length; i++) {
            dimValueArr[i]=new Text(dimValue.get(i));
          }
          mw.put(new Text(dim),new StringArrayWritable(dimValueArr));
        }
      }
    }
    Supplier<InputRow> supplier=new Supplier<InputRow>(){
      @Override public InputRow get(){
        return row;
      }
    }
;
    for (    AggregatorFactory aggFactory : aggs) {
      String k=aggFactory.getName();
      Aggregator agg=aggFactory.factorize(IncrementalIndex.makeColumnSelectorFactory(aggFactory,supplier,true));
      agg.aggregate();
      String t=aggFactory.getTypeName();
      if (t.equals("float")) {
        mw.put(new Text(k),new FloatWritable(agg.getFloat()));
      }
 else       if (t.equals("long")) {
        mw.put(new Text(k),new LongWritable(agg.getLong()));
      }
 else {
        Object val=agg.get();
        ComplexMetricSerde serde=getComplexMetricSerde(t);
        mw.put(new Text(k),new BytesWritable(serde.toBytes(val)));
      }
    }
    mw.write(out);
    return out.toByteArray();
  }
 catch (  IOException ex) {
    throw Throwables.propagate(ex);
  }
}

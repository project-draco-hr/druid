{
  try {
    ByteArrayDataOutput out=ByteStreams.newDataOutput();
    out.writeLong(row.getTimestampFromEpoch());
    List<String> dimList=row.getDimensions();
    WritableUtils.writeVInt(out,dimList.size());
    if (dimList != null) {
      for (      String dim : dimList) {
        List<String> dimValues=row.getDimension(dim);
        writeString(dim,out);
        writeStringArray(dimValues,out);
      }
    }
    Supplier<InputRow> supplier=new Supplier<InputRow>(){
      @Override public InputRow get(){
        return row;
      }
    }
;
    WritableUtils.writeVInt(out,aggs.length);
    for (    AggregatorFactory aggFactory : aggs) {
      String k=aggFactory.getName();
      writeString(k,out);
      Aggregator agg=aggFactory.factorize(IncrementalIndex.makeColumnSelectorFactory(aggFactory,supplier,true));
      agg.aggregate();
      String t=aggFactory.getTypeName();
      if (t.equals("float")) {
        out.writeFloat(agg.getFloat());
      }
 else       if (t.equals("long")) {
        WritableUtils.writeVLong(out,agg.getLong());
      }
 else {
        Object val=agg.get();
        ComplexMetricSerde serde=getComplexMetricSerde(t);
        writeBytes(serde.toBytes(val),out);
      }
    }
    return out.toByteArray();
  }
 catch (  IOException ex) {
    throw Throwables.propagate(ex);
  }
}
